// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_4u_array_ap_ufixed_6_0_4_0_0_4u_relu_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer6_out_dout,
        layer6_out_empty_n,
        layer6_out_read,
        layer6_out_num_data_valid,
        layer6_out_fifo_cap,
        layer8_out_din,
        layer8_out_full_n,
        layer8_out_write,
        layer8_out_num_data_valid,
        layer8_out_fifo_cap,
        start_out,
        start_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [75:0] layer6_out_dout;
input   layer6_out_empty_n;
output   layer6_out_read;
input  [8:0] layer6_out_num_data_valid;
input  [8:0] layer6_out_fifo_cap;
output  [23:0] layer8_out_din;
input   layer8_out_full_n;
output   layer8_out_write;
input  [8:0] layer8_out_num_data_valid;
input  [8:0] layer8_out_fifo_cap;
output   start_out;
output   start_write;

reg ap_idle;
reg layer6_out_read;
reg layer8_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln41_fu_900_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    layer6_out_blk_n;
reg    layer8_out_blk_n;
reg   [7:0] i1_fu_116;
wire   [7:0] i_fu_894_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i1_load;
wire   [18:0] trunc_ln44_fu_141_p1;
wire   [2:0] trunc_ln52_fu_207_p1;
wire   [0:0] tmp_70_fu_225_p3;
wire   [0:0] icmp_ln52_fu_211_p2;
wire   [0:0] or_ln52_fu_233_p2;
wire   [0:0] tmp_68_fu_199_p3;
wire   [0:0] and_ln52_fu_239_p2;
wire   [5:0] trunc_ln3_fu_189_p4;
wire   [5:0] zext_ln52_fu_245_p1;
wire   [8:0] tmp_s_fu_255_p4;
wire   [5:0] add_ln52_fu_249_p2;
wire   [0:0] tmp_69_fu_217_p3;
wire   [0:0] tmp_72_fu_271_p3;
wire   [0:0] not_tmp_92_fu_279_p2;
wire   [0:0] icmp_ln52_13_fu_265_p2;
wire   [0:0] and_ln52_24_fu_285_p2;
wire   [0:0] empty_fu_291_p2;
wire   [0:0] tmp_fu_181_p3;
wire   [0:0] xor_ln52_fu_303_p2;
wire   [0:0] or_ln52_20_fu_297_p2;
wire   [5:0] select_ln52_fu_315_p3;
wire   [0:0] or_ln52_21_fu_309_p2;
wire   [5:0] select_ln52_20_fu_323_p3;
wire   [0:0] icmp_ln51_fu_175_p2;
wire   [5:0] select_ln52_21_fu_331_p3;
wire   [18:0] trunc_ln44_s_fu_145_p4;
wire   [2:0] tmp_41_fu_379_p4;
wire   [0:0] tmp_77_fu_403_p3;
wire   [0:0] icmp_ln52_14_fu_389_p2;
wire   [0:0] or_ln52_22_fu_411_p2;
wire   [0:0] tmp_75_fu_371_p3;
wire   [0:0] and_ln52_10_fu_417_p2;
wire   [5:0] trunc_ln52_s_fu_361_p4;
wire   [5:0] zext_ln52_6_fu_423_p1;
wire   [8:0] tmp_42_fu_433_p4;
wire   [5:0] add_ln52_6_fu_427_p2;
wire   [0:0] tmp_76_fu_395_p3;
wire   [0:0] tmp_78_fu_449_p3;
wire   [0:0] not_tmp_99_fu_457_p2;
wire   [0:0] icmp_ln52_15_fu_443_p2;
wire   [0:0] and_ln52_26_fu_463_p2;
wire   [0:0] empty_54_fu_469_p2;
wire   [0:0] tmp_73_fu_353_p3;
wire   [0:0] xor_ln52_6_fu_481_p2;
wire   [0:0] or_ln52_23_fu_475_p2;
wire   [5:0] select_ln52_22_fu_493_p3;
wire   [0:0] or_ln52_24_fu_487_p2;
wire   [5:0] select_ln52_23_fu_501_p3;
wire   [0:0] icmp_ln51_6_fu_347_p2;
wire   [5:0] select_ln52_24_fu_509_p3;
wire   [18:0] trunc_ln44_1_fu_155_p4;
wire   [2:0] tmp_43_fu_557_p4;
wire   [0:0] tmp_82_fu_581_p3;
wire   [0:0] icmp_ln52_16_fu_567_p2;
wire   [0:0] or_ln52_25_fu_589_p2;
wire   [0:0] tmp_80_fu_549_p3;
wire   [0:0] and_ln52_11_fu_595_p2;
wire   [5:0] trunc_ln52_1_fu_539_p4;
wire   [5:0] zext_ln52_7_fu_601_p1;
wire   [8:0] tmp_44_fu_611_p4;
wire   [5:0] add_ln52_7_fu_605_p2;
wire   [0:0] tmp_81_fu_573_p3;
wire   [0:0] tmp_83_fu_627_p3;
wire   [0:0] not_tmp_106_fu_635_p2;
wire   [0:0] icmp_ln52_17_fu_621_p2;
wire   [0:0] and_ln52_28_fu_641_p2;
wire   [0:0] empty_55_fu_647_p2;
wire   [0:0] tmp_79_fu_531_p3;
wire   [0:0] xor_ln52_7_fu_659_p2;
wire   [0:0] or_ln52_26_fu_653_p2;
wire   [5:0] select_ln52_25_fu_671_p3;
wire   [0:0] or_ln52_27_fu_665_p2;
wire   [5:0] select_ln52_26_fu_679_p3;
wire   [0:0] icmp_ln51_7_fu_525_p2;
wire   [5:0] select_ln52_27_fu_687_p3;
wire   [18:0] trunc_ln44_2_fu_165_p4;
wire   [2:0] tmp_45_fu_735_p4;
wire   [0:0] tmp_87_fu_759_p3;
wire   [0:0] icmp_ln52_18_fu_745_p2;
wire   [0:0] or_ln52_28_fu_767_p2;
wire   [0:0] tmp_85_fu_727_p3;
wire   [0:0] and_ln52_12_fu_773_p2;
wire   [5:0] trunc_ln52_2_fu_717_p4;
wire   [5:0] zext_ln52_8_fu_779_p1;
wire   [8:0] tmp_46_fu_789_p4;
wire   [5:0] add_ln52_8_fu_783_p2;
wire   [0:0] tmp_86_fu_751_p3;
wire   [0:0] tmp_88_fu_805_p3;
wire   [0:0] not_tmp_113_fu_813_p2;
wire   [0:0] icmp_ln52_19_fu_799_p2;
wire   [0:0] and_ln52_30_fu_819_p2;
wire   [0:0] empty_56_fu_825_p2;
wire   [0:0] tmp_84_fu_709_p3;
wire   [0:0] xor_ln52_8_fu_837_p2;
wire   [0:0] or_ln52_29_fu_831_p2;
wire   [5:0] select_ln52_28_fu_849_p3;
wire   [0:0] or_ln52_30_fu_843_p2;
wire   [5:0] select_ln52_29_fu_857_p3;
wire   [0:0] icmp_ln51_8_fu_703_p2;
wire   [5:0] select_ln52_30_fu_865_p3;
wire   [5:0] out_data_8_fu_873_p3;
wire   [5:0] out_data_7_fu_695_p3;
wire   [5:0] out_data_6_fu_517_p3;
wire   [5:0] out_data_fu_339_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
#0 i1_fu_116 = 8'd0;
end

myproject_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        i1_fu_116 <= i_fu_894_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_900_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i1_load = 8'd0;
    end else begin
        ap_sig_allocacmp_i1_load = i1_fu_116;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer6_out_blk_n = layer6_out_empty_n;
    end else begin
        layer6_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        layer6_out_read = 1'b1;
    end else begin
        layer6_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer8_out_blk_n = layer8_out_full_n;
    end else begin
        layer8_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        layer8_out_write = 1'b1;
    end else begin
        layer8_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_6_fu_427_p2 = (trunc_ln52_s_fu_361_p4 + zext_ln52_6_fu_423_p1);

assign add_ln52_7_fu_605_p2 = (trunc_ln52_1_fu_539_p4 + zext_ln52_7_fu_601_p1);

assign add_ln52_8_fu_783_p2 = (trunc_ln52_2_fu_717_p4 + zext_ln52_8_fu_779_p1);

assign add_ln52_fu_249_p2 = (trunc_ln3_fu_189_p4 + zext_ln52_fu_245_p1);

assign and_ln52_10_fu_417_p2 = (tmp_75_fu_371_p3 & or_ln52_22_fu_411_p2);

assign and_ln52_11_fu_595_p2 = (tmp_80_fu_549_p3 & or_ln52_25_fu_589_p2);

assign and_ln52_12_fu_773_p2 = (tmp_85_fu_727_p3 & or_ln52_28_fu_767_p2);

assign and_ln52_24_fu_285_p2 = (tmp_72_fu_271_p3 | not_tmp_92_fu_279_p2);

assign and_ln52_26_fu_463_p2 = (tmp_78_fu_449_p3 | not_tmp_99_fu_457_p2);

assign and_ln52_28_fu_641_p2 = (tmp_83_fu_627_p3 | not_tmp_106_fu_635_p2);

assign and_ln52_30_fu_819_p2 = (tmp_88_fu_805_p3 | not_tmp_113_fu_813_p2);

assign and_ln52_fu_239_p2 = (tmp_68_fu_199_p3 & or_ln52_fu_233_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | (layer8_out_full_n == 1'b0) | (layer6_out_empty_n == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign empty_54_fu_469_p2 = (icmp_ln52_15_fu_443_p2 & and_ln52_26_fu_463_p2);

assign empty_55_fu_647_p2 = (icmp_ln52_17_fu_621_p2 & and_ln52_28_fu_641_p2);

assign empty_56_fu_825_p2 = (icmp_ln52_19_fu_799_p2 & and_ln52_30_fu_819_p2);

assign empty_fu_291_p2 = (icmp_ln52_13_fu_265_p2 & and_ln52_24_fu_285_p2);

assign i_fu_894_p2 = (ap_sig_allocacmp_i1_load + 8'd1);

assign icmp_ln41_fu_900_p2 = ((ap_sig_allocacmp_i1_load == 8'd168) ? 1'b1 : 1'b0);

assign icmp_ln51_6_fu_347_p2 = (($signed(trunc_ln44_s_fu_145_p4) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_7_fu_525_p2 = (($signed(trunc_ln44_1_fu_155_p4) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_8_fu_703_p2 = (($signed(trunc_ln44_2_fu_165_p4) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_175_p2 = (($signed(trunc_ln44_fu_141_p1) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln52_13_fu_265_p2 = ((tmp_s_fu_255_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_14_fu_389_p2 = ((tmp_41_fu_379_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_15_fu_443_p2 = ((tmp_42_fu_433_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_16_fu_567_p2 = ((tmp_43_fu_557_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_17_fu_621_p2 = ((tmp_44_fu_611_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_18_fu_745_p2 = ((tmp_45_fu_735_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_19_fu_799_p2 = ((tmp_46_fu_789_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_211_p2 = ((trunc_ln52_fu_207_p1 != 3'd0) ? 1'b1 : 1'b0);

assign layer8_out_din = {{{{out_data_8_fu_873_p3}, {out_data_7_fu_695_p3}}, {out_data_6_fu_517_p3}}, {out_data_fu_339_p3}};

assign not_tmp_106_fu_635_p2 = (tmp_81_fu_573_p3 ^ 1'd1);

assign not_tmp_113_fu_813_p2 = (tmp_86_fu_751_p3 ^ 1'd1);

assign not_tmp_92_fu_279_p2 = (tmp_69_fu_217_p3 ^ 1'd1);

assign not_tmp_99_fu_457_p2 = (tmp_76_fu_395_p3 ^ 1'd1);

assign or_ln52_20_fu_297_p2 = (tmp_fu_181_p3 | empty_fu_291_p2);

assign or_ln52_21_fu_309_p2 = (xor_ln52_fu_303_p2 | tmp_fu_181_p3);

assign or_ln52_22_fu_411_p2 = (tmp_77_fu_403_p3 | icmp_ln52_14_fu_389_p2);

assign or_ln52_23_fu_475_p2 = (tmp_73_fu_353_p3 | empty_54_fu_469_p2);

assign or_ln52_24_fu_487_p2 = (xor_ln52_6_fu_481_p2 | tmp_73_fu_353_p3);

assign or_ln52_25_fu_589_p2 = (tmp_82_fu_581_p3 | icmp_ln52_16_fu_567_p2);

assign or_ln52_26_fu_653_p2 = (tmp_79_fu_531_p3 | empty_55_fu_647_p2);

assign or_ln52_27_fu_665_p2 = (xor_ln52_7_fu_659_p2 | tmp_79_fu_531_p3);

assign or_ln52_28_fu_767_p2 = (tmp_87_fu_759_p3 | icmp_ln52_18_fu_745_p2);

assign or_ln52_29_fu_831_p2 = (tmp_84_fu_709_p3 | empty_56_fu_825_p2);

assign or_ln52_30_fu_843_p2 = (xor_ln52_8_fu_837_p2 | tmp_84_fu_709_p3);

assign or_ln52_fu_233_p2 = (tmp_70_fu_225_p3 | icmp_ln52_fu_211_p2);

assign out_data_6_fu_517_p3 = ((icmp_ln51_6_fu_347_p2[0:0] == 1'b1) ? select_ln52_24_fu_509_p3 : 6'd0);

assign out_data_7_fu_695_p3 = ((icmp_ln51_7_fu_525_p2[0:0] == 1'b1) ? select_ln52_27_fu_687_p3 : 6'd0);

assign out_data_8_fu_873_p3 = ((icmp_ln51_8_fu_703_p2[0:0] == 1'b1) ? select_ln52_30_fu_865_p3 : 6'd0);

assign out_data_fu_339_p3 = ((icmp_ln51_fu_175_p2[0:0] == 1'b1) ? select_ln52_21_fu_331_p3 : 6'd0);

assign select_ln52_20_fu_323_p3 = ((or_ln52_20_fu_297_p2[0:0] == 1'b1) ? select_ln52_fu_315_p3 : 6'd63);

assign select_ln52_21_fu_331_p3 = ((or_ln52_21_fu_309_p2[0:0] == 1'b1) ? select_ln52_20_fu_323_p3 : add_ln52_fu_249_p2);

assign select_ln52_22_fu_493_p3 = ((tmp_73_fu_353_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_6_fu_427_p2);

assign select_ln52_23_fu_501_p3 = ((or_ln52_23_fu_475_p2[0:0] == 1'b1) ? select_ln52_22_fu_493_p3 : 6'd63);

assign select_ln52_24_fu_509_p3 = ((or_ln52_24_fu_487_p2[0:0] == 1'b1) ? select_ln52_23_fu_501_p3 : add_ln52_6_fu_427_p2);

assign select_ln52_25_fu_671_p3 = ((tmp_79_fu_531_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_7_fu_605_p2);

assign select_ln52_26_fu_679_p3 = ((or_ln52_26_fu_653_p2[0:0] == 1'b1) ? select_ln52_25_fu_671_p3 : 6'd63);

assign select_ln52_27_fu_687_p3 = ((or_ln52_27_fu_665_p2[0:0] == 1'b1) ? select_ln52_26_fu_679_p3 : add_ln52_7_fu_605_p2);

assign select_ln52_28_fu_849_p3 = ((tmp_84_fu_709_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_8_fu_783_p2);

assign select_ln52_29_fu_857_p3 = ((or_ln52_29_fu_831_p2[0:0] == 1'b1) ? select_ln52_28_fu_849_p3 : 6'd63);

assign select_ln52_30_fu_865_p3 = ((or_ln52_30_fu_843_p2[0:0] == 1'b1) ? select_ln52_29_fu_857_p3 : add_ln52_8_fu_783_p2);

assign select_ln52_fu_315_p3 = ((tmp_fu_181_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_fu_249_p2);

assign start_out = real_start;

assign tmp_41_fu_379_p4 = {{layer6_out_dout[21:19]}};

assign tmp_42_fu_433_p4 = {{layer6_out_dout[37:29]}};

assign tmp_43_fu_557_p4 = {{layer6_out_dout[40:38]}};

assign tmp_44_fu_611_p4 = {{layer6_out_dout[56:48]}};

assign tmp_45_fu_735_p4 = {{layer6_out_dout[59:57]}};

assign tmp_46_fu_789_p4 = {{layer6_out_dout[75:67]}};

assign tmp_68_fu_199_p3 = layer6_out_dout[32'd3];

assign tmp_69_fu_217_p3 = layer6_out_dout[32'd9];

assign tmp_70_fu_225_p3 = layer6_out_dout[32'd4];

assign tmp_72_fu_271_p3 = add_ln52_fu_249_p2[32'd5];

assign tmp_73_fu_353_p3 = layer6_out_dout[32'd37];

assign tmp_75_fu_371_p3 = layer6_out_dout[32'd22];

assign tmp_76_fu_395_p3 = layer6_out_dout[32'd28];

assign tmp_77_fu_403_p3 = layer6_out_dout[32'd23];

assign tmp_78_fu_449_p3 = add_ln52_6_fu_427_p2[32'd5];

assign tmp_79_fu_531_p3 = layer6_out_dout[32'd56];

assign tmp_80_fu_549_p3 = layer6_out_dout[32'd41];

assign tmp_81_fu_573_p3 = layer6_out_dout[32'd47];

assign tmp_82_fu_581_p3 = layer6_out_dout[32'd42];

assign tmp_83_fu_627_p3 = add_ln52_7_fu_605_p2[32'd5];

assign tmp_84_fu_709_p3 = layer6_out_dout[32'd75];

assign tmp_85_fu_727_p3 = layer6_out_dout[32'd60];

assign tmp_86_fu_751_p3 = layer6_out_dout[32'd66];

assign tmp_87_fu_759_p3 = layer6_out_dout[32'd61];

assign tmp_88_fu_805_p3 = add_ln52_8_fu_783_p2[32'd5];

assign tmp_fu_181_p3 = layer6_out_dout[32'd18];

assign tmp_s_fu_255_p4 = {{layer6_out_dout[18:10]}};

assign trunc_ln3_fu_189_p4 = {{layer6_out_dout[9:4]}};

assign trunc_ln44_1_fu_155_p4 = {{layer6_out_dout[56:38]}};

assign trunc_ln44_2_fu_165_p4 = {{layer6_out_dout[75:57]}};

assign trunc_ln44_fu_141_p1 = layer6_out_dout[18:0];

assign trunc_ln44_s_fu_145_p4 = {{layer6_out_dout[37:19]}};

assign trunc_ln52_1_fu_539_p4 = {{layer6_out_dout[47:42]}};

assign trunc_ln52_2_fu_717_p4 = {{layer6_out_dout[66:61]}};

assign trunc_ln52_fu_207_p1 = layer6_out_dout[2:0];

assign trunc_ln52_s_fu_361_p4 = {{layer6_out_dout[28:23]}};

assign xor_ln52_6_fu_481_p2 = (empty_54_fu_469_p2 ^ 1'd1);

assign xor_ln52_7_fu_659_p2 = (empty_55_fu_647_p2 ^ 1'd1);

assign xor_ln52_8_fu_837_p2 = (empty_56_fu_825_p2 ^ 1'd1);

assign xor_ln52_fu_303_p2 = (empty_fu_291_p2 ^ 1'd1);

assign zext_ln52_6_fu_423_p1 = and_ln52_10_fu_417_p2;

assign zext_ln52_7_fu_601_p1 = and_ln52_11_fu_595_p2;

assign zext_ln52_8_fu_779_p1 = and_ln52_12_fu_773_p2;

assign zext_ln52_fu_245_p1 = and_ln52_fu_239_p2;

endmodule //myproject_relu_array_ap_fixed_4u_array_ap_ufixed_6_0_4_0_0_4u_relu_config8_s
