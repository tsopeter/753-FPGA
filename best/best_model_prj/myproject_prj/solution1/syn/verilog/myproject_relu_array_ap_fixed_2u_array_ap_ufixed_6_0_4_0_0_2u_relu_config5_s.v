// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_2u_array_ap_ufixed_6_0_4_0_0_2u_relu_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer3_out_dout,
        layer3_out_empty_n,
        layer3_out_read,
        layer3_out_num_data_valid,
        layer3_out_fifo_cap,
        layer5_out_din,
        layer5_out_full_n,
        layer5_out_write,
        layer5_out_num_data_valid,
        layer5_out_fifo_cap,
        start_out,
        start_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [39:0] layer3_out_dout;
input   layer3_out_empty_n;
output   layer3_out_read;
input  [10:0] layer3_out_num_data_valid;
input  [10:0] layer3_out_fifo_cap;
output  [11:0] layer5_out_din;
input   layer5_out_full_n;
output   layer5_out_write;
input  [10:0] layer5_out_num_data_valid;
input  [10:0] layer5_out_fifo_cap;
output   start_out;
output   start_write;

reg ap_idle;
reg layer3_out_read;
reg layer5_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln41_fu_490_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    layer3_out_blk_n;
reg    layer5_out_blk_n;
reg   [9:0] i1_fu_86;
wire   [9:0] i_fu_484_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_i1_load;
wire   [19:0] trunc_ln44_fu_111_p1;
wire   [3:0] trunc_ln52_fu_157_p1;
wire   [0:0] tmp_91_fu_175_p3;
wire   [0:0] icmp_ln52_fu_161_p2;
wire   [0:0] or_ln52_fu_183_p2;
wire   [0:0] tmp_89_fu_149_p3;
wire   [0:0] and_ln52_fu_189_p2;
wire   [5:0] trunc_ln4_fu_139_p4;
wire   [5:0] zext_ln52_fu_195_p1;
wire   [8:0] tmp_6_fu_205_p4;
wire   [5:0] add_ln52_fu_199_p2;
wire   [0:0] tmp_90_fu_167_p3;
wire   [0:0] tmp_92_fu_221_p3;
wire   [0:0] not_tmp_4_fu_229_p2;
wire   [0:0] icmp_ln52_1_fu_215_p2;
wire   [0:0] and_ln52_1_fu_235_p2;
wire   [0:0] empty_fu_241_p2;
wire   [0:0] tmp_fu_131_p3;
wire   [0:0] xor_ln52_fu_253_p2;
wire   [0:0] or_ln52_1_fu_247_p2;
wire   [5:0] select_ln52_fu_265_p3;
wire   [0:0] or_ln52_2_fu_259_p2;
wire   [5:0] select_ln52_1_fu_273_p3;
wire   [0:0] icmp_ln51_fu_125_p2;
wire   [5:0] select_ln52_2_fu_281_p3;
wire   [19:0] trunc_ln44_1_fu_115_p4;
wire   [3:0] tmp_s_fu_329_p4;
wire   [0:0] tmp_96_fu_353_p3;
wire   [0:0] icmp_ln52_2_fu_339_p2;
wire   [0:0] or_ln52_3_fu_361_p2;
wire   [0:0] tmp_94_fu_321_p3;
wire   [0:0] and_ln52_2_fu_367_p2;
wire   [5:0] trunc_ln52_1_fu_311_p4;
wire   [5:0] zext_ln52_1_fu_373_p1;
wire   [8:0] tmp_12_fu_383_p4;
wire   [5:0] add_ln52_1_fu_377_p2;
wire   [0:0] tmp_95_fu_345_p3;
wire   [0:0] tmp_97_fu_399_p3;
wire   [0:0] not_tmp_10_fu_407_p2;
wire   [0:0] icmp_ln52_3_fu_393_p2;
wire   [0:0] and_ln52_3_fu_413_p2;
wire   [0:0] empty_57_fu_419_p2;
wire   [0:0] tmp_93_fu_303_p3;
wire   [0:0] xor_ln52_1_fu_431_p2;
wire   [0:0] or_ln52_4_fu_425_p2;
wire   [5:0] select_ln52_3_fu_443_p3;
wire   [0:0] or_ln52_5_fu_437_p2;
wire   [5:0] select_ln52_4_fu_451_p3;
wire   [0:0] icmp_ln51_1_fu_297_p2;
wire   [5:0] select_ln52_5_fu_459_p3;
wire   [5:0] out_data_1_fu_467_p3;
wire   [5:0] out_data_fu_289_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
#0 i1_fu_86 = 10'd0;
end

myproject_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        i1_fu_86 <= i_fu_484_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_490_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i1_load = 10'd0;
    end else begin
        ap_sig_allocacmp_i1_load = i1_fu_86;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer3_out_blk_n = layer3_out_empty_n;
    end else begin
        layer3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        layer3_out_read = 1'b1;
    end else begin
        layer3_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer5_out_blk_n = layer5_out_full_n;
    end else begin
        layer5_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        layer5_out_write = 1'b1;
    end else begin
        layer5_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_1_fu_377_p2 = (trunc_ln52_1_fu_311_p4 + zext_ln52_1_fu_373_p1);

assign add_ln52_fu_199_p2 = (trunc_ln4_fu_139_p4 + zext_ln52_fu_195_p1);

assign and_ln52_1_fu_235_p2 = (tmp_92_fu_221_p3 | not_tmp_4_fu_229_p2);

assign and_ln52_2_fu_367_p2 = (tmp_94_fu_321_p3 & or_ln52_3_fu_361_p2);

assign and_ln52_3_fu_413_p2 = (tmp_97_fu_399_p3 | not_tmp_10_fu_407_p2);

assign and_ln52_fu_189_p2 = (tmp_89_fu_149_p3 & or_ln52_fu_183_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (layer5_out_full_n == 1'b0) | (ap_start_int == 1'b0) | (layer3_out_empty_n == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign empty_57_fu_419_p2 = (icmp_ln52_3_fu_393_p2 & and_ln52_3_fu_413_p2);

assign empty_fu_241_p2 = (icmp_ln52_1_fu_215_p2 & and_ln52_1_fu_235_p2);

assign i_fu_484_p2 = (ap_sig_allocacmp_i1_load + 10'd1);

assign icmp_ln41_fu_490_p2 = ((ap_sig_allocacmp_i1_load == 10'd899) ? 1'b1 : 1'b0);

assign icmp_ln51_1_fu_297_p2 = (($signed(trunc_ln44_1_fu_115_p4) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_125_p2 = (($signed(trunc_ln44_fu_111_p1) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_215_p2 = ((tmp_6_fu_205_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_2_fu_339_p2 = ((tmp_s_fu_329_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_3_fu_393_p2 = ((tmp_12_fu_383_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_161_p2 = ((trunc_ln52_fu_157_p1 != 4'd0) ? 1'b1 : 1'b0);

assign layer5_out_din = {{out_data_1_fu_467_p3}, {out_data_fu_289_p3}};

assign not_tmp_10_fu_407_p2 = (tmp_95_fu_345_p3 ^ 1'd1);

assign not_tmp_4_fu_229_p2 = (tmp_90_fu_167_p3 ^ 1'd1);

assign or_ln52_1_fu_247_p2 = (tmp_fu_131_p3 | empty_fu_241_p2);

assign or_ln52_2_fu_259_p2 = (xor_ln52_fu_253_p2 | tmp_fu_131_p3);

assign or_ln52_3_fu_361_p2 = (tmp_96_fu_353_p3 | icmp_ln52_2_fu_339_p2);

assign or_ln52_4_fu_425_p2 = (tmp_93_fu_303_p3 | empty_57_fu_419_p2);

assign or_ln52_5_fu_437_p2 = (xor_ln52_1_fu_431_p2 | tmp_93_fu_303_p3);

assign or_ln52_fu_183_p2 = (tmp_91_fu_175_p3 | icmp_ln52_fu_161_p2);

assign out_data_1_fu_467_p3 = ((icmp_ln51_1_fu_297_p2[0:0] == 1'b1) ? select_ln52_5_fu_459_p3 : 6'd0);

assign out_data_fu_289_p3 = ((icmp_ln51_fu_125_p2[0:0] == 1'b1) ? select_ln52_2_fu_281_p3 : 6'd0);

assign select_ln52_1_fu_273_p3 = ((or_ln52_1_fu_247_p2[0:0] == 1'b1) ? select_ln52_fu_265_p3 : 6'd63);

assign select_ln52_2_fu_281_p3 = ((or_ln52_2_fu_259_p2[0:0] == 1'b1) ? select_ln52_1_fu_273_p3 : add_ln52_fu_199_p2);

assign select_ln52_3_fu_443_p3 = ((tmp_93_fu_303_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_1_fu_377_p2);

assign select_ln52_4_fu_451_p3 = ((or_ln52_4_fu_425_p2[0:0] == 1'b1) ? select_ln52_3_fu_443_p3 : 6'd63);

assign select_ln52_5_fu_459_p3 = ((or_ln52_5_fu_437_p2[0:0] == 1'b1) ? select_ln52_4_fu_451_p3 : add_ln52_1_fu_377_p2);

assign select_ln52_fu_265_p3 = ((tmp_fu_131_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_fu_199_p2);

assign start_out = real_start;

assign tmp_12_fu_383_p4 = {{layer3_out_dout[39:31]}};

assign tmp_6_fu_205_p4 = {{layer3_out_dout[19:11]}};

assign tmp_89_fu_149_p3 = layer3_out_dout[32'd4];

assign tmp_90_fu_167_p3 = layer3_out_dout[32'd10];

assign tmp_91_fu_175_p3 = layer3_out_dout[32'd5];

assign tmp_92_fu_221_p3 = add_ln52_fu_199_p2[32'd5];

assign tmp_93_fu_303_p3 = layer3_out_dout[32'd39];

assign tmp_94_fu_321_p3 = layer3_out_dout[32'd24];

assign tmp_95_fu_345_p3 = layer3_out_dout[32'd30];

assign tmp_96_fu_353_p3 = layer3_out_dout[32'd25];

assign tmp_97_fu_399_p3 = add_ln52_1_fu_377_p2[32'd5];

assign tmp_fu_131_p3 = layer3_out_dout[32'd19];

assign tmp_s_fu_329_p4 = {{layer3_out_dout[23:20]}};

assign trunc_ln44_1_fu_115_p4 = {{layer3_out_dout[39:20]}};

assign trunc_ln44_fu_111_p1 = layer3_out_dout[19:0];

assign trunc_ln4_fu_139_p4 = {{layer3_out_dout[10:5]}};

assign trunc_ln52_1_fu_311_p4 = {{layer3_out_dout[30:25]}};

assign trunc_ln52_fu_157_p1 = layer3_out_dout[3:0];

assign xor_ln52_1_fu_431_p2 = (empty_57_fu_419_p2 ^ 1'd1);

assign xor_ln52_fu_253_p2 = (empty_fu_241_p2 ^ 1'd1);

assign zext_ln52_1_fu_373_p1 = and_ln52_2_fu_367_p2;

assign zext_ln52_fu_195_p1 = and_ln52_fu_189_p2;

endmodule //myproject_relu_array_ap_fixed_2u_array_ap_ufixed_6_0_4_0_0_2u_relu_config5_s
