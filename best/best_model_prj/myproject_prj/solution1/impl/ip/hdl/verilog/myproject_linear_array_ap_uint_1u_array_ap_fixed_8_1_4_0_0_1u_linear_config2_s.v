// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_linear_array_ap_uint_1u_array_ap_fixed_8_1_4_0_0_1u_linear_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_1_TVALID,
        layer2_out_din,
        layer2_out_full_n,
        layer2_out_write,
        layer2_out_num_data_valid,
        layer2_out_fifo_cap,
        start_out,
        start_write,
        input_1_TDATA,
        input_1_TREADY
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   input_1_TVALID;
output  [7:0] layer2_out_din;
input   layer2_out_full_n;
output   layer2_out_write;
input  [12:0] layer2_out_num_data_valid;
input  [12:0] layer2_out_fifo_cap;
output   start_out;
output   start_write;
input  [7:0] input_1_TDATA;
output   input_1_TREADY;

reg ap_idle;
reg layer2_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln19_fu_118_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    input_1_TDATA_blk_n;
reg    layer2_out_blk_n;
reg   [11:0] i1_fu_48;
wire   [11:0] i_fu_112_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_i1_load;
wire   [6:0] tmp_s_fu_83_p3;
wire   [0:0] trunc_ln29_fu_73_p1;
wire   [0:0] icmp_ln29_fu_91_p2;
wire   [0:0] or_ln29_fu_97_p2;
wire   [7:0] shl_ln29_fu_77_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_done_sig;
wire    regslice_both_input_1_U_apdone_blk;
wire   [7:0] input_1_TDATA_int_regslice;
wire    input_1_TVALID_int_regslice;
reg    input_1_TREADY_int_regslice;
wire    regslice_both_input_1_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
#0 i1_fu_48 = 12'd0;
end

myproject_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

myproject_regslice_both #(
    .DataWidth( 8 ))
regslice_both_input_1_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_1_TDATA),
    .vld_in(input_1_TVALID),
    .ack_in(regslice_both_input_1_U_ack_in),
    .data_out(input_1_TDATA_int_regslice),
    .vld_out(input_1_TVALID_int_regslice),
    .ack_out(input_1_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_1_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        i1_fu_48 <= i_fu_112_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_118_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i1_load = 12'd0;
    end else begin
        ap_sig_allocacmp_i1_load = i1_fu_48;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_1_TDATA_blk_n = input_1_TVALID_int_regslice;
    end else begin
        input_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        input_1_TREADY_int_regslice = 1'b1;
    end else begin
        input_1_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer2_out_blk_n = layer2_out_full_n;
    end else begin
        layer2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        layer2_out_write = 1'b1;
    end else begin
        layer2_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (layer2_out_full_n == 1'b0) | (input_1_TVALID_int_regslice == 1'b0) | (ap_start_int == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign i_fu_112_p2 = (ap_sig_allocacmp_i1_load + 12'd1);

assign icmp_ln19_fu_118_p2 = ((ap_sig_allocacmp_i1_load == 12'd4095) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_91_p2 = ((tmp_s_fu_83_p3 != 7'd0) ? 1'b1 : 1'b0);

assign input_1_TREADY = regslice_both_input_1_U_ack_in;

assign layer2_out_din = ((or_ln29_fu_97_p2[0:0] == 1'b1) ? 8'd127 : shl_ln29_fu_77_p2);

assign or_ln29_fu_97_p2 = (trunc_ln29_fu_73_p1 | icmp_ln29_fu_91_p2);

assign shl_ln29_fu_77_p2 = input_1_TDATA_int_regslice << 8'd7;

assign start_out = real_start;

assign tmp_s_fu_83_p3 = {{input_1_TDATA_int_regslice[7:1]}};

assign trunc_ln29_fu_73_p1 = input_1_TDATA_int_regslice[0:0];

endmodule //myproject_linear_array_ap_uint_1u_array_ap_fixed_8_1_4_0_0_1u_linear_config2_s
