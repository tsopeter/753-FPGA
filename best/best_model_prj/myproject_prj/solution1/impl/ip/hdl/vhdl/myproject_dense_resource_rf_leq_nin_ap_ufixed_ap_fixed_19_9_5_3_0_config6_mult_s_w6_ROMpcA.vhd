-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config6_mult_s_w6_ROMpcA is 
    generic(
             DataWidth     : integer := 22; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 50
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config6_mult_s_w6_ROMpcA is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0101111110111010000000", 1 => "0001000110000000111101", 2 => "0110000001000100111011", 3 => "0101000100000100111101", 
    4 => "1101000010111110000100", 5 => "1111000010111110111011", 6 => "0000111100000000111011", 7 => "0100000000000100000100", 
    8 => "1110111100000100111101", 9 => "1111000111111111000100", 10 => "0000000100000001000100", 11 => "1101111101000001111011", 
    12 => "1110111111000000000000", 13 => "0001000001000010111011", 14 => "0000000011111100111011", 15 => "0001111101000010111111", 
    16 => "0010000110111101111010", 17 => "0011000010000100111110", 18 => "0001111100111011000010", 19 => "1001111101111010000001", 
    20 => "1101000101000001111011", 21 => "0010111011111111000000", 22 => "0011000000111111000010", 23 => "1111000011111100111110", 
    24 => "0100111011000010000000", 25 => "1011111101000011111110", 26 => "1110111111000000111111", 27 => "0001111101111101111101", 
    28 => "1101111001000001000001", 29 => "0000111111111010000000", 30 => "1111111001000101000001", 31 => "1101111110000010000001", 
    32 => "0010000110111101111101", 33 => "0110111111111010111100", 34 => "0001111011000001000000", 35 => "0000111101000000000010", 
    36 => "0110000001000010111101", 37 => "0000111110000011111011", 38 => "1101111110111100111101", 39 => "1101111100111110111001", 
    40 => "1100000001000001111111", 41 => "0011111110000011000100", 42 => "1111000001111111111101", 43 => "1101111110111110111011", 
    44 => "0011111100111110111001", 45 => "0011111101111101000011", 46 => "1110111011111110000011", 47 => "0100000101111111000111", 
    48 => "1111111111000011000000", 49 => "0001111110000001000001");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

