-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_2u_array_ap_ufixed_6_0_4_0_0_2u_relu_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer3_out_dout : IN STD_LOGIC_VECTOR (39 downto 0);
    layer3_out_empty_n : IN STD_LOGIC;
    layer3_out_read : OUT STD_LOGIC;
    layer3_out_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    layer3_out_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    layer5_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    layer5_out_full_n : IN STD_LOGIC;
    layer5_out_write : OUT STD_LOGIC;
    layer5_out_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    layer5_out_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_2u_array_ap_ufixed_6_0_4_0_0_2u_relu_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_383 : STD_LOGIC_VECTOR (9 downto 0) := "1110000011";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln41_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer3_out_blk_n : STD_LOGIC;
    signal layer5_out_blk_n : STD_LOGIC;
    signal i1_fu_86 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal i_fu_484_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i1_load : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln44_fu_111_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln52_fu_157_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_91_fu_175_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_fu_149_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln4_fu_139_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_fu_195_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_205_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln52_fu_199_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_90_fu_167_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_92_fu_221_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_4_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_1_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_1_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_131_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_1_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_265_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_2_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_1_fu_273_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln51_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_2_fu_281_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln44_1_fu_115_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_s_fu_329_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_96_fu_353_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_2_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_3_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_fu_321_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_2_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_1_fu_311_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_1_fu_373_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_fu_383_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln52_1_fu_377_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_95_fu_345_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_fu_399_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_10_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_3_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_3_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_57_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_fu_303_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_1_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_4_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_3_fu_443_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_5_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_4_fu_451_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln51_1_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_5_fu_459_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_1_fu_467_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_fu_289_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component myproject_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                i1_fu_86 <= i_fu_484_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln52_1_fu_377_p2 <= std_logic_vector(unsigned(trunc_ln52_1_fu_311_p4) + unsigned(zext_ln52_1_fu_373_p1));
    add_ln52_fu_199_p2 <= std_logic_vector(unsigned(trunc_ln4_fu_139_p4) + unsigned(zext_ln52_fu_195_p1));
    and_ln52_1_fu_235_p2 <= (tmp_92_fu_221_p3 or not_tmp_4_fu_229_p2);
    and_ln52_2_fu_367_p2 <= (tmp_94_fu_321_p3 and or_ln52_3_fu_361_p2);
    and_ln52_3_fu_413_p2 <= (tmp_97_fu_399_p3 or not_tmp_10_fu_407_p2);
    and_ln52_fu_189_p2 <= (tmp_89_fu_149_p3 and or_ln52_fu_183_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(layer3_out_empty_n, layer5_out_full_n, ap_done_reg, ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or (layer5_out_full_n = ap_const_logic_0) or (ap_start_int = ap_const_logic_0) or (layer3_out_empty_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln41_fu_490_p2)
    begin
        if (((icmp_ln41_fu_490_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i1_load_assign_proc : process(ap_CS_fsm_state1, i1_fu_86, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i1_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_i1_load <= i1_fu_86;
        end if; 
    end process;

    empty_57_fu_419_p2 <= (icmp_ln52_3_fu_393_p2 and and_ln52_3_fu_413_p2);
    empty_fu_241_p2 <= (icmp_ln52_1_fu_215_p2 and and_ln52_1_fu_235_p2);
    i_fu_484_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i1_load) + unsigned(ap_const_lv10_1));
    icmp_ln41_fu_490_p2 <= "1" when (ap_sig_allocacmp_i1_load = ap_const_lv10_383) else "0";
    icmp_ln51_1_fu_297_p2 <= "1" when (signed(trunc_ln44_1_fu_115_p4) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_fu_125_p2 <= "1" when (signed(trunc_ln44_fu_111_p1) > signed(ap_const_lv20_0)) else "0";
    icmp_ln52_1_fu_215_p2 <= "1" when (tmp_6_fu_205_p4 = ap_const_lv9_0) else "0";
    icmp_ln52_2_fu_339_p2 <= "0" when (tmp_s_fu_329_p4 = ap_const_lv4_0) else "1";
    icmp_ln52_3_fu_393_p2 <= "1" when (tmp_12_fu_383_p4 = ap_const_lv9_0) else "0";
    icmp_ln52_fu_161_p2 <= "0" when (trunc_ln52_fu_157_p1 = ap_const_lv4_0) else "1";

    layer3_out_blk_n_assign_proc : process(ap_CS_fsm_state1, layer3_out_empty_n, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer3_out_blk_n <= layer3_out_empty_n;
        else 
            layer3_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer3_out_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer3_out_read <= ap_const_logic_1;
        else 
            layer3_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer5_out_blk_n_assign_proc : process(ap_CS_fsm_state1, layer5_out_full_n, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer5_out_blk_n <= layer5_out_full_n;
        else 
            layer5_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer5_out_din <= (out_data_1_fu_467_p3 & out_data_fu_289_p3);

    layer5_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer5_out_write <= ap_const_logic_1;
        else 
            layer5_out_write <= ap_const_logic_0;
        end if; 
    end process;

    not_tmp_10_fu_407_p2 <= (tmp_95_fu_345_p3 xor ap_const_lv1_1);
    not_tmp_4_fu_229_p2 <= (tmp_90_fu_167_p3 xor ap_const_lv1_1);
    or_ln52_1_fu_247_p2 <= (tmp_fu_131_p3 or empty_fu_241_p2);
    or_ln52_2_fu_259_p2 <= (xor_ln52_fu_253_p2 or tmp_fu_131_p3);
    or_ln52_3_fu_361_p2 <= (tmp_96_fu_353_p3 or icmp_ln52_2_fu_339_p2);
    or_ln52_4_fu_425_p2 <= (tmp_93_fu_303_p3 or empty_57_fu_419_p2);
    or_ln52_5_fu_437_p2 <= (xor_ln52_1_fu_431_p2 or tmp_93_fu_303_p3);
    or_ln52_fu_183_p2 <= (tmp_91_fu_175_p3 or icmp_ln52_fu_161_p2);
    out_data_1_fu_467_p3 <= 
        select_ln52_5_fu_459_p3 when (icmp_ln51_1_fu_297_p2(0) = '1') else 
        ap_const_lv6_0;
    out_data_fu_289_p3 <= 
        select_ln52_2_fu_281_p3 when (icmp_ln51_fu_125_p2(0) = '1') else 
        ap_const_lv6_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln52_1_fu_273_p3 <= 
        select_ln52_fu_265_p3 when (or_ln52_1_fu_247_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_2_fu_281_p3 <= 
        select_ln52_1_fu_273_p3 when (or_ln52_2_fu_259_p2(0) = '1') else 
        add_ln52_fu_199_p2;
    select_ln52_3_fu_443_p3 <= 
        ap_const_lv6_0 when (tmp_93_fu_303_p3(0) = '1') else 
        add_ln52_1_fu_377_p2;
    select_ln52_4_fu_451_p3 <= 
        select_ln52_3_fu_443_p3 when (or_ln52_4_fu_425_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_5_fu_459_p3 <= 
        select_ln52_4_fu_451_p3 when (or_ln52_5_fu_437_p2(0) = '1') else 
        add_ln52_1_fu_377_p2;
    select_ln52_fu_265_p3 <= 
        ap_const_lv6_0 when (tmp_fu_131_p3(0) = '1') else 
        add_ln52_fu_199_p2;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_12_fu_383_p4 <= layer3_out_dout(39 downto 31);
    tmp_6_fu_205_p4 <= layer3_out_dout(19 downto 11);
    tmp_89_fu_149_p3 <= layer3_out_dout(4 downto 4);
    tmp_90_fu_167_p3 <= layer3_out_dout(10 downto 10);
    tmp_91_fu_175_p3 <= layer3_out_dout(5 downto 5);
    tmp_92_fu_221_p3 <= add_ln52_fu_199_p2(5 downto 5);
    tmp_93_fu_303_p3 <= layer3_out_dout(39 downto 39);
    tmp_94_fu_321_p3 <= layer3_out_dout(24 downto 24);
    tmp_95_fu_345_p3 <= layer3_out_dout(30 downto 30);
    tmp_96_fu_353_p3 <= layer3_out_dout(25 downto 25);
    tmp_97_fu_399_p3 <= add_ln52_1_fu_377_p2(5 downto 5);
    tmp_fu_131_p3 <= layer3_out_dout(19 downto 19);
    tmp_s_fu_329_p4 <= layer3_out_dout(23 downto 20);
    trunc_ln44_1_fu_115_p4 <= layer3_out_dout(39 downto 20);
    trunc_ln44_fu_111_p1 <= layer3_out_dout(20 - 1 downto 0);
    trunc_ln4_fu_139_p4 <= layer3_out_dout(10 downto 5);
    trunc_ln52_1_fu_311_p4 <= layer3_out_dout(30 downto 25);
    trunc_ln52_fu_157_p1 <= layer3_out_dout(4 - 1 downto 0);
    xor_ln52_1_fu_431_p2 <= (empty_57_fu_419_p2 xor ap_const_lv1_1);
    xor_ln52_fu_253_p2 <= (empty_fu_241_p2 xor ap_const_lv1_1);
    zext_ln52_1_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_2_fu_367_p2),6));
    zext_ln52_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_fu_189_p2),6));
end behav;
