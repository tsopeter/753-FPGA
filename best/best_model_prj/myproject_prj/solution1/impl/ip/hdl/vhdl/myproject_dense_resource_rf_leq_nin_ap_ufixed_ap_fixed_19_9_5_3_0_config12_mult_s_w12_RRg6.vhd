-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config12_mult_s_w12_RRg6 is 
    generic(
             DataWidth     : integer := 34; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config12_mult_s_w12_RRg6 is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1111111110000000111100111111111101", 1 => "1100000001000000111111111110111110", 2 => "0000000000111111000000111010000010", 3 => "1101111011111101000011000001000010", 
    4 => "0010111001111111111100111111000000", 5 => "0101111110111110111100111110111101", 6 => "0011000001111110000001111010111110", 7 => "0000111110000000000100000000111011", 
    8 => "1100111001000001111110000010111011", 9 => "0101111100000000000010000000000011", 10 => "0010000010111001111011000010000000", 11 => "1011000001111100111110000101000011", 
    12 => "0101111111000000000101111100000100", 13 => "0100000010000000111110111111111100", 14 => "1101000101000001111001000000111011", 15 => "0110000011111111111101111100000100", 
    16 => "0100111001111100111111000000111010", 17 => "0001000011000110111111111100000101", 18 => "1101000101111110000010111011111110", 19 => "1111000000111100000001000001111110", 
    20 => "0001111101111101111101000011000000", 21 => "1101000100111011111101000000000000", 22 => "0000111111111011111011111110000011", 23 => "1100000100111101111011111011000000", 
    24 => "1101000000111110000101111111111001", 25 => "1101000100111101000000111100000011", 26 => "0000000000000000000100111100111111", 27 => "0000000101000000111111000001111111", 
    28 => "1100000000111111000010000011000110", 29 => "0111111110000000000010111001111111", 30 => "0001000001111100000001111101111010", 31 => "1110111101000100111110111111111101", 
    32 => "0000111101000000111111000110111101", 33 => "1110111101111101000000000000000001", 34 => "1101000101000010111111000110111011", 35 => "1101000000111111111110111011000010", 
    36 => "0000111011000000000001000001000000", 37 => "0010000111111010000001111101000001", 38 => "1001111101111101000011000101111101", 39 => "1101000001111101000100111011000011", 
    40 => "0110111101000010000001000110000001", 41 => "0101000011000110000100000000000101", 42 => "1101111001111111000010111011000100", 43 => "1101111110111110111100111101111110", 
    44 => "0010000000000100000000111101000111");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

