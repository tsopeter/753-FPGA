-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config14_mult_s_w14_R3i2 is 
    generic(
             DataWidth     : integer := 106; 
             AddressWidth     : integer := 5; 
             AddressRange    : integer := 18
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config14_mult_s_w14_R3i2 is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1100000100111110000100111111000010000000000001111011000001000100111101111101111111000010111100000000000010", 1 => "0100000001111100000010111111000001111011000101111110000000000000111110000100111011000100111111111111000100", 2 => "0010111110000011000010000001111010000011000000111110000000111111000000000000111110000101000000111011000010", 3 => "1111000010000010000100111111111110111111111100000101111111000000111110000001111101000000000010000100000100", 
    4 => "0011000000000011111111111101000000000001000000000001000010111111000100111101000001000010000110000101000101", 5 => "0001000000111100111011000010000010111100000011111100111111111011000001000100111011000010111111000000000100", 6 => "0011111011111010111110111111000010000100111110000010000011111111000010000011000101111111000010111010000011", 7 => "0000111110000010111111111101000101111100111110000011000010111011000000111101111101000100111101111110000000", 
    8 => "1111000000111111000010111010000010111101000000111110000100111101111110000101111111000011111100000000000000", 9 => "0010111110111110111110111100000000000000000011000000000001000000000010000101000001111110000000111111000010", 10 => "0010111110000000000000111111111010000001000010000010111101111011111010000011000000000011000001000110111100", 11 => "0010111100111111000101000110111101111100111111111110000011111111000010000010111011000001111111111101000000", 
    12 => "0000000000000001000001000100111111000001000011000010111001000001000100000000000010111101111100111100111010", 13 => "0011111101000001111100111110000000000100111111000001111110000000000000000010000000111111000000111110111110", 14 => "0000111101000011000010000111000001000010111010000101000010111100000100111111000101111110000011111101111011", 15 => "1011111111000100111111000001000100111110000001000011111101000001000101111110111110000101000100111110000011", 
    16 => "0010000001111011111110111111000110111111000110000000111110000001000111000010111110000101111100111111000100", 17 => "1111000110000100000001111100111110111100111101000000000110111110000001111001000001111010111011111111111101");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

