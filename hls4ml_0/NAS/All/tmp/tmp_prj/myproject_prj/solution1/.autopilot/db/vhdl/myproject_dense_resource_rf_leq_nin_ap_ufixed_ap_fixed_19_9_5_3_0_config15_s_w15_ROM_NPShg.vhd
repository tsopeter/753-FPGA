-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config15_s_w15_ROM_NPShg is 
    generic(
             DataWidth     : integer := 28; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 54
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config15_s_w15_ROM_NPShg is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0101000010000011111110111111", 1 => "0000000111000000000011111110", 2 => "0000000010000011111100111100", 3 => "0000111101000011000010111111", 
    4 => "1111000011000001111100000011", 5 => "1101000100000101000100000001", 6 => "0110000101000001000011111110", 7 => "0001000011000011000100000001", 
    8 => "1110111101000011000100111010", 9 => "0100111110111011000101111100", 10 => "1110000100000000000010000011", 11 => "0101000010111110000001000001", 
    12 => "0010000110111110111111000000", 13 => "1110111011000001000011000000", 14 => "0101000011000100000010111011", 15 => "1110111110111101000011000101", 
    16 => "1101000001000101111110111111", 17 => "1110111111000001000011000010", 18 => "0001111010111110111101111011", 19 => "1111000101111100000111000010", 
    20 => "0001111111111011111101000000", 21 => "0110000010111110000010111011", 22 => "1011111111000001000000000001", 23 => "1101111110000001111110111101", 
    24 => "1100000101111101111100111101", 25 => "0110000100000000111110000001", 26 => "0000111011111101000001111011", 27 => "1110111101111111111100000000", 
    28 => "0100111011111110000001000010", 29 => "1111000001000010000000000010", 30 => "0001000000111110000000000101", 31 => "1101000001111110111111000110", 
    32 => "0101111101000100000011000110", 33 => "1111111101000011000001111110", 34 => "1110000001000101000100111100", 35 => "0001000000111101000110000000", 
    36 => "1111000000111100111101000000", 37 => "1101000110000100000101111101", 38 => "0100000000000110111111000100", 39 => "0001111111111100000001111111", 
    40 => "1111000000000101000001111011", 41 => "1100000000000000000001000010", 42 => "1100111111000001000000000010", 43 => "0001111110111111000000111111", 
    44 => "1110000000000011000011000011", 45 => "1010111111000001111100000010", 46 => "0010000011111101111010000010", 47 => "0000000000000110111100111110", 
    48 => "1110000011111111000101111101", 49 => "1110000000111100111110111001", 50 => "1100111011000001000001000001", 51 => "1110000100000100000101000100", 
    52 => "0010000001000001000010111110", 53 => "0101111111000001000000000101");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

