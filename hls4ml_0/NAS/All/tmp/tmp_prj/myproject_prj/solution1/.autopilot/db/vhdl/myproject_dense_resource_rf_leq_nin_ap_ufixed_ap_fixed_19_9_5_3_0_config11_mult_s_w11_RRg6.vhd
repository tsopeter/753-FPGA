-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config11_mult_s_w11_RRg6 is 
    generic(
             DataWidth     : integer := 34; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config11_mult_s_w11_RRg6 is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000111100111111000111000001000010", 1 => "1101000010000001111101111101000010", 2 => "0000000011111011111100000000111010", 3 => "1100000000111011000100000100000110", 
    4 => "1010111101111100111101111110111100", 5 => "1111000000000011000111111011111001", 6 => "0010000001000011000011000001111110", 7 => "1110000000111101111100111110000000", 
    8 => "0000000001000100111111000011000001", 9 => "1111111010111101000100000101000001", 10 => "0111000000111100111111111110111110", 11 => "1101000100000101000100000101000100", 
    12 => "0000111101111110000010000000000110", 13 => "1001000011111110111101000000111100", 14 => "1101000010000011000000111111111110", 15 => "1011111110111011111111000010111001", 
    16 => "1000000110000011000001111100111110", 17 => "0001111100111111111011000011111100", 18 => "1110000110111101000010000010111111", 19 => "1110111100111100111111000010000001", 
    20 => "0110111101000110000000111101000001", 21 => "0110000101000010111100000100111111", 22 => "1100000101000001000100111101111101", 23 => "0000000001111111111111000001000011", 
    24 => "1111111100000111000011000100000011", 25 => "0000000000111111111100111011000011", 26 => "1100111111111010111111000011111110", 27 => "0001111001111001111111000010000001", 
    28 => "0000000000000001000010111001000000", 29 => "1001000001111011111101000010000100", 30 => "0011111010111010111111111111111101", 31 => "0000111000111010000011111111111011", 
    32 => "0101111011111101111101000000000000", 33 => "1111000001000110111101111010111111", 34 => "0011000000111011111111111100000010", 35 => "1111111111000000111111000000111010", 
    36 => "0110111111111110000100000001111111", 37 => "1111111000111101000011111111111111", 38 => "0100111110111110000011000001000000", 39 => "0001111111111111000010000011000011", 
    40 => "1100000000111101000011111010000000", 41 => "0000111100111100000010000100000100", 42 => "0011000001000011111111000101000011", 43 => "0101111111000001000010111101111001", 
    44 => "0011000001000110000001000100000100");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

