-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config11_mult_s_w11_RMgi is 
    generic(
             DataWidth     : integer := 34; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 54
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config11_mult_s_w11_RMgi is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0101000010000011111010111101000001", 1 => "1011111101000010000110111101111110", 2 => "0010111111000100111111111100000010", 3 => "0010111110111110000000000001111101", 
    4 => "0100111101000001000010000000000001", 5 => "0010000001111111111011111110000001", 6 => "1110000110000101000100000100111001", 7 => "1101000100000101000010111111000110", 
    8 => "1111000100111011000001000100111111", 9 => "1101111111111110000011000100000001", 10 => "1101000101111110000010000100111001", 11 => "0101111011111111000011000000111010", 
    12 => "0011111010111011111110111001111011", 13 => "0001111111111111000010111010111111", 14 => "1011000010111111111110111111111101", 15 => "1101111011111101000001000111000001", 
    16 => "0000000101111101000000111101000011", 17 => "1100000000111111111001111111111011", 18 => "0011111110000110000100111100000010", 19 => "0011000001111011000011111011000101", 
    20 => "0011000010111110000011000010111101", 21 => "0110111100000001111010000000000111", 22 => "0000000001000100000111000001111110", 23 => "0100111111000000000011111010111110", 
    24 => "0001111100111111111111000000111101", 25 => "0000000111111110000000111111111110", 26 => "1110111110000101111111111100000011", 27 => "0001111111111111000001111100111110", 
    28 => "1110111111111100000000000000000000", 29 => "1111111110000010111111000011111100", 30 => "0011000000000010000011000000000010", 31 => "0001111111111011000100000010000000", 
    32 => "1101111101000011111010000001111101", 33 => "0010000000111110111101111010111110", 34 => "0011111010000100111101000011000010", 35 => "0001000110000010000000111101111100", 
    36 => "0001111110000011111111000100111110", 37 => "1111000000000100000110111110111011", 38 => "1001000000000100000011000110111111", 39 => "1111000100111101111011000101000100", 
    40 => "1110000010000001000100000000000010", 41 => "0100000100111101000010111111000100", 42 => "1111111101000000111110000011111111", 43 => "0001111110000010000100000111111100", 
    44 => "1100111100000110000010000000111110", 45 => "0001000001111111000110111100000100", 46 => "0001000001000100111111111110000011", 47 => "1100111110000000111101000001000111", 
    48 => "1100111111111100111111111011000010", 49 => "1100000001000011000001111011111101", 50 => "0000000000000010000000111100111100", 51 => "0011000011111111000000000001000000", 
    52 => "0001111010111101111011111111000010", 53 => "1011000010000100000100111110000000");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

