-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config11_mult_s_w11_RQgW is 
    generic(
             DataWidth     : integer := 106; 
             AddressWidth     : integer := 4; 
             AddressRange    : integer := 15
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config11_mult_s_w11_RQgW is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0010111101000100111101000011111101111101000001000101000010000011000010000110000000111100000000111101000010", 1 => "0000111110111110000111111111111100000001000011111111111011111100000001111100111111111111000000111110000011", 2 => "0011111111111101000010111110000011111100111001000100111111000100000001000011111011111001111100000111111110", 3 => "0110111111000010000010000111000000000011111010000011111101111110000001000110111100000010111111000001000001", 
    4 => "1101111110111011111010000101111011000000111111111100111010000000111011111101000100000001000110111001000010", 5 => "1101111101000000111110111111000001111110000001111110111101000001111101000000111111111100000010111011111100", 6 => "0000000100000000111101000011111011000110000100111011111110000110111111000001000000000001111011000000000101", 7 => "1101000110111111000000111011000100111101000101000101111100111100111110000011000001111110111011111001111101", 
    8 => "1111000111000011111110000100000000111110000101111110000101000001000000111110000100000100000011111100111100", 9 => "0001000011000001111011000000000101000001000010111110111111111110111110000000000011000100111110111011111011", 10 => "1101000001111110111011000100000111111110000110111101111101111101000010000110111111111111111111111101000001", 11 => "0000111010000010111111000011000000000000111111000101000101000010111110111111000001000010111110111111111101", 
    12 => "0100111101000011111101000011111101000001111110111010000000000010111111000111111111000000111100000100111001", 13 => "0001000001000111000110000001111110111101111110000010111110000011111010000001000111000010111110000111000001", 14 => "0010111010000100111101000000000101111011000010111100000010000000111110111111000001111110000010111111000110");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

