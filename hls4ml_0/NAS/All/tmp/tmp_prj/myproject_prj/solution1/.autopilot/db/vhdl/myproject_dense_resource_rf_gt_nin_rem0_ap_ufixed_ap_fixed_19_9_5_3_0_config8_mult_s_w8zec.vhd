-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_gt_nin_rem0_ap_ufixed_ap_fixed_19_9_5_3_0_config8_mult_s_w8zec is 
    generic(
             DataWidth     : integer := 17; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 72
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_gt_nin_rem0_ap_ufixed_ap_fixed_19_9_5_3_0_config8_mult_s_w8zec is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00000000010000011", 1 => "11111111101111111", 2 => "11111111100111011", 3 => "00000000110000011", 
    4 => "01000111111111100", 5 => "00101000100000110", 6 => "11011000000111110", 7 => "11110000100111110", 
    8 => "00001000011000100", 9 => "11011000010000010", 10 => "00010000011111100", 11 => "11110111010111100", 
    12 => "11111000111000001", 13 => "01000111100000000", 14 => "00000000000111111", 15 => "00011000001111011", 
    16 => "11110111100111111", 17 => "00011111101000111", 18 => "00000000001111010", 19 => "00010000010000010", 
    20 => "11110000010000010", 21 => "01000000101111001", 22 => "11110000001111010", 23 => "11100000000000010", 
    24 => "11110111110000011", 25 => "11010000011000010", 26 => "11101000001000010", 27 => "11100000010000100", 
    28 => "11110111100000001", 29 => "00110111010111110", 30 => "00110111111111011", 31 => "11010111111000011", 
    32 => "00000000011111010", 33 => "00100111110000100", 34 => "11001111110000110", 35 => "11101111011000010", 
    36 => "11111111110000000", 37 => "11111111101000010", 38 => "11010111111000000", 39 => "11010000000000100", 
    40 => "11011000001000011", 41 => "11100111011000000", 42 => "00001000010000010", 43 => "11111000000000101", 
    44 => "11101111101000000", 45 => "00010111000111100", 46 => "00010111010111101", 47 => "11111111001000000", 
    48 => "11110111100000010", 49 => "00100111101000011", 50 => "00100111100111111", 51 => "11101000001000010", 
    52 => "11111000011000001", 53 => "00110000100111110", 54 => "00100000101000010", 55 => "00010111101111110", 
    56 => "00001000100111001", 57 => "00011111111111011", 58 => "11100000101000011", 59 => "11001000101000100", 
    60 => "11100001000000011", 61 => "00001111110000000", 62 => "00001111101111111", 63 => "00101111110111101", 
    64 => "11100111101000101", 65 => "11111000001111110", 66 => "11111000010000011", 67 => "11001111110000010", 
    68 => "11110000011000001", 69 => "00101111101111111", 70 => "00000000001111010", 71 => "00000111011000000");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

