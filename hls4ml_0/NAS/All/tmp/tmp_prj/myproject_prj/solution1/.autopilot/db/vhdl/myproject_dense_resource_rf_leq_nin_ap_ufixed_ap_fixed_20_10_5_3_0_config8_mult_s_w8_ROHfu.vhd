-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_20_10_5_3_0_config8_mult_s_w8_ROHfu is 
    generic(
             DataWidth     : integer := 28; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 100
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_20_10_5_3_0_config8_mult_s_w8_ROHfu is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0001000001111110000001111011", 1 => "1110000001000010111101000001", 2 => "1111000000111111111100000010", 3 => "0001111111111111111111000001", 
    4 => "0010000000000100000010111110", 5 => "1110111110000010111111000101", 6 => "0000000000111111000010111011", 7 => "0101111110000010111111000101", 
    8 => "1110000100111111111101000000", 9 => "0000111111111110111101111110", 10 => "0011000010000001000001111111", 11 => "0100111111000001000010000001", 
    12 => "1100000000000000000100111101", 13 => "1111111110111101000010000010", 14 => "1101000001000001111100000001", 15 => "0010000010111110111111111101", 
    16 => "0000000000000001000010111110", 17 => "0100000000111110111110111111", 18 => "1111111111111111000011111100", 19 => "0010000001000000111110111011", 
    20 => "0000111111111111111101000000", 21 => "1100000000111111000000000010", 22 => "1111000000111111111111111111", 23 => "0001000000000101000000111101", 
    24 => "0010000010000000000010111011", 25 => "0010000000111111000010111100", 26 => "0100111100000010000001000000", 27 => "0011000000000010111111000101", 
    28 => "0001000100111111000010000001", 29 => "0000111101000010111101111110", 30 => "1111000100111111000000111111", 31 => "1111000001111110111101111111", 
    32 => "1111000011000011000010000100", 33 => "0000000001000001000101000000", 34 => "0001111101000000000001000001", 35 => "0000111111111101111110000010", 
    36 => "1011000100000000111111000001", 37 => "1110111110111100000001000001", 38 => "0010000000000010000010111111", 39 => "1111000000111110111111111110", 
    40 => "0000111110000001111111111110", 41 => "0000111110000010000000000010", 42 => "0011111111111101000010000001", 43 => "0001111101000011111110111111", 
    44 => "0000111111000001000000111111", 45 => "1110111100000000111110111111", 46 => "1110111110000001000101111110", 47 => "0001111111111110111111000000", 
    48 => "0001111101111101000001000011", 49 => "1101000000000010000010000010", 50 => "1111111111000011000011000011", 51 => "1101111111111111111110000000", 
    52 => "0001000010000000111110111111", 53 => "1101111111000011000001111110", 54 => "1111000010111101111101000000", 55 => "1110111111111110000011111111", 
    56 => "0000000010000000000100000011", 57 => "1101111101000001111111000001", 58 => "1111000001000001111110111111", 59 => "0000111110000011111110000011", 
    60 => "1111000000111111000100000000", 61 => "1101111100111111000011000010", 62 => "1110111111000001000010111100", 63 => "1111000011111111111110000000", 
    64 => "0000000010000011000010111101", 65 => "0010000001000000111111000000", 66 => "0001000010000001111100111111", 67 => "0010000001000000000010111111", 
    68 => "0000111110000000111011000010", 69 => "1110111101111101111111111101", 70 => "0001111111000011000010111101", 71 => "1101000001111110000000111110", 
    72 => "1111000011000001111111000101", 73 => "0001111110000010111111111110", 74 => "0001000011000010000011111111", 75 => "0011000000000000111110000001", 
    76 => "0010000011000010000101000011", 77 => "0000000000000000000100111111", 78 => "0000000001000011000010111011", 79 => "0010000000111101111111000001", 
    80 => "1111000000111101000001111101", 81 => "0010111100111111111110111110", 82 => "0001000011111111000000000011", 83 => "1100111111000011000000000001", 
    84 => "1111000001111101000001000001", 85 => "1110000000000001000000111100", 86 => "0010111111000100111110000001", 87 => "1110000010111111111111000011", 
    88 => "0000111111000001111111000001", 89 => "1101111011000000111100111110", 90 => "0011000000000010000000111110", 91 => "0000000011000011111110111111", 
    92 => "1111000001111111000001111111", 93 => "0001000000000000000000111101", 94 => "0001000000111110111111000010", 95 => "0100111101000000000010000001", 
    96 => "0001111011000001111101000001", 97 => "1111111100111110000011000001", 98 => "0000111111000001000100000001", 99 => "0000111111000011000101000001");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

