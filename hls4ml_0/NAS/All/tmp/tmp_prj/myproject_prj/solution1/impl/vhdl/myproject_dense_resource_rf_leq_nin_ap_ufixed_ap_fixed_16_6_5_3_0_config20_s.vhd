-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_16_6_5_3_0_config20_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (5 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (5 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (5 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (5 downto 0);
    data_4_val : IN STD_LOGIC_VECTOR (5 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_16_6_5_3_0_config20_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln46_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w20_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal w20_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal do_init_reg_103 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index3_reg_119 : STD_LOGIC_VECTOR (2 downto 0);
    signal data_0_val8_rewind_reg_134 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_1_val9_rewind_reg_148 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_2_val10_rewind_reg_162 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_3_val11_rewind_reg_176 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_4_val12_rewind_reg_190 : STD_LOGIC_VECTOR (5 downto 0);
    signal res_04_reg_204 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_index_fu_283_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_index_reg_381 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln46_reg_386 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln46_fu_335_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_do_init_phi_fu_107_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_w_index3_phi_fu_123_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_data_0_val8_phi_phi_fu_222_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_data_1_val9_phi_phi_fu_234_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_data_2_val10_phi_phi_fu_246_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_data_3_val11_phi_phi_fu_258_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_data_4_val12_phi_phi_fu_270_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_0_val8_phi_reg_218 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_data_0_val8_phi_reg_218 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_1_val9_phi_reg_230 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_data_1_val9_phi_reg_230 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_2_val10_phi_reg_242 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_data_2_val10_phi_reg_242 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_3_val11_phi_reg_254 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_data_3_val11_phi_reg_254 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_4_val12_phi_reg_266 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_data_4_val12_phi_reg_266 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln46_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w20_ce0_local : STD_LOGIC;
    signal a_fu_299_p11 : STD_LOGIC_VECTOR (5 downto 0);
    signal a_fu_299_p13 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_341_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_341_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_condition_115 : BOOLEAN;
    signal ap_condition_37 : BOOLEAN;
    signal a_fu_299_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_fu_299_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_fu_299_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_fu_299_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_fu_299_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_sparsemux_11_3_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (5 downto 0);
        din4 : IN STD_LOGIC_VECTOR (5 downto 0);
        def : IN STD_LOGIC_VECTOR (5 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component myproject_mac_muladd_6s_6ns_13s_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_16_6_5_3_0_config20_s_w20_ROM_NP7jG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    w20_U : component myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_16_6_5_3_0_config20_s_w20_ROM_NP7jG
    generic map (
        DataWidth => 6,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w20_address0,
        ce0 => w20_ce0_local,
        q0 => w20_q0);

    sparsemux_11_3_6_1_1_U683 : component myproject_sparsemux_11_3_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 6,
        CASE1 => "001",
        din1_WIDTH => 6,
        CASE2 => "010",
        din2_WIDTH => 6,
        CASE3 => "011",
        din3_WIDTH => 6,
        CASE4 => "100",
        din4_WIDTH => 6,
        def_WIDTH => 6,
        sel_WIDTH => 3,
        dout_WIDTH => 6)
    port map (
        din0 => ap_phi_mux_data_0_val8_phi_phi_fu_222_p4,
        din1 => ap_phi_mux_data_1_val9_phi_phi_fu_234_p4,
        din2 => ap_phi_mux_data_2_val10_phi_phi_fu_246_p4,
        din3 => ap_phi_mux_data_3_val11_phi_phi_fu_258_p4,
        din4 => ap_phi_mux_data_4_val12_phi_phi_fu_270_p4,
        def => a_fu_299_p11,
        sel => w_index3_reg_119,
        dout => a_fu_299_p13);

    mac_muladd_6s_6ns_13s_14_1_1_U684 : component myproject_mac_muladd_6s_6ns_13s_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 13,
        dout_WIDTH => 14)
    port map (
        din0 => w20_q0,
        din1 => grp_fu_341_p1,
        din2 => res_04_reg_204,
        dout => grp_fu_341_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv14_0;
            else
                if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_386 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_return_preg <= grp_fu_341_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_data_0_val8_phi_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_107_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_0_val8_phi_reg_218 <= data_0_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_0_val8_phi_reg_218 <= ap_phi_reg_pp0_iter0_data_0_val8_phi_reg_218;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_1_val9_phi_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_107_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_1_val9_phi_reg_230 <= data_1_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_1_val9_phi_reg_230 <= ap_phi_reg_pp0_iter0_data_1_val9_phi_reg_230;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_2_val10_phi_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_107_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_2_val10_phi_reg_242 <= data_2_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_2_val10_phi_reg_242 <= ap_phi_reg_pp0_iter0_data_2_val10_phi_reg_242;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_3_val11_phi_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_107_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_3_val11_phi_reg_254 <= data_3_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_3_val11_phi_reg_254 <= ap_phi_reg_pp0_iter0_data_3_val11_phi_reg_254;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_4_val12_phi_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_107_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_4_val12_phi_reg_266 <= data_4_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_4_val12_phi_reg_266 <= ap_phi_reg_pp0_iter0_data_4_val12_phi_reg_266;
                end if;
            end if; 
        end if;
    end process;

    do_init_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_386 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                do_init_reg_103 <= ap_const_lv1_0;
            elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_386 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_103 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    res_04_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_386 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                res_04_reg_204 <= trunc_ln46_fu_335_p1;
            elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_386 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res_04_reg_204 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    w_index3_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_386 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                w_index3_reg_119 <= w_index_reg_381;
            elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_386 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                w_index3_reg_119 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_386 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_0_val8_rewind_reg_134 <= ap_phi_mux_data_0_val8_phi_phi_fu_222_p4;
                data_1_val9_rewind_reg_148 <= ap_phi_mux_data_1_val9_phi_phi_fu_234_p4;
                data_2_val10_rewind_reg_162 <= ap_phi_mux_data_2_val10_phi_phi_fu_246_p4;
                data_3_val11_rewind_reg_176 <= ap_phi_mux_data_3_val11_phi_phi_fu_258_p4;
                data_4_val12_rewind_reg_190 <= ap_phi_mux_data_4_val12_phi_phi_fu_270_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln46_reg_386 <= icmp_ln46_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                w_index_reg_381 <= w_index_fu_283_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    a_fu_299_p11 <= "XXXXXX";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_115_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_115 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_37_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_37 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_386, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_386 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_data_0_val8_phi_phi_fu_222_p4_assign_proc : process(do_init_reg_103, data_0_val8_rewind_reg_134, ap_phi_reg_pp0_iter1_data_0_val8_phi_reg_218)
    begin
        if ((do_init_reg_103 = ap_const_lv1_0)) then 
            ap_phi_mux_data_0_val8_phi_phi_fu_222_p4 <= data_0_val8_rewind_reg_134;
        else 
            ap_phi_mux_data_0_val8_phi_phi_fu_222_p4 <= ap_phi_reg_pp0_iter1_data_0_val8_phi_reg_218;
        end if; 
    end process;


    ap_phi_mux_data_1_val9_phi_phi_fu_234_p4_assign_proc : process(do_init_reg_103, data_1_val9_rewind_reg_148, ap_phi_reg_pp0_iter1_data_1_val9_phi_reg_230)
    begin
        if ((do_init_reg_103 = ap_const_lv1_0)) then 
            ap_phi_mux_data_1_val9_phi_phi_fu_234_p4 <= data_1_val9_rewind_reg_148;
        else 
            ap_phi_mux_data_1_val9_phi_phi_fu_234_p4 <= ap_phi_reg_pp0_iter1_data_1_val9_phi_reg_230;
        end if; 
    end process;


    ap_phi_mux_data_2_val10_phi_phi_fu_246_p4_assign_proc : process(do_init_reg_103, data_2_val10_rewind_reg_162, ap_phi_reg_pp0_iter1_data_2_val10_phi_reg_242)
    begin
        if ((do_init_reg_103 = ap_const_lv1_0)) then 
            ap_phi_mux_data_2_val10_phi_phi_fu_246_p4 <= data_2_val10_rewind_reg_162;
        else 
            ap_phi_mux_data_2_val10_phi_phi_fu_246_p4 <= ap_phi_reg_pp0_iter1_data_2_val10_phi_reg_242;
        end if; 
    end process;


    ap_phi_mux_data_3_val11_phi_phi_fu_258_p4_assign_proc : process(do_init_reg_103, data_3_val11_rewind_reg_176, ap_phi_reg_pp0_iter1_data_3_val11_phi_reg_254)
    begin
        if ((do_init_reg_103 = ap_const_lv1_0)) then 
            ap_phi_mux_data_3_val11_phi_phi_fu_258_p4 <= data_3_val11_rewind_reg_176;
        else 
            ap_phi_mux_data_3_val11_phi_phi_fu_258_p4 <= ap_phi_reg_pp0_iter1_data_3_val11_phi_reg_254;
        end if; 
    end process;


    ap_phi_mux_data_4_val12_phi_phi_fu_270_p4_assign_proc : process(do_init_reg_103, data_4_val12_rewind_reg_190, ap_phi_reg_pp0_iter1_data_4_val12_phi_reg_266)
    begin
        if ((do_init_reg_103 = ap_const_lv1_0)) then 
            ap_phi_mux_data_4_val12_phi_phi_fu_270_p4 <= data_4_val12_rewind_reg_190;
        else 
            ap_phi_mux_data_4_val12_phi_phi_fu_270_p4 <= ap_phi_reg_pp0_iter1_data_4_val12_phi_reg_266;
        end if; 
    end process;


    ap_phi_mux_do_init_phi_fu_107_p6_assign_proc : process(do_init_reg_103, icmp_ln46_reg_386, ap_condition_115)
    begin
        if ((ap_const_boolean_1 = ap_condition_115)) then
            if ((icmp_ln46_reg_386 = ap_const_lv1_1)) then 
                ap_phi_mux_do_init_phi_fu_107_p6 <= ap_const_lv1_1;
            elsif ((icmp_ln46_reg_386 = ap_const_lv1_0)) then 
                ap_phi_mux_do_init_phi_fu_107_p6 <= ap_const_lv1_0;
            else 
                ap_phi_mux_do_init_phi_fu_107_p6 <= do_init_reg_103;
            end if;
        else 
            ap_phi_mux_do_init_phi_fu_107_p6 <= do_init_reg_103;
        end if; 
    end process;


    ap_phi_mux_w_index3_phi_fu_123_p6_assign_proc : process(w_index3_reg_119, w_index_reg_381, icmp_ln46_reg_386, ap_condition_115)
    begin
        if ((ap_const_boolean_1 = ap_condition_115)) then
            if ((icmp_ln46_reg_386 = ap_const_lv1_1)) then 
                ap_phi_mux_w_index3_phi_fu_123_p6 <= ap_const_lv3_0;
            elsif ((icmp_ln46_reg_386 = ap_const_lv1_0)) then 
                ap_phi_mux_w_index3_phi_fu_123_p6 <= w_index_reg_381;
            else 
                ap_phi_mux_w_index3_phi_fu_123_p6 <= w_index3_reg_119;
            end if;
        else 
            ap_phi_mux_w_index3_phi_fu_123_p6 <= w_index3_reg_119;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_data_0_val8_phi_reg_218 <= "XXXXXX";
    ap_phi_reg_pp0_iter0_data_1_val9_phi_reg_230 <= "XXXXXX";
    ap_phi_reg_pp0_iter0_data_2_val10_phi_reg_242 <= "XXXXXX";
    ap_phi_reg_pp0_iter0_data_3_val11_phi_reg_254 <= "XXXXXX";
    ap_phi_reg_pp0_iter0_data_4_val12_phi_reg_266 <= "XXXXXX";

    ap_ready_assign_proc : process(icmp_ln46_fu_289_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_386, ap_enable_reg_pp0_iter1, grp_fu_341_p3, ap_return_preg)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_386 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_return <= grp_fu_341_p3;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    grp_fu_341_p1 <= grp_fu_341_p10(6 - 1 downto 0);
    grp_fu_341_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_fu_299_p13),12));
    icmp_ln46_fu_289_p2 <= "1" when (ap_phi_mux_w_index3_phi_fu_123_p6 = ap_const_lv3_4) else "0";
    trunc_ln46_fu_335_p1 <= grp_fu_341_p3(13 - 1 downto 0);
    w20_address0 <= zext_ln46_fu_278_p1(3 - 1 downto 0);

    w20_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w20_ce0_local <= ap_const_logic_1;
        else 
            w20_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_index_fu_283_p2 <= std_logic_vector(unsigned(ap_phi_mux_w_index3_phi_fu_123_p6) + unsigned(ap_const_lv3_1));
    zext_ln46_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_w_index3_phi_fu_123_p6),64));
end behav;
