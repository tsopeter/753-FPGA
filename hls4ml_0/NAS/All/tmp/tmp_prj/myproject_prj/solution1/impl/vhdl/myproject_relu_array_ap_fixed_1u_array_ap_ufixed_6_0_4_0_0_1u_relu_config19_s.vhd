-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_1u_array_ap_ufixed_6_0_4_0_0_1u_relu_config19_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer18_out_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    layer18_out_empty_n : IN STD_LOGIC;
    layer18_out_read : OUT STD_LOGIC;
    layer18_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer18_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer19_out_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer19_out_full_n : IN STD_LOGIC;
    layer19_out_write : OUT STD_LOGIC;
    layer19_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer19_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of myproject_relu_array_ap_fixed_1u_array_ap_ufixed_6_0_4_0_0_1u_relu_config19_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer18_out_blk_n : STD_LOGIC;
    signal layer19_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln52_fu_93_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_126_fu_111_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_97_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_124_fu_85_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_75_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_fu_131_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_141_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_fu_135_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_125_fu_103_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_127_fu_155_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_145_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_30_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_41_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_67_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_46_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_199_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_47_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_46_fu_207_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln51_fu_61_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_47_fu_215_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln52_fu_135_p2 <= std_logic_vector(unsigned(trunc_ln_fu_75_p4) + unsigned(zext_ln52_fu_131_p1));
    and_ln52_41_fu_169_p2 <= (tmp_127_fu_155_p3 or not_tmp_145_fu_163_p2);
    and_ln52_fu_125_p2 <= (tmp_124_fu_85_p3 and or_ln52_fu_119_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer18_out_empty_n, layer19_out_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer19_out_full_n = ap_const_logic_0) or (layer18_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    empty_fu_175_p2 <= (icmp_ln52_30_fu_149_p2 and and_ln52_41_fu_169_p2);
    icmp_ln51_fu_61_p2 <= "1" when (signed(layer18_out_dout) > signed(ap_const_lv16_0)) else "0";
    icmp_ln52_30_fu_149_p2 <= "1" when (tmp_s_fu_141_p3 = ap_const_lv6_0) else "0";
    icmp_ln52_fu_97_p2 <= "0" when (trunc_ln52_fu_93_p1 = ap_const_lv3_0) else "1";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer18_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer18_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer18_out_blk_n <= layer18_out_empty_n;
        else 
            layer18_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer18_out_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer18_out_read <= ap_const_logic_1;
        else 
            layer18_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer19_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer19_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer19_out_blk_n <= layer19_out_full_n;
        else 
            layer19_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer19_out_din <= 
        select_ln52_47_fu_215_p3 when (icmp_ln51_fu_61_p2(0) = '1') else 
        ap_const_lv6_0;

    layer19_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer19_out_write <= ap_const_logic_1;
        else 
            layer19_out_write <= ap_const_logic_0;
        end if; 
    end process;

    not_tmp_145_fu_163_p2 <= (tmp_125_fu_103_p3 xor ap_const_lv1_1);
    or_ln52_46_fu_181_p2 <= (tmp_fu_67_p3 or empty_fu_175_p2);
    or_ln52_47_fu_193_p2 <= (xor_ln52_fu_187_p2 or tmp_fu_67_p3);
    or_ln52_fu_119_p2 <= (tmp_126_fu_111_p3 or icmp_ln52_fu_97_p2);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln52_46_fu_207_p3 <= 
        select_ln52_fu_199_p3 when (or_ln52_46_fu_181_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_47_fu_215_p3 <= 
        select_ln52_46_fu_207_p3 when (or_ln52_47_fu_193_p2(0) = '1') else 
        add_ln52_fu_135_p2;
    select_ln52_fu_199_p3 <= 
        ap_const_lv6_0 when (tmp_fu_67_p3(0) = '1') else 
        add_ln52_fu_135_p2;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_124_fu_85_p3 <= layer18_out_dout(3 downto 3);
    tmp_125_fu_103_p3 <= layer18_out_dout(9 downto 9);
    tmp_126_fu_111_p3 <= layer18_out_dout(4 downto 4);
    tmp_127_fu_155_p3 <= add_ln52_fu_135_p2(5 downto 5);
    tmp_fu_67_p3 <= layer18_out_dout(15 downto 15);
    tmp_s_fu_141_p3 <= layer18_out_dout(15 downto 10);
    trunc_ln52_fu_93_p1 <= layer18_out_dout(3 - 1 downto 0);
    trunc_ln_fu_75_p4 <= layer18_out_dout(9 downto 4);
    xor_ln52_fu_187_p2 <= (empty_fu_175_p2 xor ap_const_lv1_1);
    zext_ln52_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_fu_125_p2),6));
end behav;
