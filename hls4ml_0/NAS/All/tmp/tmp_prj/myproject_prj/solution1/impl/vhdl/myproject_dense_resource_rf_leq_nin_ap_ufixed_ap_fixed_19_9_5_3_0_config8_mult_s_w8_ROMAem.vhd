-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config8_mult_s_w8_ROMAem is 
    generic(
             DataWidth     : integer := 35; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config8_mult_s_w8_ROMAem is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00000000000111001000011000010000000", 1 => "00011000001000010000101000000111100", 2 => "00110000011000001111110000100111100", 3 => "00011000011111011000010111101111011", 
    4 => "00000000010111111000001111101000011", 5 => "00100000011000011111111000000000101", 6 => "11110000010111011000001000000111100", 7 => "00010111111000000000100000011000011", 
    8 => "11100000001111101111111111111111010", 9 => "00101111111000000111100111101000100", 10 => "11110000010000000000000000110111001", 11 => "00101000100111101000011111110111110", 
    12 => "00011000011000011000110000101000100", 13 => "00101111111000100111111000100111111", 14 => "00100000000111010000001000001111110", 15 => "11011000100000011111101000101000011", 
    16 => "00001111100111011111111111010111101", 17 => "11111000000000011000101111111000110", 18 => "01000111001000001111111000001000010", 19 => "11001111100000001000001000000111111", 
    20 => "11111000011000100000000111011000100", 21 => "11101111111000010000000000110111110", 22 => "00001000000111110000010111111000010", 23 => "11101111101000100111011000100000000", 
    24 => "11101000011000000111101111100111100", 25 => "00010111010000100111010000001000001", 26 => "11111000000000001000000111100000000", 27 => "00001111110000001000000111100000100", 
    28 => "00110111111111110111110000000000010", 29 => "00010000011000100000011000001111111", 30 => "11101111111000100111111000100000001", 31 => "11110000100111100000100000010000010", 
    32 => "11111111100000000000010111010000011", 33 => "00001000000111100000000000010111110", 34 => "11001111101111110000000111011000000", 35 => "11011000011000000111111000111000001", 
    36 => "11001111111000000000001000010111100", 37 => "11101000011000001000001111100000001", 38 => "00000111111111010111111000000000001", 39 => "11111111100111110000001111011111011", 
    40 => "11100000001111001000100111011111110", 41 => "00000111111000000000101000010111110", 42 => "00011000101000000000000000001000001", 43 => "00000000001000010111110111010111011", 
    44 => "11110111101000111000001111101000001");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

