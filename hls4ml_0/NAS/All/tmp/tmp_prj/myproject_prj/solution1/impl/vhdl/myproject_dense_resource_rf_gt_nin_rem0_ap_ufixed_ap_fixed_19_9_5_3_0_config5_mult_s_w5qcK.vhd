-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_gt_nin_rem0_ap_ufixed_ap_fixed_19_9_5_3_0_config5_mult_s_w5qcK is 
    generic(
             DataWidth     : integer := 10; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 100
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_gt_nin_rem0_ap_ufixed_ap_fixed_19_9_5_3_0_config5_mult_s_w5qcK is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1011111111", 1 => "0011000010", 2 => "1100111010", 3 => "1110000111", 
    4 => "0001000000", 5 => "1110111110", 6 => "1110000010", 7 => "0010111101", 
    8 => "0001111111", 9 => "1100000000", 10 => "1100111101", 11 => "0010111100", 
    12 => "0001000100", 13 => "0001000010", 14 => "0100111111", 15 => "1110111110", 
    16 => "1011000100", 17 => "1110111100", 18 => "0000111101", 19 => "1110000010", 
    20 => "0001111110", 21 => "1111111100", 22 => "0101000000", 23 => "0000000000", 
    24 => "0100000001", 25 => "1111000000", 26 => "1100000011", 27 => "1100000010", 
    28 => "1111000011", 29 => "0010111111", 30 => "1100000001", 31 => "1011000000", 
    32 => "1101000001", 33 => "0001111110", 34 => "1111000001", 35 => "1011000010", 
    36 => "0101000010", 37 => "1101000001", 38 => "0100111101", 39 => "1001000011", 
    40 => "1001000000", 41 => "1011111111", 42 => "1110111111", 43 => "0101000010", 
    44 => "0000111111", 45 => "0111000110", 46 => "1101111011", 47 => "1111000001", 
    48 => "1011111100", 49 => "1100000101", 50 => "1111111110", 51 => "0010000010", 
    52 => "0011111011", 53 => "0001000001", 54 => "0000000011", 55 => "1110111111", 
    56 => "1100000000", 57 => "0001111111", 58 => "1011000000", 59 => "1101000000", 
    60 => "0000000001", 61 => "1111111111", 62 => "1101000110", 63 => "0110000001", 
    64 => "1100000001", 65 => "1101000001", 66 => "0111000010", 67 => "0001000010", 
    68 => "0110000101", 69 => "1100000000", 70 => "0000000011", 71 => "1111000001", 
    72 => "1110000100", 73 => "0110000001", 74 => "0101000010", 75 => "0010000011", 
    76 => "1011000101", 77 => "0001000001", 78 => "1011111011", 79 => "0001000001", 
    80 => "1011000000", 81 => "0001000101", 82 => "0101000100", 83 => "0110111110", 
    84 => "0000000000", 85 => "0010111111", 86 => "1110000001", 87 => "0011111110", 
    88 => "1110000011", 89 => "0001000100", 90 => "0100111100", 91 => "0010111101", 
    92 => "0100000010", 93 => "1011000000", 94 => "1111111100", 95 => "1100111101", 
    96 => "0001111110", 97 => "0000111111", 98 => "0011111111", 99 => "1100000000");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

