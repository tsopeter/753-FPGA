// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_2u_array_ap_ufixed_6_0_4_0_0_2u_relu_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer2_out_dout,
        layer2_out_empty_n,
        layer2_out_read,
        layer2_out_num_data_valid,
        layer2_out_fifo_cap,
        layer4_out_din,
        layer4_out_full_n,
        layer4_out_write,
        layer4_out_num_data_valid,
        layer4_out_fifo_cap,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [39:0] layer2_out_dout;
input   layer2_out_empty_n;
output   layer2_out_read;
input  [10:0] layer2_out_num_data_valid;
input  [10:0] layer2_out_fifo_cap;
output  [11:0] layer4_out_din;
input   layer4_out_full_n;
output   layer4_out_write;
input  [31:0] layer4_out_num_data_valid;
input  [31:0] layer4_out_fifo_cap;
output   start_out;
output   start_write;

reg ap_idle;
reg layer2_out_read;
reg layer4_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_done_reg;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [0:0] icmp_ln41_fu_195_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage1_pp0_iter1_reg;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_state1_pp0_stage0_iter0_grp1;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] icmp_ln41_reg_366;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
reg    ap_loop_exit_ready_delayed;
reg    layer2_out_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    layer4_out_blk_n;
reg   [39:0] layer2_out_read_reg_301;
reg    ap_block_pp0_stage0_11001_grp1;
wire   [19:0] trunc_ln44_fu_94_p1;
reg   [19:0] trunc_ln44_reg_307;
reg   [19:0] trunc_ln44_1_reg_312;
reg   [0:0] tmp_reg_317;
reg   [15:0] tmp_8_reg_323;
reg   [0:0] tmp_123_reg_328;
reg   [15:0] tmp_s_reg_334;
wire   [0:0] icmp_ln51_fu_147_p2;
reg   [0:0] icmp_ln51_reg_339;
wire   [0:0] and_ln52_fu_162_p2;
reg   [0:0] and_ln52_reg_344;
wire   [0:0] icmp_ln51_1_fu_168_p2;
reg   [0:0] icmp_ln51_1_reg_350;
wire   [0:0] and_ln52_2_fu_183_p2;
reg   [0:0] and_ln52_2_reg_355;
wire   [9:0] i_fu_189_p2;
reg   [9:0] i_reg_361;
reg   [9:0] i1_fu_72;
reg    ap_block_pp0_stage0_11001_grp0;
reg    ap_block_pp0_stage0_subdone_grp0_done_reg;
reg    ap_block_pp0_stage0_subdone_grp0;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_subdone_grp0_done_reg_iter0;
wire    ap_block_pp0_stage1;
reg    ap_block_pp0_stage0_01001_grp1;
wire   [0:0] icmp_ln52_fu_157_p2;
wire   [0:0] xor_ln52_fu_152_p2;
wire   [0:0] icmp_ln52_2_fu_178_p2;
wire   [0:0] xor_ln52_1_fu_173_p2;
wire   [3:0] trunc_ln52_fu_201_p1;
wire   [0:0] or_ln52_fu_219_p2;
wire   [5:0] select_ln52_46_fu_212_p3;
wire   [5:0] shl_ln_fu_204_p3;
wire   [5:0] select_ln52_fu_223_p3;
wire   [3:0] tmp_1_fu_238_p4;
wire   [0:0] or_ln52_3_fu_262_p2;
wire   [5:0] select_ln52_47_fu_255_p3;
wire   [5:0] and_ln52_1_fu_247_p3;
wire   [5:0] select_ln52_3_fu_266_p3;
wire   [5:0] storemerge_fu_274_p3;
wire   [5:0] out_data_0_0_0_0_0_load_fu_231_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_done_sig;
reg    ap_condition_356;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i1_fu_72 = 10'd0;
#0 ap_block_pp0_stage0_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp0_done_reg_iter0 = 1'b0;
end

myproject_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp0)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp0_done_reg_iter0 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg_iter0 <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp0)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg_iter0 <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
        ap_condition_exit_pp0_iter0_stage1_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage1;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0)) | ((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_356)) begin
            i1_fu_72 <= 10'd0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i1_fu_72 <= i_reg_361;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        and_ln52_2_reg_355 <= and_ln52_2_fu_183_p2;
        and_ln52_reg_344 <= and_ln52_fu_162_p2;
        i_reg_361 <= i_fu_189_p2;
        icmp_ln41_reg_366 <= icmp_ln41_fu_195_p2;
        icmp_ln51_1_reg_350 <= icmp_ln51_1_fu_168_p2;
        icmp_ln51_reg_339 <= icmp_ln51_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_out_read_reg_301 <= layer2_out_dout;
        tmp_123_reg_328 <= layer2_out_dout[32'd39];
        tmp_8_reg_323 <= {{layer2_out_dout[19:4]}};
        tmp_reg_317 <= layer2_out_dout[32'd19];
        tmp_s_reg_334 <= {{layer2_out_dout[39:24]}};
        trunc_ln44_1_reg_312 <= {{layer2_out_dout[39:20]}};
        trunc_ln44_reg_307 <= trunc_ln44_fu_94_p1;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_195_p2 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_366 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_exit_pp0_iter0_stage1_pp0_iter1_reg) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_done_reg == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_out_blk_n = layer2_out_empty_n;
    end else begin
        layer2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_out_read = 1'b1;
    end else begin
        layer2_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer4_out_blk_n = layer4_out_full_n;
    end else begin
        layer4_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer4_out_write = 1'b1;
    end else begin
        layer4_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln52_1_fu_247_p3 = {{tmp_1_fu_238_p4}, {2'd0}};

assign and_ln52_2_fu_183_p2 = (xor_ln52_1_fu_173_p2 & icmp_ln52_2_fu_178_p2);

assign and_ln52_fu_162_p2 = (xor_ln52_fu_152_p2 & icmp_ln52_fu_157_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = (((layer4_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0_grp1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp0 = ((ap_done_reg == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = (((layer4_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0_grp1)));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((layer4_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0_grp1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp0 = ((ap_done_reg == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0_grp1 = ((layer2_out_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_condition_356 = ((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg_iter0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = internal_ap_ready;

assign i_fu_189_p2 = (i1_fu_72 + 10'd1);

assign icmp_ln41_fu_195_p2 = ((i1_fu_72 == 10'd899) ? 1'b1 : 1'b0);

assign icmp_ln51_1_fu_168_p2 = (($signed(trunc_ln44_1_reg_312) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_147_p2 = (($signed(trunc_ln44_reg_307) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln52_2_fu_178_p2 = ((tmp_s_reg_334 != 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_157_p2 = ((tmp_8_reg_323 != 16'd0) ? 1'b1 : 1'b0);

assign layer4_out_din = {{storemerge_fu_274_p3}, {out_data_0_0_0_0_0_load_fu_231_p3}};

assign or_ln52_3_fu_262_p2 = (tmp_123_reg_328 | and_ln52_2_reg_355);

assign or_ln52_fu_219_p2 = (tmp_reg_317 | and_ln52_reg_344);

assign out_data_0_0_0_0_0_load_fu_231_p3 = ((icmp_ln51_reg_339[0:0] == 1'b1) ? select_ln52_fu_223_p3 : 6'd0);

assign select_ln52_3_fu_266_p3 = ((or_ln52_3_fu_262_p2[0:0] == 1'b1) ? select_ln52_47_fu_255_p3 : and_ln52_1_fu_247_p3);

assign select_ln52_46_fu_212_p3 = ((and_ln52_reg_344[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign select_ln52_47_fu_255_p3 = ((and_ln52_2_reg_355[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign select_ln52_fu_223_p3 = ((or_ln52_fu_219_p2[0:0] == 1'b1) ? select_ln52_46_fu_212_p3 : shl_ln_fu_204_p3);

assign shl_ln_fu_204_p3 = {{trunc_ln52_fu_201_p1}, {2'd0}};

assign start_out = real_start;

assign storemerge_fu_274_p3 = ((icmp_ln51_1_reg_350[0:0] == 1'b1) ? select_ln52_3_fu_266_p3 : 6'd0);

assign tmp_1_fu_238_p4 = {{layer2_out_read_reg_301[23:20]}};

assign trunc_ln44_fu_94_p1 = layer2_out_dout[19:0];

assign trunc_ln52_fu_201_p1 = layer2_out_read_reg_301[3:0];

assign xor_ln52_1_fu_173_p2 = (tmp_123_reg_328 ^ 1'd1);

assign xor_ln52_fu_152_p2 = (tmp_reg_317 ^ 1'd1);

endmodule //myproject_relu_array_ap_fixed_2u_array_ap_ufixed_6_0_4_0_0_2u_relu_config4_s
