// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_6u_array_ap_ufixed_6_0_4_0_0_6u_relu_config10_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer8_out_dout,
        layer8_out_empty_n,
        layer8_out_read,
        layer8_out_num_data_valid,
        layer8_out_fifo_cap,
        layer10_out_din,
        layer10_out_full_n,
        layer10_out_write,
        layer10_out_num_data_valid,
        layer10_out_fifo_cap,
        start_out,
        start_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [113:0] layer8_out_dout;
input   layer8_out_empty_n;
output   layer8_out_read;
input  [7:0] layer8_out_num_data_valid;
input  [7:0] layer8_out_fifo_cap;
output  [35:0] layer10_out_din;
input   layer10_out_full_n;
output   layer10_out_write;
input  [7:0] layer10_out_num_data_valid;
input  [7:0] layer10_out_fifo_cap;
output   start_out;
output   start_write;

reg ap_idle;
reg layer8_out_read;
reg layer10_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln41_fu_1308_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    layer8_out_blk_n;
reg    layer10_out_blk_n;
reg   [6:0] i1_fu_144;
wire   [6:0] i_fu_1302_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i1_load;
wire   [18:0] trunc_ln44_fu_169_p1;
wire   [2:0] trunc_ln52_fu_255_p1;
wire   [0:0] tmp_42_fu_273_p3;
wire   [0:0] icmp_ln52_fu_259_p2;
wire   [0:0] or_ln52_fu_281_p2;
wire   [0:0] tmp_40_fu_247_p3;
wire   [0:0] and_ln52_fu_287_p2;
wire   [5:0] trunc_ln2_fu_237_p4;
wire   [5:0] zext_ln52_fu_293_p1;
wire   [8:0] tmp_s_fu_303_p4;
wire   [5:0] add_ln52_fu_297_p2;
wire   [0:0] tmp_41_fu_265_p3;
wire   [0:0] tmp_43_fu_319_p3;
wire   [0:0] not_tmp_117_fu_327_p2;
wire   [0:0] icmp_ln52_12_fu_313_p2;
wire   [0:0] and_ln52_34_fu_333_p2;
wire   [0:0] empty_fu_339_p2;
wire   [0:0] tmp_fu_229_p3;
wire   [0:0] xor_ln52_fu_351_p2;
wire   [0:0] or_ln52_18_fu_345_p2;
wire   [5:0] select_ln52_fu_363_p3;
wire   [0:0] or_ln52_19_fu_357_p2;
wire   [5:0] select_ln52_18_fu_371_p3;
wire   [0:0] icmp_ln51_fu_223_p2;
wire   [5:0] select_ln52_19_fu_379_p3;
wire   [18:0] trunc_ln44_s_fu_173_p4;
wire   [2:0] tmp_39_fu_427_p4;
wire   [0:0] tmp_47_fu_451_p3;
wire   [0:0] icmp_ln52_13_fu_437_p2;
wire   [0:0] or_ln52_20_fu_459_p2;
wire   [0:0] tmp_45_fu_419_p3;
wire   [0:0] and_ln52_6_fu_465_p2;
wire   [5:0] trunc_ln52_s_fu_409_p4;
wire   [5:0] zext_ln52_6_fu_471_p1;
wire   [8:0] tmp_48_fu_481_p4;
wire   [5:0] add_ln52_6_fu_475_p2;
wire   [0:0] tmp_46_fu_443_p3;
wire   [0:0] tmp_49_fu_497_p3;
wire   [0:0] not_tmp_124_fu_505_p2;
wire   [0:0] icmp_ln52_14_fu_491_p2;
wire   [0:0] and_ln52_36_fu_511_p2;
wire   [0:0] empty_56_fu_517_p2;
wire   [0:0] tmp_44_fu_401_p3;
wire   [0:0] xor_ln52_6_fu_529_p2;
wire   [0:0] or_ln52_21_fu_523_p2;
wire   [5:0] select_ln52_20_fu_541_p3;
wire   [0:0] or_ln52_22_fu_535_p2;
wire   [5:0] select_ln52_21_fu_549_p3;
wire   [0:0] icmp_ln51_6_fu_395_p2;
wire   [5:0] select_ln52_22_fu_557_p3;
wire   [18:0] trunc_ln44_5_fu_183_p4;
wire   [2:0] tmp_52_fu_605_p4;
wire   [0:0] tmp_54_fu_629_p3;
wire   [0:0] icmp_ln52_15_fu_615_p2;
wire   [0:0] or_ln52_23_fu_637_p2;
wire   [0:0] tmp_51_fu_597_p3;
wire   [0:0] and_ln52_7_fu_643_p2;
wire   [5:0] trunc_ln52_5_fu_587_p4;
wire   [5:0] zext_ln52_7_fu_649_p1;
wire   [8:0] tmp_55_fu_659_p4;
wire   [5:0] add_ln52_7_fu_653_p2;
wire   [0:0] tmp_53_fu_621_p3;
wire   [0:0] tmp_56_fu_675_p3;
wire   [0:0] not_tmp_131_fu_683_p2;
wire   [0:0] icmp_ln52_16_fu_669_p2;
wire   [0:0] and_ln52_38_fu_689_p2;
wire   [0:0] empty_57_fu_695_p2;
wire   [0:0] tmp_50_fu_579_p3;
wire   [0:0] xor_ln52_7_fu_707_p2;
wire   [0:0] or_ln52_24_fu_701_p2;
wire   [5:0] select_ln52_23_fu_719_p3;
wire   [0:0] or_ln52_25_fu_713_p2;
wire   [5:0] select_ln52_24_fu_727_p3;
wire   [0:0] icmp_ln51_7_fu_573_p2;
wire   [5:0] select_ln52_25_fu_735_p3;
wire   [18:0] trunc_ln44_6_fu_193_p4;
wire   [2:0] tmp_59_fu_783_p4;
wire   [0:0] tmp_61_fu_807_p3;
wire   [0:0] icmp_ln52_17_fu_793_p2;
wire   [0:0] or_ln52_26_fu_815_p2;
wire   [0:0] tmp_58_fu_775_p3;
wire   [0:0] and_ln52_8_fu_821_p2;
wire   [5:0] trunc_ln52_6_fu_765_p4;
wire   [5:0] zext_ln52_8_fu_827_p1;
wire   [8:0] tmp_62_fu_837_p4;
wire   [5:0] add_ln52_8_fu_831_p2;
wire   [0:0] tmp_60_fu_799_p3;
wire   [0:0] tmp_63_fu_853_p3;
wire   [0:0] not_tmp_138_fu_861_p2;
wire   [0:0] icmp_ln52_18_fu_847_p2;
wire   [0:0] and_ln52_40_fu_867_p2;
wire   [0:0] empty_58_fu_873_p2;
wire   [0:0] tmp_57_fu_757_p3;
wire   [0:0] xor_ln52_8_fu_885_p2;
wire   [0:0] or_ln52_27_fu_879_p2;
wire   [5:0] select_ln52_26_fu_897_p3;
wire   [0:0] or_ln52_28_fu_891_p2;
wire   [5:0] select_ln52_27_fu_905_p3;
wire   [0:0] icmp_ln51_8_fu_751_p2;
wire   [5:0] select_ln52_28_fu_913_p3;
wire   [18:0] trunc_ln44_7_fu_203_p4;
wire   [2:0] tmp_66_fu_961_p4;
wire   [0:0] tmp_68_fu_985_p3;
wire   [0:0] icmp_ln52_19_fu_971_p2;
wire   [0:0] or_ln52_29_fu_993_p2;
wire   [0:0] tmp_65_fu_953_p3;
wire   [0:0] and_ln52_9_fu_999_p2;
wire   [5:0] trunc_ln52_7_fu_943_p4;
wire   [5:0] zext_ln52_9_fu_1005_p1;
wire   [8:0] tmp_69_fu_1015_p4;
wire   [5:0] add_ln52_9_fu_1009_p2;
wire   [0:0] tmp_67_fu_977_p3;
wire   [0:0] tmp_70_fu_1031_p3;
wire   [0:0] not_tmp_145_fu_1039_p2;
wire   [0:0] icmp_ln52_20_fu_1025_p2;
wire   [0:0] and_ln52_42_fu_1045_p2;
wire   [0:0] empty_59_fu_1051_p2;
wire   [0:0] tmp_64_fu_935_p3;
wire   [0:0] xor_ln52_9_fu_1063_p2;
wire   [0:0] or_ln52_30_fu_1057_p2;
wire   [5:0] select_ln52_29_fu_1075_p3;
wire   [0:0] or_ln52_31_fu_1069_p2;
wire   [5:0] select_ln52_30_fu_1083_p3;
wire   [0:0] icmp_ln51_9_fu_929_p2;
wire   [5:0] select_ln52_31_fu_1091_p3;
wire   [18:0] trunc_ln44_8_fu_213_p4;
wire   [2:0] tmp_73_fu_1139_p4;
wire   [0:0] tmp_75_fu_1163_p3;
wire   [0:0] icmp_ln52_21_fu_1149_p2;
wire   [0:0] or_ln52_32_fu_1171_p2;
wire   [0:0] tmp_72_fu_1131_p3;
wire   [0:0] and_ln52_10_fu_1177_p2;
wire   [5:0] trunc_ln52_8_fu_1121_p4;
wire   [5:0] zext_ln52_10_fu_1183_p1;
wire   [8:0] tmp_76_fu_1193_p4;
wire   [5:0] add_ln52_10_fu_1187_p2;
wire   [0:0] tmp_74_fu_1155_p3;
wire   [0:0] tmp_77_fu_1209_p3;
wire   [0:0] not_tmp_152_fu_1217_p2;
wire   [0:0] icmp_ln52_22_fu_1203_p2;
wire   [0:0] and_ln52_43_fu_1223_p2;
wire   [0:0] empty_60_fu_1229_p2;
wire   [0:0] tmp_71_fu_1113_p3;
wire   [0:0] xor_ln52_10_fu_1241_p2;
wire   [0:0] or_ln52_33_fu_1235_p2;
wire   [5:0] select_ln52_32_fu_1253_p3;
wire   [0:0] or_ln52_34_fu_1247_p2;
wire   [5:0] select_ln52_33_fu_1261_p3;
wire   [0:0] icmp_ln51_10_fu_1107_p2;
wire   [5:0] select_ln52_34_fu_1269_p3;
wire   [5:0] out_data_10_fu_1277_p3;
wire   [5:0] out_data_9_fu_1099_p3;
wire   [5:0] out_data_8_fu_921_p3;
wire   [5:0] out_data_7_fu_743_p3;
wire   [5:0] out_data_6_fu_565_p3;
wire   [5:0] out_data_fu_387_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
#0 i1_fu_144 = 7'd0;
end

myproject_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        i1_fu_144 <= i_fu_1302_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_1308_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i1_load = 7'd0;
    end else begin
        ap_sig_allocacmp_i1_load = i1_fu_144;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer10_out_blk_n = layer10_out_full_n;
    end else begin
        layer10_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        layer10_out_write = 1'b1;
    end else begin
        layer10_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer8_out_blk_n = layer8_out_empty_n;
    end else begin
        layer8_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        layer8_out_read = 1'b1;
    end else begin
        layer8_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_10_fu_1187_p2 = (trunc_ln52_8_fu_1121_p4 + zext_ln52_10_fu_1183_p1);

assign add_ln52_6_fu_475_p2 = (trunc_ln52_s_fu_409_p4 + zext_ln52_6_fu_471_p1);

assign add_ln52_7_fu_653_p2 = (trunc_ln52_5_fu_587_p4 + zext_ln52_7_fu_649_p1);

assign add_ln52_8_fu_831_p2 = (trunc_ln52_6_fu_765_p4 + zext_ln52_8_fu_827_p1);

assign add_ln52_9_fu_1009_p2 = (trunc_ln52_7_fu_943_p4 + zext_ln52_9_fu_1005_p1);

assign add_ln52_fu_297_p2 = (trunc_ln2_fu_237_p4 + zext_ln52_fu_293_p1);

assign and_ln52_10_fu_1177_p2 = (tmp_72_fu_1131_p3 & or_ln52_32_fu_1171_p2);

assign and_ln52_34_fu_333_p2 = (tmp_43_fu_319_p3 | not_tmp_117_fu_327_p2);

assign and_ln52_36_fu_511_p2 = (tmp_49_fu_497_p3 | not_tmp_124_fu_505_p2);

assign and_ln52_38_fu_689_p2 = (tmp_56_fu_675_p3 | not_tmp_131_fu_683_p2);

assign and_ln52_40_fu_867_p2 = (tmp_63_fu_853_p3 | not_tmp_138_fu_861_p2);

assign and_ln52_42_fu_1045_p2 = (tmp_70_fu_1031_p3 | not_tmp_145_fu_1039_p2);

assign and_ln52_43_fu_1223_p2 = (tmp_77_fu_1209_p3 | not_tmp_152_fu_1217_p2);

assign and_ln52_6_fu_465_p2 = (tmp_45_fu_419_p3 & or_ln52_20_fu_459_p2);

assign and_ln52_7_fu_643_p2 = (tmp_51_fu_597_p3 & or_ln52_23_fu_637_p2);

assign and_ln52_8_fu_821_p2 = (tmp_58_fu_775_p3 & or_ln52_26_fu_815_p2);

assign and_ln52_9_fu_999_p2 = (tmp_65_fu_953_p3 & or_ln52_29_fu_993_p2);

assign and_ln52_fu_287_p2 = (tmp_40_fu_247_p3 & or_ln52_fu_281_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | (layer10_out_full_n == 1'b0) | (layer8_out_empty_n == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign empty_56_fu_517_p2 = (icmp_ln52_14_fu_491_p2 & and_ln52_36_fu_511_p2);

assign empty_57_fu_695_p2 = (icmp_ln52_16_fu_669_p2 & and_ln52_38_fu_689_p2);

assign empty_58_fu_873_p2 = (icmp_ln52_18_fu_847_p2 & and_ln52_40_fu_867_p2);

assign empty_59_fu_1051_p2 = (icmp_ln52_20_fu_1025_p2 & and_ln52_42_fu_1045_p2);

assign empty_60_fu_1229_p2 = (icmp_ln52_22_fu_1203_p2 & and_ln52_43_fu_1223_p2);

assign empty_fu_339_p2 = (icmp_ln52_12_fu_313_p2 & and_ln52_34_fu_333_p2);

assign i_fu_1302_p2 = (ap_sig_allocacmp_i1_load + 7'd1);

assign icmp_ln41_fu_1308_p2 = ((ap_sig_allocacmp_i1_load == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln51_10_fu_1107_p2 = (($signed(trunc_ln44_8_fu_213_p4) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_6_fu_395_p2 = (($signed(trunc_ln44_s_fu_173_p4) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_7_fu_573_p2 = (($signed(trunc_ln44_5_fu_183_p4) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_8_fu_751_p2 = (($signed(trunc_ln44_6_fu_193_p4) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_9_fu_929_p2 = (($signed(trunc_ln44_7_fu_203_p4) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_223_p2 = (($signed(trunc_ln44_fu_169_p1) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln52_12_fu_313_p2 = ((tmp_s_fu_303_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_13_fu_437_p2 = ((tmp_39_fu_427_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_14_fu_491_p2 = ((tmp_48_fu_481_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_15_fu_615_p2 = ((tmp_52_fu_605_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_16_fu_669_p2 = ((tmp_55_fu_659_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_17_fu_793_p2 = ((tmp_59_fu_783_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_18_fu_847_p2 = ((tmp_62_fu_837_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_19_fu_971_p2 = ((tmp_66_fu_961_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_20_fu_1025_p2 = ((tmp_69_fu_1015_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_21_fu_1149_p2 = ((tmp_73_fu_1139_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_22_fu_1203_p2 = ((tmp_76_fu_1193_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_259_p2 = ((trunc_ln52_fu_255_p1 != 3'd0) ? 1'b1 : 1'b0);

assign layer10_out_din = {{{{{{out_data_10_fu_1277_p3}, {out_data_9_fu_1099_p3}}, {out_data_8_fu_921_p3}}, {out_data_7_fu_743_p3}}, {out_data_6_fu_565_p3}}, {out_data_fu_387_p3}};

assign not_tmp_117_fu_327_p2 = (tmp_41_fu_265_p3 ^ 1'd1);

assign not_tmp_124_fu_505_p2 = (tmp_46_fu_443_p3 ^ 1'd1);

assign not_tmp_131_fu_683_p2 = (tmp_53_fu_621_p3 ^ 1'd1);

assign not_tmp_138_fu_861_p2 = (tmp_60_fu_799_p3 ^ 1'd1);

assign not_tmp_145_fu_1039_p2 = (tmp_67_fu_977_p3 ^ 1'd1);

assign not_tmp_152_fu_1217_p2 = (tmp_74_fu_1155_p3 ^ 1'd1);

assign or_ln52_18_fu_345_p2 = (tmp_fu_229_p3 | empty_fu_339_p2);

assign or_ln52_19_fu_357_p2 = (xor_ln52_fu_351_p2 | tmp_fu_229_p3);

assign or_ln52_20_fu_459_p2 = (tmp_47_fu_451_p3 | icmp_ln52_13_fu_437_p2);

assign or_ln52_21_fu_523_p2 = (tmp_44_fu_401_p3 | empty_56_fu_517_p2);

assign or_ln52_22_fu_535_p2 = (xor_ln52_6_fu_529_p2 | tmp_44_fu_401_p3);

assign or_ln52_23_fu_637_p2 = (tmp_54_fu_629_p3 | icmp_ln52_15_fu_615_p2);

assign or_ln52_24_fu_701_p2 = (tmp_50_fu_579_p3 | empty_57_fu_695_p2);

assign or_ln52_25_fu_713_p2 = (xor_ln52_7_fu_707_p2 | tmp_50_fu_579_p3);

assign or_ln52_26_fu_815_p2 = (tmp_61_fu_807_p3 | icmp_ln52_17_fu_793_p2);

assign or_ln52_27_fu_879_p2 = (tmp_57_fu_757_p3 | empty_58_fu_873_p2);

assign or_ln52_28_fu_891_p2 = (xor_ln52_8_fu_885_p2 | tmp_57_fu_757_p3);

assign or_ln52_29_fu_993_p2 = (tmp_68_fu_985_p3 | icmp_ln52_19_fu_971_p2);

assign or_ln52_30_fu_1057_p2 = (tmp_64_fu_935_p3 | empty_59_fu_1051_p2);

assign or_ln52_31_fu_1069_p2 = (xor_ln52_9_fu_1063_p2 | tmp_64_fu_935_p3);

assign or_ln52_32_fu_1171_p2 = (tmp_75_fu_1163_p3 | icmp_ln52_21_fu_1149_p2);

assign or_ln52_33_fu_1235_p2 = (tmp_71_fu_1113_p3 | empty_60_fu_1229_p2);

assign or_ln52_34_fu_1247_p2 = (xor_ln52_10_fu_1241_p2 | tmp_71_fu_1113_p3);

assign or_ln52_fu_281_p2 = (tmp_42_fu_273_p3 | icmp_ln52_fu_259_p2);

assign out_data_10_fu_1277_p3 = ((icmp_ln51_10_fu_1107_p2[0:0] == 1'b1) ? select_ln52_34_fu_1269_p3 : 6'd0);

assign out_data_6_fu_565_p3 = ((icmp_ln51_6_fu_395_p2[0:0] == 1'b1) ? select_ln52_22_fu_557_p3 : 6'd0);

assign out_data_7_fu_743_p3 = ((icmp_ln51_7_fu_573_p2[0:0] == 1'b1) ? select_ln52_25_fu_735_p3 : 6'd0);

assign out_data_8_fu_921_p3 = ((icmp_ln51_8_fu_751_p2[0:0] == 1'b1) ? select_ln52_28_fu_913_p3 : 6'd0);

assign out_data_9_fu_1099_p3 = ((icmp_ln51_9_fu_929_p2[0:0] == 1'b1) ? select_ln52_31_fu_1091_p3 : 6'd0);

assign out_data_fu_387_p3 = ((icmp_ln51_fu_223_p2[0:0] == 1'b1) ? select_ln52_19_fu_379_p3 : 6'd0);

assign select_ln52_18_fu_371_p3 = ((or_ln52_18_fu_345_p2[0:0] == 1'b1) ? select_ln52_fu_363_p3 : 6'd63);

assign select_ln52_19_fu_379_p3 = ((or_ln52_19_fu_357_p2[0:0] == 1'b1) ? select_ln52_18_fu_371_p3 : add_ln52_fu_297_p2);

assign select_ln52_20_fu_541_p3 = ((tmp_44_fu_401_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_6_fu_475_p2);

assign select_ln52_21_fu_549_p3 = ((or_ln52_21_fu_523_p2[0:0] == 1'b1) ? select_ln52_20_fu_541_p3 : 6'd63);

assign select_ln52_22_fu_557_p3 = ((or_ln52_22_fu_535_p2[0:0] == 1'b1) ? select_ln52_21_fu_549_p3 : add_ln52_6_fu_475_p2);

assign select_ln52_23_fu_719_p3 = ((tmp_50_fu_579_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_7_fu_653_p2);

assign select_ln52_24_fu_727_p3 = ((or_ln52_24_fu_701_p2[0:0] == 1'b1) ? select_ln52_23_fu_719_p3 : 6'd63);

assign select_ln52_25_fu_735_p3 = ((or_ln52_25_fu_713_p2[0:0] == 1'b1) ? select_ln52_24_fu_727_p3 : add_ln52_7_fu_653_p2);

assign select_ln52_26_fu_897_p3 = ((tmp_57_fu_757_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_8_fu_831_p2);

assign select_ln52_27_fu_905_p3 = ((or_ln52_27_fu_879_p2[0:0] == 1'b1) ? select_ln52_26_fu_897_p3 : 6'd63);

assign select_ln52_28_fu_913_p3 = ((or_ln52_28_fu_891_p2[0:0] == 1'b1) ? select_ln52_27_fu_905_p3 : add_ln52_8_fu_831_p2);

assign select_ln52_29_fu_1075_p3 = ((tmp_64_fu_935_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_9_fu_1009_p2);

assign select_ln52_30_fu_1083_p3 = ((or_ln52_30_fu_1057_p2[0:0] == 1'b1) ? select_ln52_29_fu_1075_p3 : 6'd63);

assign select_ln52_31_fu_1091_p3 = ((or_ln52_31_fu_1069_p2[0:0] == 1'b1) ? select_ln52_30_fu_1083_p3 : add_ln52_9_fu_1009_p2);

assign select_ln52_32_fu_1253_p3 = ((tmp_71_fu_1113_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_10_fu_1187_p2);

assign select_ln52_33_fu_1261_p3 = ((or_ln52_33_fu_1235_p2[0:0] == 1'b1) ? select_ln52_32_fu_1253_p3 : 6'd63);

assign select_ln52_34_fu_1269_p3 = ((or_ln52_34_fu_1247_p2[0:0] == 1'b1) ? select_ln52_33_fu_1261_p3 : add_ln52_10_fu_1187_p2);

assign select_ln52_fu_363_p3 = ((tmp_fu_229_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_fu_297_p2);

assign start_out = real_start;

assign tmp_39_fu_427_p4 = {{layer8_out_dout[21:19]}};

assign tmp_40_fu_247_p3 = layer8_out_dout[32'd3];

assign tmp_41_fu_265_p3 = layer8_out_dout[32'd9];

assign tmp_42_fu_273_p3 = layer8_out_dout[32'd4];

assign tmp_43_fu_319_p3 = add_ln52_fu_297_p2[32'd5];

assign tmp_44_fu_401_p3 = layer8_out_dout[32'd37];

assign tmp_45_fu_419_p3 = layer8_out_dout[32'd22];

assign tmp_46_fu_443_p3 = layer8_out_dout[32'd28];

assign tmp_47_fu_451_p3 = layer8_out_dout[32'd23];

assign tmp_48_fu_481_p4 = {{layer8_out_dout[37:29]}};

assign tmp_49_fu_497_p3 = add_ln52_6_fu_475_p2[32'd5];

assign tmp_50_fu_579_p3 = layer8_out_dout[32'd56];

assign tmp_51_fu_597_p3 = layer8_out_dout[32'd41];

assign tmp_52_fu_605_p4 = {{layer8_out_dout[40:38]}};

assign tmp_53_fu_621_p3 = layer8_out_dout[32'd47];

assign tmp_54_fu_629_p3 = layer8_out_dout[32'd42];

assign tmp_55_fu_659_p4 = {{layer8_out_dout[56:48]}};

assign tmp_56_fu_675_p3 = add_ln52_7_fu_653_p2[32'd5];

assign tmp_57_fu_757_p3 = layer8_out_dout[32'd75];

assign tmp_58_fu_775_p3 = layer8_out_dout[32'd60];

assign tmp_59_fu_783_p4 = {{layer8_out_dout[59:57]}};

assign tmp_60_fu_799_p3 = layer8_out_dout[32'd66];

assign tmp_61_fu_807_p3 = layer8_out_dout[32'd61];

assign tmp_62_fu_837_p4 = {{layer8_out_dout[75:67]}};

assign tmp_63_fu_853_p3 = add_ln52_8_fu_831_p2[32'd5];

assign tmp_64_fu_935_p3 = layer8_out_dout[32'd94];

assign tmp_65_fu_953_p3 = layer8_out_dout[32'd79];

assign tmp_66_fu_961_p4 = {{layer8_out_dout[78:76]}};

assign tmp_67_fu_977_p3 = layer8_out_dout[32'd85];

assign tmp_68_fu_985_p3 = layer8_out_dout[32'd80];

assign tmp_69_fu_1015_p4 = {{layer8_out_dout[94:86]}};

assign tmp_70_fu_1031_p3 = add_ln52_9_fu_1009_p2[32'd5];

assign tmp_71_fu_1113_p3 = layer8_out_dout[32'd113];

assign tmp_72_fu_1131_p3 = layer8_out_dout[32'd98];

assign tmp_73_fu_1139_p4 = {{layer8_out_dout[97:95]}};

assign tmp_74_fu_1155_p3 = layer8_out_dout[32'd104];

assign tmp_75_fu_1163_p3 = layer8_out_dout[32'd99];

assign tmp_76_fu_1193_p4 = {{layer8_out_dout[113:105]}};

assign tmp_77_fu_1209_p3 = add_ln52_10_fu_1187_p2[32'd5];

assign tmp_fu_229_p3 = layer8_out_dout[32'd18];

assign tmp_s_fu_303_p4 = {{layer8_out_dout[18:10]}};

assign trunc_ln2_fu_237_p4 = {{layer8_out_dout[9:4]}};

assign trunc_ln44_5_fu_183_p4 = {{layer8_out_dout[56:38]}};

assign trunc_ln44_6_fu_193_p4 = {{layer8_out_dout[75:57]}};

assign trunc_ln44_7_fu_203_p4 = {{layer8_out_dout[94:76]}};

assign trunc_ln44_8_fu_213_p4 = {{layer8_out_dout[113:95]}};

assign trunc_ln44_fu_169_p1 = layer8_out_dout[18:0];

assign trunc_ln44_s_fu_173_p4 = {{layer8_out_dout[37:19]}};

assign trunc_ln52_5_fu_587_p4 = {{layer8_out_dout[47:42]}};

assign trunc_ln52_6_fu_765_p4 = {{layer8_out_dout[66:61]}};

assign trunc_ln52_7_fu_943_p4 = {{layer8_out_dout[85:80]}};

assign trunc_ln52_8_fu_1121_p4 = {{layer8_out_dout[104:99]}};

assign trunc_ln52_fu_255_p1 = layer8_out_dout[2:0];

assign trunc_ln52_s_fu_409_p4 = {{layer8_out_dout[28:23]}};

assign xor_ln52_10_fu_1241_p2 = (empty_60_fu_1229_p2 ^ 1'd1);

assign xor_ln52_6_fu_529_p2 = (empty_56_fu_517_p2 ^ 1'd1);

assign xor_ln52_7_fu_707_p2 = (empty_57_fu_695_p2 ^ 1'd1);

assign xor_ln52_8_fu_885_p2 = (empty_58_fu_873_p2 ^ 1'd1);

assign xor_ln52_9_fu_1063_p2 = (empty_59_fu_1051_p2 ^ 1'd1);

assign xor_ln52_fu_351_p2 = (empty_fu_339_p2 ^ 1'd1);

assign zext_ln52_10_fu_1183_p1 = and_ln52_10_fu_1177_p2;

assign zext_ln52_6_fu_471_p1 = and_ln52_6_fu_465_p2;

assign zext_ln52_7_fu_649_p1 = and_ln52_7_fu_643_p2;

assign zext_ln52_8_fu_827_p1 = and_ln52_8_fu_821_p2;

assign zext_ln52_9_fu_1005_p1 = and_ln52_9_fu_999_p2;

assign zext_ln52_fu_293_p1 = and_ln52_fu_287_p2;

endmodule //myproject_relu_array_ap_fixed_6u_array_ap_ufixed_6_0_4_0_0_6u_relu_config10_s
