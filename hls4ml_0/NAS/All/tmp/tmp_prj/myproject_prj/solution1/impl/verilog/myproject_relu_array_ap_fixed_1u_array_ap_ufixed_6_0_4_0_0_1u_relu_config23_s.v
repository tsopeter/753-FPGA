// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_1u_array_ap_ufixed_6_0_4_0_0_1u_relu_config23_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer22_out_dout,
        layer22_out_empty_n,
        layer22_out_read,
        layer22_out_num_data_valid,
        layer22_out_fifo_cap,
        layer23_out_din,
        layer23_out_full_n,
        layer23_out_write,
        layer23_out_num_data_valid,
        layer23_out_fifo_cap
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [36:0] layer22_out_dout;
input   layer22_out_empty_n;
output   layer22_out_read;
input  [1:0] layer22_out_num_data_valid;
input  [1:0] layer22_out_fifo_cap;
output  [5:0] layer23_out_din;
input   layer23_out_full_n;
output   layer23_out_write;
input  [1:0] layer23_out_num_data_valid;
input  [1:0] layer23_out_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer22_out_read;
reg layer23_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer22_out_blk_n;
reg    layer23_out_blk_n;
wire    ap_CS_fsm_state5;
reg   [36:0] layer22_out_read_reg_216;
reg    ap_block_state1;
reg   [0:0] tmp_reg_225;
wire   [10:0] trunc_ln52_fu_71_p1;
reg   [10:0] trunc_ln52_reg_232;
reg   [18:0] tmp_5_reg_237;
wire   [0:0] icmp_ln52_fu_83_p2;
reg   [0:0] icmp_ln52_reg_242;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln52_1_fu_88_p2;
reg   [0:0] icmp_ln52_1_reg_247;
wire   [0:0] icmp_ln51_fu_93_p2;
reg   [0:0] icmp_ln51_reg_252;
wire    ap_CS_fsm_state3;
wire   [5:0] add_ln52_fu_143_p2;
reg   [5:0] add_ln52_reg_257;
wire   [0:0] empty_fu_169_p2;
reg   [0:0] empty_reg_263;
wire   [5:0] p_02_fu_209_p3;
reg   [5:0] p_02_reg_269;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_126_fu_121_p3;
wire   [0:0] or_ln52_fu_128_p2;
wire   [0:0] tmp_124_fu_107_p3;
wire   [0:0] and_ln52_fu_133_p2;
wire   [5:0] trunc_ln_fu_98_p4;
wire   [5:0] zext_ln52_fu_139_p1;
wire   [0:0] tmp_125_fu_114_p3;
wire   [0:0] tmp_127_fu_149_p3;
wire   [0:0] not_tmp_3_fu_157_p2;
wire   [0:0] and_ln52_1_fu_163_p2;
wire   [0:0] xor_ln52_fu_178_p2;
wire   [0:0] or_ln52_1_fu_174_p2;
wire   [5:0] select_ln52_fu_188_p3;
wire   [0:0] or_ln52_2_fu_183_p2;
wire   [5:0] select_ln52_1_fu_194_p3;
wire   [5:0] select_ln52_2_fu_202_p3;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((layer23_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln52_reg_257 <= add_ln52_fu_143_p2;
        empty_reg_263 <= empty_fu_169_p2;
        icmp_ln51_reg_252 <= icmp_ln51_fu_93_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln52_1_reg_247 <= icmp_ln52_1_fu_88_p2;
        icmp_ln52_reg_242 <= icmp_ln52_fu_83_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer22_out_read_reg_216 <= layer22_out_dout;
        tmp_5_reg_237 <= {{layer22_out_dout[36:18]}};
        tmp_reg_225 <= layer22_out_dout[32'd36];
        trunc_ln52_reg_232 <= trunc_ln52_fu_71_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_02_reg_269 <= p_02_fu_209_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((layer23_out_full_n == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((layer23_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((layer23_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer22_out_blk_n = layer22_out_empty_n;
    end else begin
        layer22_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer22_out_read = 1'b1;
    end else begin
        layer22_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        layer23_out_blk_n = layer23_out_full_n;
    end else begin
        layer23_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((layer23_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        layer23_out_write = 1'b1;
    end else begin
        layer23_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((layer23_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_fu_143_p2 = (trunc_ln_fu_98_p4 + zext_ln52_fu_139_p1);

assign and_ln52_1_fu_163_p2 = (tmp_127_fu_149_p3 | not_tmp_3_fu_157_p2);

assign and_ln52_fu_133_p2 = (tmp_124_fu_107_p3 & or_ln52_fu_128_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((layer22_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign empty_fu_169_p2 = (icmp_ln52_1_reg_247 & and_ln52_1_fu_163_p2);

assign icmp_ln51_fu_93_p2 = (($signed(layer22_out_read_reg_216) > $signed(37'd0)) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_88_p2 = ((tmp_5_reg_237 == 19'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_83_p2 = ((trunc_ln52_reg_232 != 11'd0) ? 1'b1 : 1'b0);

assign layer23_out_din = p_02_reg_269;

assign not_tmp_3_fu_157_p2 = (tmp_125_fu_114_p3 ^ 1'd1);

assign or_ln52_1_fu_174_p2 = (tmp_reg_225 | empty_reg_263);

assign or_ln52_2_fu_183_p2 = (xor_ln52_fu_178_p2 | tmp_reg_225);

assign or_ln52_fu_128_p2 = (tmp_126_fu_121_p3 | icmp_ln52_reg_242);

assign p_02_fu_209_p3 = ((icmp_ln51_reg_252[0:0] == 1'b1) ? select_ln52_2_fu_202_p3 : 6'd0);

assign select_ln52_1_fu_194_p3 = ((or_ln52_1_fu_174_p2[0:0] == 1'b1) ? select_ln52_fu_188_p3 : 6'd63);

assign select_ln52_2_fu_202_p3 = ((or_ln52_2_fu_183_p2[0:0] == 1'b1) ? select_ln52_1_fu_194_p3 : add_ln52_reg_257);

assign select_ln52_fu_188_p3 = ((tmp_reg_225[0:0] == 1'b1) ? 6'd0 : add_ln52_reg_257);

assign start_out = real_start;

assign tmp_124_fu_107_p3 = layer22_out_read_reg_216[32'd11];

assign tmp_125_fu_114_p3 = layer22_out_read_reg_216[32'd17];

assign tmp_126_fu_121_p3 = layer22_out_read_reg_216[32'd12];

assign tmp_127_fu_149_p3 = add_ln52_fu_143_p2[32'd5];

assign trunc_ln52_fu_71_p1 = layer22_out_dout[10:0];

assign trunc_ln_fu_98_p4 = {{layer22_out_read_reg_216[17:12]}};

assign xor_ln52_fu_178_p2 = (empty_reg_263 ^ 1'd1);

assign zext_ln52_fu_139_p1 = and_ln52_fu_133_p2;

endmodule //myproject_relu_array_ap_fixed_1u_array_ap_ufixed_6_0_4_0_0_1u_relu_config23_s
