-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config5_mult_s_w5_ROMpcA is 
    generic(
             DataWidth     : integer := 22; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 50
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config5_mult_s_w5_ROMpcA is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0010111111111010000100", 1 => "0010111011111110000011", 2 => "0100111100111101000001", 3 => "1111111101000000111110", 
    4 => "0001000001000001000010", 5 => "0000000001111100111111", 6 => "1110000000111100000010", 7 => "1011111110111100000000", 
    8 => "0111111111111001111011", 9 => "0110111101000011000010", 10 => "1001000000000011000000", 11 => "0100000001111101111111", 
    12 => "1111000001111110000000", 13 => "1111000000111110000001", 14 => "0111111100000001000000", 15 => "0110000000111111111101", 
    16 => "1111000001111100111111", 17 => "0000000011111110000101", 18 => "0111111110000010000011", 19 => "1100000101000000000011", 
    20 => "0010111101111111000010", 21 => "1100000010111111000000", 22 => "0010111111000010000001", 23 => "0100000000111011000110", 
    24 => "1110000000000011111011", 25 => "0000111110000100000011", 26 => "0000111101111100000011", 27 => "1011111011000001111110", 
    28 => "0010111111000000111111", 29 => "0011111101111110000011", 30 => "1100000001000110111011", 31 => "1101000001111111111010", 
    32 => "0001000000000111111011", 33 => "1110000011000101000000", 34 => "1110000001000010000010", 35 => "1101111110111101111110", 
    36 => "0101000100111110000011", 37 => "0110000001111101000000", 38 => "0010000100000000111100", 39 => "0001111110000001000000", 
    40 => "1011000100111111000001", 41 => "0001000000000010111111", 42 => "0011111111000101000101", 43 => "1111111100111111111101", 
    44 => "0000000001000110111110", 45 => "0000000011000011111110", 46 => "0000111111111101111101", 47 => "0011000000000000111100", 
    48 => "0010111111000100111101", 49 => "0010000000000001000101");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

