-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config14_mult_s_w14_R4jc is 
    generic(
             DataWidth     : integer := 34; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 54
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config14_mult_s_w14_R4jc is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000111010000011111110111011000010", 1 => "1111000010000001111110111100000101", 2 => "0001111111111101000010000100000001", 3 => "0001000100111110111111111100111111", 
    4 => "0010000000000000000010000010000001", 5 => "0100111101000110000100111010000100", 6 => "1100111110000100000000111111111011", 7 => "1101000100111111111110000011111111", 
    8 => "0000000001000001000000111110111110", 9 => "1111111110111111000010000010000110", 10 => "0000000100111101000101111101000010", 11 => "0000000001000000111101111100000111", 
    12 => "1111000001111110000001111110000110", 13 => "1101111101111111111001000001111011", 14 => "1110000000000001111110111111000100", 15 => "1011000101000100000001111111000000", 
    16 => "1101111111111011111010000000000000", 17 => "0011000101111101000000111101000010", 18 => "1101111111000001000000000000000100", 19 => "0010000100111111000110111010000000", 
    20 => "0001000001000010000010000000000011", 21 => "1111000100000010111111111101111100", 22 => "1010111110000001111111000000000111", 23 => "1110111111000000000001000001111111", 
    24 => "0001111111000000000100000001000010", 25 => "1110111010000011000100111110111101", 26 => "1101000001111111000000111010000010", 27 => "1111000101000000111110000011000011", 
    28 => "1100111101000001000101111101000011", 29 => "0010000011111111000101000010111101", 30 => "0100111111000010111101000001111110", 31 => "1011000011000000111111000001000100", 
    32 => "0001111101000011000101000110000101", 33 => "1110111011111110000000000010111011", 34 => "0001111011111111000100111001111110", 35 => "0011000010000000111100000001111101", 
    36 => "0000111011000010111010000010111010", 37 => "1111111110111110000010000000111101", 38 => "0100111111000001111110000010111101", 39 => "1110111001111011000000000000000100", 
    40 => "0010000011000001000110111110000011", 41 => "0111111100000000000010000011111011", 42 => "1110111110111101000011111101000010", 43 => "1111000001000011000001000001111011", 
    44 => "1111000100000100000000111110111100", 45 => "1011000001111111111010000001000100", 46 => "0010000000111100000001000001000110", 47 => "0010000010111110000101000000111100", 
    48 => "1111111111000001111101000100111111", 49 => "0001000011111011000010000011000001", 50 => "1110111010000100111011000000000111", 51 => "1100000010111111000011000010000011", 
    52 => "0110000001111111111101111111000000", 53 => "0100000000111111000011111111111110");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

