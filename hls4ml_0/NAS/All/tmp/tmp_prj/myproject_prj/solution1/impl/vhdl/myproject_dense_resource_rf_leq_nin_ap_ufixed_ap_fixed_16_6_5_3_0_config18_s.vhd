-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (5 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (5 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (5 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (5 downto 0);
    data_4_val : IN STD_LOGIC_VECTOR (5 downto 0);
    data_5_val : IN STD_LOGIC_VECTOR (5 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln46_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w18_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal w18_q0 : STD_LOGIC_VECTOR (118 downto 0);
    signal do_init_reg_189 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index3_reg_205 : STD_LOGIC_VECTOR (1 downto 0);
    signal data_0_val95_rewind_reg_220 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_1_val96_rewind_reg_234 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_2_val97_rewind_reg_248 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_3_val98_rewind_reg_262 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_4_val99_rewind_reg_276 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_5_val100_rewind_reg_290 : STD_LOGIC_VECTOR (5 downto 0);
    signal res_0_022_reg_304 : STD_LOGIC_VECTOR (13 downto 0);
    signal res_1_020_reg_318 : STD_LOGIC_VECTOR (13 downto 0);
    signal res_2_018_reg_332 : STD_LOGIC_VECTOR (13 downto 0);
    signal res_3_016_reg_346 : STD_LOGIC_VECTOR (13 downto 0);
    signal res_4_014_reg_360 : STD_LOGIC_VECTOR (13 downto 0);
    signal res_5_012_reg_374 : STD_LOGIC_VECTOR (13 downto 0);
    signal res_6_010_reg_388 : STD_LOGIC_VECTOR (13 downto 0);
    signal res_7_08_reg_402 : STD_LOGIC_VECTOR (13 downto 0);
    signal res_8_06_reg_416 : STD_LOGIC_VECTOR (13 downto 0);
    signal res_9_04_reg_430 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_index_fu_521_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_index_reg_1358 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln46_reg_1363 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_670_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal empty_96_fu_725_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_97_fu_780_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_98_fu_835_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_99_fu_890_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_100_fu_945_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_101_fu_1000_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_102_fu_1055_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_103_fu_1110_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln46_fu_1165_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_do_init_phi_fu_193_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_w_index3_phi_fu_209_p6 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_data_0_val95_phi_phi_fu_448_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_data_1_val96_phi_phi_fu_460_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_data_2_val97_phi_phi_fu_472_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_data_3_val98_phi_phi_fu_484_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_data_4_val99_phi_phi_fu_496_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_data_5_val100_phi_phi_fu_508_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_0_val95_phi_reg_444 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_data_0_val95_phi_reg_444 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_1_val96_phi_reg_456 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_data_1_val96_phi_reg_456 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_2_val97_phi_reg_468 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_data_2_val97_phi_reg_468 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_3_val98_phi_reg_480 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_data_3_val98_phi_reg_480 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_4_val99_phi_reg_492 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_data_4_val99_phi_reg_492 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_5_val100_phi_reg_504 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_data_5_val100_phi_reg_504 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln46_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w18_ce0_local : STD_LOGIC;
    signal a_fu_573_p7 : STD_LOGIC_VECTOR (5 downto 0);
    signal a_fu_573_p9 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_fu_593_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal a_69_fu_605_p7 : STD_LOGIC_VECTOR (5 downto 0);
    signal a_69_fu_605_p9 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_364_fu_625_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_369_fu_647_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln73_69_fu_635_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln73_369_fu_647_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1233_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln46_23_fu_569_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln58_368_fu_657_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln58_369_fu_660_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_365_fu_674_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_366_fu_688_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_371_fu_702_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_371_fu_702_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1242_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln46_22_fu_565_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln58_370_fu_712_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln58_371_fu_715_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_367_fu_729_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_368_fu_743_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_373_fu_757_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_373_fu_757_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1251_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln46_21_fu_561_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln58_372_fu_767_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln58_373_fu_770_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_369_fu_784_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_370_fu_798_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_375_fu_812_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_375_fu_812_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1260_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln46_20_fu_557_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln58_374_fu_822_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln58_375_fu_825_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_371_fu_839_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_372_fu_853_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_377_fu_867_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_377_fu_867_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1269_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln46_19_fu_553_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln58_376_fu_877_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln58_377_fu_880_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_373_fu_894_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_374_fu_908_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_379_fu_922_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_379_fu_922_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1278_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln46_18_fu_549_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln58_378_fu_932_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln58_379_fu_935_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_375_fu_949_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_376_fu_963_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_381_fu_977_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_381_fu_977_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1287_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln46_17_fu_545_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln58_380_fu_987_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln58_381_fu_990_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_377_fu_1004_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_378_fu_1018_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_383_fu_1032_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_383_fu_1032_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1296_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln46_16_fu_541_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln58_382_fu_1042_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln58_383_fu_1045_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_379_fu_1059_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_380_fu_1073_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_385_fu_1087_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_385_fu_1087_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1305_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln46_15_fu_537_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln58_384_fu_1097_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln58_385_fu_1100_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_381_fu_1114_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_386_fu_1128_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln73_fu_597_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln73_386_fu_1128_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_1138_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1314_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln46_fu_533_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln58_386_fu_1152_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln58_387_fu_1155_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln58_369_cast25_fu_666_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_371_cast27_fu_721_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_373_cast29_fu_776_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_375_cast31_fu_831_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_377_cast33_fu_886_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_379_cast35_fu_941_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_381_cast37_fu_996_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_383_cast39_fu_1051_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_385_cast41_fu_1106_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln46_24_fu_1161_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1233_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1242_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1251_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1260_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1269_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1278_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1287_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1296_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1305_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1314_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1314_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_condition_168 : BOOLEAN;
    signal ap_condition_37 : BOOLEAN;
    signal a_fu_573_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_fu_573_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_fu_573_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_69_fu_605_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_69_fu_605_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_69_fu_605_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_sparsemux_7_2_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        def : IN STD_LOGIC_VECTOR (5 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component myproject_mul_6s_6ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component myproject_mac_muladd_6s_6ns_12s_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component myproject_mac_muladd_6ns_5s_12s_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_w18_ROM_NP4jc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (118 downto 0) );
    end component;



begin
    w18_U : component myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_w18_ROM_NP4jc
    generic map (
        DataWidth => 119,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w18_address0,
        ce0 => w18_ce0_local,
        q0 => w18_q0);

    sparsemux_7_2_6_1_1_U1080 : component myproject_sparsemux_7_2_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 6,
        CASE1 => "01",
        din1_WIDTH => 6,
        CASE2 => "10",
        din2_WIDTH => 6,
        def_WIDTH => 6,
        sel_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_phi_mux_data_0_val95_phi_phi_fu_448_p4,
        din1 => ap_phi_mux_data_1_val96_phi_phi_fu_460_p4,
        din2 => ap_phi_mux_data_2_val97_phi_phi_fu_472_p4,
        def => a_fu_573_p7,
        sel => w_index3_reg_205,
        dout => a_fu_573_p9);

    sparsemux_7_2_6_1_1_U1081 : component myproject_sparsemux_7_2_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 6,
        CASE1 => "01",
        din1_WIDTH => 6,
        CASE2 => "10",
        din2_WIDTH => 6,
        def_WIDTH => 6,
        sel_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_phi_mux_data_3_val98_phi_phi_fu_484_p4,
        din1 => ap_phi_mux_data_4_val99_phi_phi_fu_496_p4,
        din2 => ap_phi_mux_data_5_val100_phi_phi_fu_508_p4,
        def => a_69_fu_605_p7,
        sel => w_index3_reg_205,
        dout => a_69_fu_605_p9);

    mul_6s_6ns_12_1_1_U1082 : component myproject_mul_6s_6ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 12)
    port map (
        din0 => w_364_fu_625_p4,
        din1 => mul_ln73_369_fu_647_p1,
        dout => mul_ln73_369_fu_647_p2);

    mul_6s_6ns_12_1_1_U1083 : component myproject_mul_6s_6ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 12)
    port map (
        din0 => w_366_fu_688_p4,
        din1 => mul_ln73_371_fu_702_p1,
        dout => mul_ln73_371_fu_702_p2);

    mul_6s_6ns_12_1_1_U1084 : component myproject_mul_6s_6ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 12)
    port map (
        din0 => w_368_fu_743_p4,
        din1 => mul_ln73_373_fu_757_p1,
        dout => mul_ln73_373_fu_757_p2);

    mul_6s_6ns_12_1_1_U1085 : component myproject_mul_6s_6ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 12)
    port map (
        din0 => w_370_fu_798_p4,
        din1 => mul_ln73_375_fu_812_p1,
        dout => mul_ln73_375_fu_812_p2);

    mul_6s_6ns_12_1_1_U1086 : component myproject_mul_6s_6ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 12)
    port map (
        din0 => w_372_fu_853_p4,
        din1 => mul_ln73_377_fu_867_p1,
        dout => mul_ln73_377_fu_867_p2);

    mul_6s_6ns_12_1_1_U1087 : component myproject_mul_6s_6ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 12)
    port map (
        din0 => w_374_fu_908_p4,
        din1 => mul_ln73_379_fu_922_p1,
        dout => mul_ln73_379_fu_922_p2);

    mul_6s_6ns_12_1_1_U1088 : component myproject_mul_6s_6ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 12)
    port map (
        din0 => w_376_fu_963_p4,
        din1 => mul_ln73_381_fu_977_p1,
        dout => mul_ln73_381_fu_977_p2);

    mul_6s_6ns_12_1_1_U1089 : component myproject_mul_6s_6ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 12)
    port map (
        din0 => w_378_fu_1018_p4,
        din1 => mul_ln73_383_fu_1032_p1,
        dout => mul_ln73_383_fu_1032_p2);

    mul_6s_6ns_12_1_1_U1090 : component myproject_mul_6s_6ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 12)
    port map (
        din0 => w_380_fu_1073_p4,
        din1 => mul_ln73_385_fu_1087_p1,
        dout => mul_ln73_385_fu_1087_p2);

    mul_6s_6ns_12_1_1_U1091 : component myproject_mul_6s_6ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 12)
    port map (
        din0 => w_381_fu_1114_p4,
        din1 => mul_ln73_386_fu_1128_p1,
        dout => mul_ln73_386_fu_1128_p2);

    mac_muladd_6s_6ns_12s_13_1_1_U1092 : component myproject_mac_muladd_6s_6ns_12s_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 12,
        dout_WIDTH => 13)
    port map (
        din0 => w_fu_593_p1,
        din1 => grp_fu_1233_p1,
        din2 => mul_ln73_369_fu_647_p2,
        dout => grp_fu_1233_p3);

    mac_muladd_6s_6ns_12s_13_1_1_U1093 : component myproject_mac_muladd_6s_6ns_12s_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 12,
        dout_WIDTH => 13)
    port map (
        din0 => w_365_fu_674_p4,
        din1 => grp_fu_1242_p1,
        din2 => mul_ln73_371_fu_702_p2,
        dout => grp_fu_1242_p3);

    mac_muladd_6s_6ns_12s_13_1_1_U1094 : component myproject_mac_muladd_6s_6ns_12s_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 12,
        dout_WIDTH => 13)
    port map (
        din0 => w_367_fu_729_p4,
        din1 => grp_fu_1251_p1,
        din2 => mul_ln73_373_fu_757_p2,
        dout => grp_fu_1251_p3);

    mac_muladd_6s_6ns_12s_13_1_1_U1095 : component myproject_mac_muladd_6s_6ns_12s_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 12,
        dout_WIDTH => 13)
    port map (
        din0 => w_369_fu_784_p4,
        din1 => grp_fu_1260_p1,
        din2 => mul_ln73_375_fu_812_p2,
        dout => grp_fu_1260_p3);

    mac_muladd_6s_6ns_12s_13_1_1_U1096 : component myproject_mac_muladd_6s_6ns_12s_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 12,
        dout_WIDTH => 13)
    port map (
        din0 => w_371_fu_839_p4,
        din1 => grp_fu_1269_p1,
        din2 => mul_ln73_377_fu_867_p2,
        dout => grp_fu_1269_p3);

    mac_muladd_6s_6ns_12s_13_1_1_U1097 : component myproject_mac_muladd_6s_6ns_12s_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 12,
        dout_WIDTH => 13)
    port map (
        din0 => w_373_fu_894_p4,
        din1 => grp_fu_1278_p1,
        din2 => mul_ln73_379_fu_922_p2,
        dout => grp_fu_1278_p3);

    mac_muladd_6s_6ns_12s_13_1_1_U1098 : component myproject_mac_muladd_6s_6ns_12s_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 12,
        dout_WIDTH => 13)
    port map (
        din0 => w_375_fu_949_p4,
        din1 => grp_fu_1287_p1,
        din2 => mul_ln73_381_fu_977_p2,
        dout => grp_fu_1287_p3);

    mac_muladd_6s_6ns_12s_13_1_1_U1099 : component myproject_mac_muladd_6s_6ns_12s_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 12,
        dout_WIDTH => 13)
    port map (
        din0 => w_377_fu_1004_p4,
        din1 => grp_fu_1296_p1,
        din2 => mul_ln73_383_fu_1032_p2,
        dout => grp_fu_1296_p3);

    mac_muladd_6s_6ns_12s_13_1_1_U1100 : component myproject_mac_muladd_6s_6ns_12s_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 12,
        dout_WIDTH => 13)
    port map (
        din0 => w_379_fu_1059_p4,
        din1 => grp_fu_1305_p1,
        din2 => mul_ln73_385_fu_1087_p2,
        dout => grp_fu_1305_p3);

    mac_muladd_6ns_5s_12s_13_1_1_U1101 : component myproject_mac_muladd_6ns_5s_12s_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 5,
        din2_WIDTH => 12,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_1314_p0,
        din1 => tmp_fu_1138_p4,
        din2 => mul_ln73_386_fu_1128_p2,
        dout => grp_fu_1314_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
                    ap_return_0_preg <= add_ln58_369_cast25_fu_666_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
                    ap_return_1_preg <= add_ln58_371_cast27_fu_721_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
                    ap_return_2_preg <= add_ln58_373_cast29_fu_776_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
                    ap_return_3_preg <= add_ln58_375_cast31_fu_831_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
                    ap_return_4_preg <= add_ln58_377_cast33_fu_886_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
                    ap_return_5_preg <= add_ln58_379_cast35_fu_941_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
                    ap_return_6_preg <= add_ln58_381_cast37_fu_996_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
                    ap_return_7_preg <= add_ln58_383_cast39_fu_1051_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
                    ap_return_8_preg <= add_ln58_385_cast41_fu_1106_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
                    ap_return_9_preg <= sext_ln46_24_fu_1161_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_data_0_val95_phi_reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_193_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_0_val95_phi_reg_444 <= data_0_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_0_val95_phi_reg_444 <= ap_phi_reg_pp0_iter0_data_0_val95_phi_reg_444;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_1_val96_phi_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_193_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_1_val96_phi_reg_456 <= data_1_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_1_val96_phi_reg_456 <= ap_phi_reg_pp0_iter0_data_1_val96_phi_reg_456;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_2_val97_phi_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_193_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_2_val97_phi_reg_468 <= data_2_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_2_val97_phi_reg_468 <= ap_phi_reg_pp0_iter0_data_2_val97_phi_reg_468;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_3_val98_phi_reg_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_193_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_3_val98_phi_reg_480 <= data_3_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_3_val98_phi_reg_480 <= ap_phi_reg_pp0_iter0_data_3_val98_phi_reg_480;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_4_val99_phi_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_193_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_4_val99_phi_reg_492 <= data_4_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_4_val99_phi_reg_492 <= ap_phi_reg_pp0_iter0_data_4_val99_phi_reg_492;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_5_val100_phi_reg_504_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_193_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_5_val100_phi_reg_504 <= data_5_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_5_val100_phi_reg_504 <= ap_phi_reg_pp0_iter0_data_5_val100_phi_reg_504;
                end if;
            end if; 
        end if;
    end process;

    do_init_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_0))) then 
                do_init_reg_189 <= ap_const_lv1_0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_189 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    res_0_022_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_0))) then 
                res_0_022_reg_304 <= empty_fu_670_p1;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res_0_022_reg_304 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    res_1_020_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_0))) then 
                res_1_020_reg_318 <= empty_96_fu_725_p1;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res_1_020_reg_318 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    res_2_018_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_0))) then 
                res_2_018_reg_332 <= empty_97_fu_780_p1;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res_2_018_reg_332 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    res_3_016_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_0))) then 
                res_3_016_reg_346 <= empty_98_fu_835_p1;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res_3_016_reg_346 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    res_4_014_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_0))) then 
                res_4_014_reg_360 <= empty_99_fu_890_p1;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res_4_014_reg_360 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    res_5_012_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_0))) then 
                res_5_012_reg_374 <= empty_100_fu_945_p1;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res_5_012_reg_374 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    res_6_010_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_0))) then 
                res_6_010_reg_388 <= empty_101_fu_1000_p1;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res_6_010_reg_388 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    res_7_08_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_0))) then 
                res_7_08_reg_402 <= empty_102_fu_1055_p1;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res_7_08_reg_402 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    res_8_06_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_0))) then 
                res_8_06_reg_416 <= empty_103_fu_1110_p1;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res_8_06_reg_416 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    res_9_04_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_0))) then 
                res_9_04_reg_430 <= trunc_ln46_fu_1165_p1;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res_9_04_reg_430 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    w_index3_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_0))) then 
                w_index3_reg_205 <= w_index_reg_1358;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                w_index3_reg_205 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_0))) then
                data_0_val95_rewind_reg_220 <= ap_phi_mux_data_0_val95_phi_phi_fu_448_p4;
                data_1_val96_rewind_reg_234 <= ap_phi_mux_data_1_val96_phi_phi_fu_460_p4;
                data_2_val97_rewind_reg_248 <= ap_phi_mux_data_2_val97_phi_phi_fu_472_p4;
                data_3_val98_rewind_reg_262 <= ap_phi_mux_data_3_val98_phi_phi_fu_484_p4;
                data_4_val99_rewind_reg_276 <= ap_phi_mux_data_4_val99_phi_phi_fu_496_p4;
                data_5_val100_rewind_reg_290 <= ap_phi_mux_data_5_val100_phi_phi_fu_508_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln46_reg_1363 <= icmp_ln46_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                w_index_reg_1358 <= w_index_fu_521_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    a_69_fu_605_p7 <= "XXXXXX";
    a_fu_573_p7 <= "XXXXXX";
        add_ln58_369_cast25_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_369_fu_660_p2),16));

    add_ln58_369_fu_660_p2 <= std_logic_vector(signed(sext_ln46_23_fu_569_p1) + signed(sext_ln58_368_fu_657_p1));
        add_ln58_371_cast27_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_371_fu_715_p2),16));

    add_ln58_371_fu_715_p2 <= std_logic_vector(signed(sext_ln46_22_fu_565_p1) + signed(sext_ln58_370_fu_712_p1));
        add_ln58_373_cast29_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_373_fu_770_p2),16));

    add_ln58_373_fu_770_p2 <= std_logic_vector(signed(sext_ln46_21_fu_561_p1) + signed(sext_ln58_372_fu_767_p1));
        add_ln58_375_cast31_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_375_fu_825_p2),16));

    add_ln58_375_fu_825_p2 <= std_logic_vector(signed(sext_ln46_20_fu_557_p1) + signed(sext_ln58_374_fu_822_p1));
        add_ln58_377_cast33_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_377_fu_880_p2),16));

    add_ln58_377_fu_880_p2 <= std_logic_vector(signed(sext_ln46_19_fu_553_p1) + signed(sext_ln58_376_fu_877_p1));
        add_ln58_379_cast35_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_379_fu_935_p2),16));

    add_ln58_379_fu_935_p2 <= std_logic_vector(signed(sext_ln46_18_fu_549_p1) + signed(sext_ln58_378_fu_932_p1));
        add_ln58_381_cast37_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_381_fu_990_p2),16));

    add_ln58_381_fu_990_p2 <= std_logic_vector(signed(sext_ln46_17_fu_545_p1) + signed(sext_ln58_380_fu_987_p1));
        add_ln58_383_cast39_fu_1051_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_383_fu_1045_p2),16));

    add_ln58_383_fu_1045_p2 <= std_logic_vector(signed(sext_ln46_16_fu_541_p1) + signed(sext_ln58_382_fu_1042_p1));
        add_ln58_385_cast41_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_385_fu_1100_p2),16));

    add_ln58_385_fu_1100_p2 <= std_logic_vector(signed(sext_ln46_15_fu_537_p1) + signed(sext_ln58_384_fu_1097_p1));
    add_ln58_387_fu_1155_p2 <= std_logic_vector(signed(sext_ln46_fu_533_p1) + signed(sext_ln58_386_fu_1152_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_168_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_168 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_37_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_37 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_1363, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_data_0_val95_phi_phi_fu_448_p4_assign_proc : process(do_init_reg_189, data_0_val95_rewind_reg_220, ap_phi_reg_pp0_iter1_data_0_val95_phi_reg_444)
    begin
        if ((do_init_reg_189 = ap_const_lv1_0)) then 
            ap_phi_mux_data_0_val95_phi_phi_fu_448_p4 <= data_0_val95_rewind_reg_220;
        else 
            ap_phi_mux_data_0_val95_phi_phi_fu_448_p4 <= ap_phi_reg_pp0_iter1_data_0_val95_phi_reg_444;
        end if; 
    end process;


    ap_phi_mux_data_1_val96_phi_phi_fu_460_p4_assign_proc : process(do_init_reg_189, data_1_val96_rewind_reg_234, ap_phi_reg_pp0_iter1_data_1_val96_phi_reg_456)
    begin
        if ((do_init_reg_189 = ap_const_lv1_0)) then 
            ap_phi_mux_data_1_val96_phi_phi_fu_460_p4 <= data_1_val96_rewind_reg_234;
        else 
            ap_phi_mux_data_1_val96_phi_phi_fu_460_p4 <= ap_phi_reg_pp0_iter1_data_1_val96_phi_reg_456;
        end if; 
    end process;


    ap_phi_mux_data_2_val97_phi_phi_fu_472_p4_assign_proc : process(do_init_reg_189, data_2_val97_rewind_reg_248, ap_phi_reg_pp0_iter1_data_2_val97_phi_reg_468)
    begin
        if ((do_init_reg_189 = ap_const_lv1_0)) then 
            ap_phi_mux_data_2_val97_phi_phi_fu_472_p4 <= data_2_val97_rewind_reg_248;
        else 
            ap_phi_mux_data_2_val97_phi_phi_fu_472_p4 <= ap_phi_reg_pp0_iter1_data_2_val97_phi_reg_468;
        end if; 
    end process;


    ap_phi_mux_data_3_val98_phi_phi_fu_484_p4_assign_proc : process(do_init_reg_189, data_3_val98_rewind_reg_262, ap_phi_reg_pp0_iter1_data_3_val98_phi_reg_480)
    begin
        if ((do_init_reg_189 = ap_const_lv1_0)) then 
            ap_phi_mux_data_3_val98_phi_phi_fu_484_p4 <= data_3_val98_rewind_reg_262;
        else 
            ap_phi_mux_data_3_val98_phi_phi_fu_484_p4 <= ap_phi_reg_pp0_iter1_data_3_val98_phi_reg_480;
        end if; 
    end process;


    ap_phi_mux_data_4_val99_phi_phi_fu_496_p4_assign_proc : process(do_init_reg_189, data_4_val99_rewind_reg_276, ap_phi_reg_pp0_iter1_data_4_val99_phi_reg_492)
    begin
        if ((do_init_reg_189 = ap_const_lv1_0)) then 
            ap_phi_mux_data_4_val99_phi_phi_fu_496_p4 <= data_4_val99_rewind_reg_276;
        else 
            ap_phi_mux_data_4_val99_phi_phi_fu_496_p4 <= ap_phi_reg_pp0_iter1_data_4_val99_phi_reg_492;
        end if; 
    end process;


    ap_phi_mux_data_5_val100_phi_phi_fu_508_p4_assign_proc : process(do_init_reg_189, data_5_val100_rewind_reg_290, ap_phi_reg_pp0_iter1_data_5_val100_phi_reg_504)
    begin
        if ((do_init_reg_189 = ap_const_lv1_0)) then 
            ap_phi_mux_data_5_val100_phi_phi_fu_508_p4 <= data_5_val100_rewind_reg_290;
        else 
            ap_phi_mux_data_5_val100_phi_phi_fu_508_p4 <= ap_phi_reg_pp0_iter1_data_5_val100_phi_reg_504;
        end if; 
    end process;


    ap_phi_mux_do_init_phi_fu_193_p6_assign_proc : process(do_init_reg_189, icmp_ln46_reg_1363, ap_condition_168)
    begin
        if ((ap_const_boolean_1 = ap_condition_168)) then
            if ((icmp_ln46_reg_1363 = ap_const_lv1_1)) then 
                ap_phi_mux_do_init_phi_fu_193_p6 <= ap_const_lv1_1;
            elsif ((icmp_ln46_reg_1363 = ap_const_lv1_0)) then 
                ap_phi_mux_do_init_phi_fu_193_p6 <= ap_const_lv1_0;
            else 
                ap_phi_mux_do_init_phi_fu_193_p6 <= do_init_reg_189;
            end if;
        else 
            ap_phi_mux_do_init_phi_fu_193_p6 <= do_init_reg_189;
        end if; 
    end process;


    ap_phi_mux_w_index3_phi_fu_209_p6_assign_proc : process(w_index3_reg_205, w_index_reg_1358, icmp_ln46_reg_1363, ap_condition_168)
    begin
        if ((ap_const_boolean_1 = ap_condition_168)) then
            if ((icmp_ln46_reg_1363 = ap_const_lv1_1)) then 
                ap_phi_mux_w_index3_phi_fu_209_p6 <= ap_const_lv2_0;
            elsif ((icmp_ln46_reg_1363 = ap_const_lv1_0)) then 
                ap_phi_mux_w_index3_phi_fu_209_p6 <= w_index_reg_1358;
            else 
                ap_phi_mux_w_index3_phi_fu_209_p6 <= w_index3_reg_205;
            end if;
        else 
            ap_phi_mux_w_index3_phi_fu_209_p6 <= w_index3_reg_205;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_data_0_val95_phi_reg_444 <= "XXXXXX";
    ap_phi_reg_pp0_iter0_data_1_val96_phi_reg_456 <= "XXXXXX";
    ap_phi_reg_pp0_iter0_data_2_val97_phi_reg_468 <= "XXXXXX";
    ap_phi_reg_pp0_iter0_data_3_val98_phi_reg_480 <= "XXXXXX";
    ap_phi_reg_pp0_iter0_data_4_val99_phi_reg_492 <= "XXXXXX";
    ap_phi_reg_pp0_iter0_data_5_val100_phi_reg_504 <= "XXXXXX";

    ap_ready_assign_proc : process(icmp_ln46_fu_527_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_fu_527_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_1363, ap_enable_reg_pp0_iter1, add_ln58_369_cast25_fu_666_p1, ap_return_0_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
            ap_return_0 <= add_ln58_369_cast25_fu_666_p1;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_1363, ap_enable_reg_pp0_iter1, add_ln58_371_cast27_fu_721_p1, ap_return_1_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
            ap_return_1 <= add_ln58_371_cast27_fu_721_p1;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_1363, ap_enable_reg_pp0_iter1, add_ln58_373_cast29_fu_776_p1, ap_return_2_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
            ap_return_2 <= add_ln58_373_cast29_fu_776_p1;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_1363, ap_enable_reg_pp0_iter1, add_ln58_375_cast31_fu_831_p1, ap_return_3_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
            ap_return_3 <= add_ln58_375_cast31_fu_831_p1;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_1363, ap_enable_reg_pp0_iter1, add_ln58_377_cast33_fu_886_p1, ap_return_4_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
            ap_return_4 <= add_ln58_377_cast33_fu_886_p1;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_1363, ap_enable_reg_pp0_iter1, add_ln58_379_cast35_fu_941_p1, ap_return_5_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
            ap_return_5 <= add_ln58_379_cast35_fu_941_p1;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_1363, ap_enable_reg_pp0_iter1, add_ln58_381_cast37_fu_996_p1, ap_return_6_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
            ap_return_6 <= add_ln58_381_cast37_fu_996_p1;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_1363, ap_enable_reg_pp0_iter1, add_ln58_383_cast39_fu_1051_p1, ap_return_7_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
            ap_return_7 <= add_ln58_383_cast39_fu_1051_p1;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_1363, ap_enable_reg_pp0_iter1, add_ln58_385_cast41_fu_1106_p1, ap_return_8_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
            ap_return_8 <= add_ln58_385_cast41_fu_1106_p1;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_1363, ap_enable_reg_pp0_iter1, sext_ln46_24_fu_1161_p1, ap_return_9_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1363 = ap_const_lv1_1))) then 
            ap_return_9 <= sext_ln46_24_fu_1161_p1;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;

    empty_100_fu_945_p1 <= add_ln58_379_fu_935_p2(14 - 1 downto 0);
    empty_101_fu_1000_p1 <= add_ln58_381_fu_990_p2(14 - 1 downto 0);
    empty_102_fu_1055_p1 <= add_ln58_383_fu_1045_p2(14 - 1 downto 0);
    empty_103_fu_1110_p1 <= add_ln58_385_fu_1100_p2(14 - 1 downto 0);
    empty_96_fu_725_p1 <= add_ln58_371_fu_715_p2(14 - 1 downto 0);
    empty_97_fu_780_p1 <= add_ln58_373_fu_770_p2(14 - 1 downto 0);
    empty_98_fu_835_p1 <= add_ln58_375_fu_825_p2(14 - 1 downto 0);
    empty_99_fu_890_p1 <= add_ln58_377_fu_880_p2(14 - 1 downto 0);
    empty_fu_670_p1 <= add_ln58_369_fu_660_p2(14 - 1 downto 0);
    grp_fu_1233_p1 <= zext_ln73_fu_597_p1(6 - 1 downto 0);
    grp_fu_1242_p1 <= zext_ln73_fu_597_p1(6 - 1 downto 0);
    grp_fu_1251_p1 <= zext_ln73_fu_597_p1(6 - 1 downto 0);
    grp_fu_1260_p1 <= zext_ln73_fu_597_p1(6 - 1 downto 0);
    grp_fu_1269_p1 <= zext_ln73_fu_597_p1(6 - 1 downto 0);
    grp_fu_1278_p1 <= zext_ln73_fu_597_p1(6 - 1 downto 0);
    grp_fu_1287_p1 <= zext_ln73_fu_597_p1(6 - 1 downto 0);
    grp_fu_1296_p1 <= zext_ln73_fu_597_p1(6 - 1 downto 0);
    grp_fu_1305_p1 <= zext_ln73_fu_597_p1(6 - 1 downto 0);
    grp_fu_1314_p0 <= grp_fu_1314_p00(6 - 1 downto 0);
    grp_fu_1314_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_69_fu_605_p9),11));
    icmp_ln46_fu_527_p2 <= "1" when (ap_phi_mux_w_index3_phi_fu_209_p6 = ap_const_lv2_2) else "0";
    mul_ln73_369_fu_647_p1 <= zext_ln73_69_fu_635_p1(6 - 1 downto 0);
    mul_ln73_371_fu_702_p1 <= zext_ln73_69_fu_635_p1(6 - 1 downto 0);
    mul_ln73_373_fu_757_p1 <= zext_ln73_69_fu_635_p1(6 - 1 downto 0);
    mul_ln73_375_fu_812_p1 <= zext_ln73_69_fu_635_p1(6 - 1 downto 0);
    mul_ln73_377_fu_867_p1 <= zext_ln73_69_fu_635_p1(6 - 1 downto 0);
    mul_ln73_379_fu_922_p1 <= zext_ln73_69_fu_635_p1(6 - 1 downto 0);
    mul_ln73_381_fu_977_p1 <= zext_ln73_69_fu_635_p1(6 - 1 downto 0);
    mul_ln73_383_fu_1032_p1 <= zext_ln73_69_fu_635_p1(6 - 1 downto 0);
    mul_ln73_385_fu_1087_p1 <= zext_ln73_69_fu_635_p1(6 - 1 downto 0);
    mul_ln73_386_fu_1128_p1 <= zext_ln73_fu_597_p1(6 - 1 downto 0);
        sext_ln46_15_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(res_8_06_reg_416),15));

        sext_ln46_16_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(res_7_08_reg_402),15));

        sext_ln46_17_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(res_6_010_reg_388),15));

        sext_ln46_18_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(res_5_012_reg_374),15));

        sext_ln46_19_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(res_4_014_reg_360),15));

        sext_ln46_20_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(res_3_016_reg_346),15));

        sext_ln46_21_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(res_2_018_reg_332),15));

        sext_ln46_22_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(res_1_020_reg_318),15));

        sext_ln46_23_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(res_0_022_reg_304),15));

        sext_ln46_24_fu_1161_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_387_fu_1155_p2),16));

        sext_ln46_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(res_9_04_reg_430),15));

        sext_ln58_368_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1233_p3),15));

        sext_ln58_370_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1242_p3),15));

        sext_ln58_372_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1251_p3),15));

        sext_ln58_374_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1260_p3),15));

        sext_ln58_376_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1269_p3),15));

        sext_ln58_378_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1278_p3),15));

        sext_ln58_380_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1287_p3),15));

        sext_ln58_382_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1296_p3),15));

        sext_ln58_384_fu_1097_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1305_p3),15));

        sext_ln58_386_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1314_p3),15));

    tmp_fu_1138_p4 <= w18_q0(118 downto 114);
    trunc_ln46_fu_1165_p1 <= add_ln58_387_fu_1155_p2(14 - 1 downto 0);
    w18_address0 <= zext_ln46_fu_516_p1(2 - 1 downto 0);

    w18_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w18_ce0_local <= ap_const_logic_1;
        else 
            w18_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_364_fu_625_p4 <= w18_q0(11 downto 6);
    w_365_fu_674_p4 <= w18_q0(17 downto 12);
    w_366_fu_688_p4 <= w18_q0(23 downto 18);
    w_367_fu_729_p4 <= w18_q0(29 downto 24);
    w_368_fu_743_p4 <= w18_q0(35 downto 30);
    w_369_fu_784_p4 <= w18_q0(41 downto 36);
    w_370_fu_798_p4 <= w18_q0(47 downto 42);
    w_371_fu_839_p4 <= w18_q0(53 downto 48);
    w_372_fu_853_p4 <= w18_q0(59 downto 54);
    w_373_fu_894_p4 <= w18_q0(65 downto 60);
    w_374_fu_908_p4 <= w18_q0(71 downto 66);
    w_375_fu_949_p4 <= w18_q0(77 downto 72);
    w_376_fu_963_p4 <= w18_q0(83 downto 78);
    w_377_fu_1004_p4 <= w18_q0(89 downto 84);
    w_378_fu_1018_p4 <= w18_q0(95 downto 90);
    w_379_fu_1059_p4 <= w18_q0(101 downto 96);
    w_380_fu_1073_p4 <= w18_q0(107 downto 102);
    w_381_fu_1114_p4 <= w18_q0(113 downto 108);
    w_fu_593_p1 <= w18_q0(6 - 1 downto 0);
    w_index_fu_521_p2 <= std_logic_vector(unsigned(ap_phi_mux_w_index3_phi_fu_209_p6) + unsigned(ap_const_lv2_1));
    zext_ln46_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_w_index3_phi_fu_209_p6),64));
    zext_ln73_69_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_69_fu_605_p9),12));
    zext_ln73_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_fu_573_p9),12));
end behav;
