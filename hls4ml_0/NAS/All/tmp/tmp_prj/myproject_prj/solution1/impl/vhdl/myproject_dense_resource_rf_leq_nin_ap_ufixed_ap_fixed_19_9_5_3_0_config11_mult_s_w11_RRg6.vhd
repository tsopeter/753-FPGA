-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config11_mult_s_w11_RRg6 is 
    generic(
             DataWidth     : integer := 34; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config11_mult_s_w11_RRg6 is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0100111111000010000110000101111011", 1 => "1111000011111111000000111101000010", 2 => "0011111011111110000000000011000100", 3 => "0110000111000010111100111110000000", 
    4 => "1100000010111101111110111101111101", 5 => "0101000000000100000101111111000010", 6 => "1011000010111110000010111100111110", 7 => "0001000000111001111111111111111111", 
    8 => "0010111101111011000110111010000000", 9 => "1100000011000011000010111100000100", 10 => "0100111100000101111100000001000001", 11 => "0010111101111101000010000101111110", 
    12 => "0100000010000001000010111111000101", 13 => "0010111011000100000101000011000011", 14 => "0000000000000110000010111101000010", 15 => "0100111111000000000101111110111001", 
    16 => "1100000011000010111101111110000100", 17 => "1001111101111101111101000001111101", 18 => "0000000001000010000011000001111111", 19 => "0101111110000011000000000000111111", 
    20 => "1001000001000011000100000000111001", 21 => "1111111111000010000011000010000000", 22 => "1110111111000001111110000010111010", 23 => "1011000000111111000110111110000101", 
    24 => "0110001000000010111001111011111101", 25 => "1101111100111110111110111011000110", 26 => "1111111110000000111111000010111100", 27 => "1111000001111010111111000000111100", 
    28 => "1011111111111100000010000110111111", 29 => "1011111100000010000000111101111111", 30 => "0001111011000100000101111100111011", 31 => "0010111001000100000001111011111010", 
    32 => "0011111100111111000000111111000001", 33 => "0100111110111101000001000011111100", 34 => "0011111011000010000011000001111001", 35 => "0000000101000000000011000101000110", 
    36 => "0101111101111100111110111100000010", 37 => "0100111001000101000110000000000101", 38 => "0011000100000010000011111101000000", 39 => "0000111100111101000110000010000001", 
    40 => "0010000010000000111111000011000001", 41 => "1100000010000101000001000011000001", 42 => "1010000101000001111110000000000001", 43 => "0011111110111001000100000010111101", 
    44 => "1100000100000111111100000010000000");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

