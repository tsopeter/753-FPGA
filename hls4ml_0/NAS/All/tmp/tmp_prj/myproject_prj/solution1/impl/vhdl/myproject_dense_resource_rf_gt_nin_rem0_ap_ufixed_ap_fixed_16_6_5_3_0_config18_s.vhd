-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_resource_rf_gt_nin_rem0_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (5 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (5 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (5 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (5 downto 0);
    data_4_val : IN STD_LOGIC_VECTOR (5 downto 0);
    data_5_val : IN STD_LOGIC_VECTOR (5 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of myproject_dense_resource_rf_gt_nin_rem0_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln135_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal outidx_92_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal outidx_92_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal w18_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal w18_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal do_init_reg_144 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index19_reg_160 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_0_val23_rewind_reg_174 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_1_val24_rewind_reg_188 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_2_val25_rewind_reg_202 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_3_val26_rewind_reg_216 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_4_val27_rewind_reg_230 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_5_val28_rewind_reg_244 : STD_LOGIC_VECTOR (5 downto 0);
    signal in_index20_reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc17_reg_272 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_715_reg_286 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_813_reg_300 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_911_reg_314 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_1010_reg_328 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_index_fu_420_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_index_reg_728 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln135_reg_733 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_9_fu_584_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal acc_8_fu_592_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_7_fu_600_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_6_fu_608_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_fu_616_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_index_fu_636_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_do_init_phi_fu_148_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_w_index19_phi_fu_164_p6 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_data_0_val23_phi_phi_fu_346_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_data_1_val24_phi_phi_fu_358_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_data_2_val25_phi_phi_fu_370_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_data_3_val26_phi_phi_fu_382_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_data_4_val27_phi_phi_fu_394_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_data_5_val28_phi_phi_fu_406_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_0_val23_phi_reg_342 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_data_0_val23_phi_reg_342 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_1_val24_phi_reg_354 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_data_1_val24_phi_reg_354 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_2_val25_phi_reg_366 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_data_2_val25_phi_reg_366 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_3_val26_phi_reg_378 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_data_3_val26_phi_reg_378 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_4_val27_phi_reg_390 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_data_4_val27_phi_reg_390 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_data_5_val28_phi_reg_402 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter1_data_5_val28_phi_reg_402 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln135_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal outidx_92_ce0_local : STD_LOGIC;
    signal w18_ce0_local : STD_LOGIC;
    signal a_fu_436_p13 : STD_LOGIC_VECTOR (5 downto 0);
    signal a_fu_436_p14 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_fu_436_p15 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_476_p11 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_476_p13 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_678_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln144_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_4_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_2_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_3_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln144_1_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_1_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln144_2_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln144_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln144_3_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln144_4_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln144_5_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_10_fu_561_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_11_fu_569_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_index_2_fu_624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln154_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_678_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_678_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_condition_156 : BOOLEAN;
    signal ap_condition_37 : BOOLEAN;
    signal a_fu_436_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_fu_436_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_fu_436_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_fu_436_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_fu_436_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_fu_436_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_476_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_476_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_476_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_476_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_476_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_sparsemux_13_3_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (5 downto 0);
        din4 : IN STD_LOGIC_VECTOR (5 downto 0);
        din5 : IN STD_LOGIC_VECTOR (5 downto 0);
        def : IN STD_LOGIC_VECTOR (5 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component myproject_sparsemux_11_3_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        def : IN STD_LOGIC_VECTOR (15 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_mac_muladd_6s_6ns_16s_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component myproject_dense_resource_rf_gt_nin_rem0_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_outidx5jm IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component myproject_dense_resource_rf_gt_nin_rem0_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_w18_RO6jw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    outidx_92_U : component myproject_dense_resource_rf_gt_nin_rem0_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_outidx5jm
    generic map (
        DataWidth => 3,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => outidx_92_address0,
        ce0 => outidx_92_ce0_local,
        q0 => outidx_92_q0);

    w18_U : component myproject_dense_resource_rf_gt_nin_rem0_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_w18_RO6jw
    generic map (
        DataWidth => 6,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w18_address0,
        ce0 => w18_ce0_local,
        q0 => w18_q0);

    sparsemux_13_3_6_1_1_U665 : component myproject_sparsemux_13_3_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 6,
        CASE1 => "001",
        din1_WIDTH => 6,
        CASE2 => "010",
        din2_WIDTH => 6,
        CASE3 => "011",
        din3_WIDTH => 6,
        CASE4 => "100",
        din4_WIDTH => 6,
        CASE5 => "101",
        din5_WIDTH => 6,
        def_WIDTH => 6,
        sel_WIDTH => 3,
        dout_WIDTH => 6)
    port map (
        din0 => ap_phi_mux_data_0_val23_phi_phi_fu_346_p4,
        din1 => ap_phi_mux_data_1_val24_phi_phi_fu_358_p4,
        din2 => ap_phi_mux_data_2_val25_phi_phi_fu_370_p4,
        din3 => ap_phi_mux_data_3_val26_phi_phi_fu_382_p4,
        din4 => ap_phi_mux_data_4_val27_phi_phi_fu_394_p4,
        din5 => ap_phi_mux_data_5_val28_phi_phi_fu_406_p4,
        def => a_fu_436_p13,
        sel => a_fu_436_p14,
        dout => a_fu_436_p15);

    sparsemux_11_3_16_1_1_U666 : component myproject_sparsemux_11_3_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 16,
        CASE1 => "001",
        din1_WIDTH => 16,
        CASE2 => "010",
        din2_WIDTH => 16,
        CASE3 => "011",
        din3_WIDTH => 16,
        CASE4 => "100",
        din4_WIDTH => 16,
        def_WIDTH => 16,
        sel_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => acc17_reg_272,
        din1 => acc_715_reg_286,
        din2 => acc_813_reg_300,
        din3 => acc_911_reg_314,
        din4 => acc_1010_reg_328,
        def => tmp_fu_476_p11,
        sel => outidx_92_q0,
        dout => tmp_fu_476_p13);

    mac_muladd_6s_6ns_16s_17_1_1_U667 : component myproject_mac_muladd_6s_6ns_16s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        din0 => w18_q0,
        din1 => grp_fu_678_p1,
        din2 => tmp_fu_476_p13,
        dout => grp_fu_678_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1))) then 
                    ap_return_0_preg <= acc_fu_616_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1))) then 
                    ap_return_1_preg <= acc_6_fu_608_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1))) then 
                    ap_return_2_preg <= acc_7_fu_600_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1))) then 
                    ap_return_3_preg <= acc_8_fu_592_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1))) then 
                    ap_return_4_preg <= acc_9_fu_584_p3;
                end if; 
            end if;
        end if;
    end process;


    acc17_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_0))) then 
                acc17_reg_272 <= acc_fu_616_p3;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                acc17_reg_272 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_1010_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_0))) then 
                acc_1010_reg_328 <= acc_9_fu_584_p3;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                acc_1010_reg_328 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_715_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_0))) then 
                acc_715_reg_286 <= acc_6_fu_608_p3;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                acc_715_reg_286 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_813_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_0))) then 
                acc_813_reg_300 <= acc_7_fu_600_p3;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                acc_813_reg_300 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_911_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_0))) then 
                acc_911_reg_314 <= acc_8_fu_592_p3;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                acc_911_reg_314 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_0_val23_phi_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_148_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_0_val23_phi_reg_342 <= data_0_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_0_val23_phi_reg_342 <= ap_phi_reg_pp0_iter0_data_0_val23_phi_reg_342;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_1_val24_phi_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_148_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_1_val24_phi_reg_354 <= data_1_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_1_val24_phi_reg_354 <= ap_phi_reg_pp0_iter0_data_1_val24_phi_reg_354;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_2_val25_phi_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_148_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_2_val25_phi_reg_366 <= data_2_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_2_val25_phi_reg_366 <= ap_phi_reg_pp0_iter0_data_2_val25_phi_reg_366;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_3_val26_phi_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_148_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_3_val26_phi_reg_378 <= data_3_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_3_val26_phi_reg_378 <= ap_phi_reg_pp0_iter0_data_3_val26_phi_reg_378;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_4_val27_phi_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_148_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_4_val27_phi_reg_390 <= data_4_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_4_val27_phi_reg_390 <= ap_phi_reg_pp0_iter0_data_4_val27_phi_reg_390;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_5_val28_phi_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_148_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_5_val28_phi_reg_402 <= data_5_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_5_val28_phi_reg_402 <= ap_phi_reg_pp0_iter0_data_5_val28_phi_reg_402;
                end if;
            end if; 
        end if;
    end process;

    do_init_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_0))) then 
                do_init_reg_144 <= ap_const_lv1_0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_144 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    in_index20_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_0))) then 
                in_index20_reg_258 <= in_index_fu_636_p3;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                in_index20_reg_258 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_index19_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_0))) then 
                w_index19_reg_160 <= w_index_reg_728;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                w_index19_reg_160 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_0))) then
                data_0_val23_rewind_reg_174 <= ap_phi_mux_data_0_val23_phi_phi_fu_346_p4;
                data_1_val24_rewind_reg_188 <= ap_phi_mux_data_1_val24_phi_phi_fu_358_p4;
                data_2_val25_rewind_reg_202 <= ap_phi_mux_data_2_val25_phi_phi_fu_370_p4;
                data_3_val26_rewind_reg_216 <= ap_phi_mux_data_3_val26_phi_phi_fu_382_p4;
                data_4_val27_rewind_reg_230 <= ap_phi_mux_data_4_val27_phi_phi_fu_394_p4;
                data_5_val28_rewind_reg_244 <= ap_phi_mux_data_5_val28_phi_phi_fu_406_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln135_reg_733 <= icmp_ln135_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                w_index_reg_728 <= w_index_fu_420_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    a_fu_436_p13 <= "XXXXXX";
    a_fu_436_p14 <= in_index20_reg_258(3 - 1 downto 0);
    acc_10_fu_561_p3 <= 
        acc_1010_reg_328 when (or_ln144_3_fu_555_p2(0) = '1') else 
        ap_const_lv16_0;
    acc_11_fu_569_p1 <= grp_fu_678_p3(16 - 1 downto 0);
    acc_6_fu_608_p3 <= 
        acc_11_fu_569_p1 when (icmp_ln144_1_fu_514_p2(0) = '1') else 
        acc_715_reg_286;
    acc_7_fu_600_p3 <= 
        acc_11_fu_569_p1 when (icmp_ln144_2_fu_520_p2(0) = '1') else 
        acc_813_reg_300;
    acc_8_fu_592_p3 <= 
        acc_11_fu_569_p1 when (icmp_ln144_3_fu_526_p2(0) = '1') else 
        acc_911_reg_314;
    acc_9_fu_584_p3 <= 
        acc_10_fu_561_p3 when (or_ln144_5_fu_578_p2(0) = '1') else 
        acc_11_fu_569_p1;
    acc_fu_616_p3 <= 
        acc_11_fu_569_p1 when (icmp_ln144_fu_508_p2(0) = '1') else 
        acc17_reg_272;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_156_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_156 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_37_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_37 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln135_reg_733, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_data_0_val23_phi_phi_fu_346_p4_assign_proc : process(do_init_reg_144, data_0_val23_rewind_reg_174, ap_phi_reg_pp0_iter1_data_0_val23_phi_reg_342)
    begin
        if ((do_init_reg_144 = ap_const_lv1_0)) then 
            ap_phi_mux_data_0_val23_phi_phi_fu_346_p4 <= data_0_val23_rewind_reg_174;
        else 
            ap_phi_mux_data_0_val23_phi_phi_fu_346_p4 <= ap_phi_reg_pp0_iter1_data_0_val23_phi_reg_342;
        end if; 
    end process;


    ap_phi_mux_data_1_val24_phi_phi_fu_358_p4_assign_proc : process(do_init_reg_144, data_1_val24_rewind_reg_188, ap_phi_reg_pp0_iter1_data_1_val24_phi_reg_354)
    begin
        if ((do_init_reg_144 = ap_const_lv1_0)) then 
            ap_phi_mux_data_1_val24_phi_phi_fu_358_p4 <= data_1_val24_rewind_reg_188;
        else 
            ap_phi_mux_data_1_val24_phi_phi_fu_358_p4 <= ap_phi_reg_pp0_iter1_data_1_val24_phi_reg_354;
        end if; 
    end process;


    ap_phi_mux_data_2_val25_phi_phi_fu_370_p4_assign_proc : process(do_init_reg_144, data_2_val25_rewind_reg_202, ap_phi_reg_pp0_iter1_data_2_val25_phi_reg_366)
    begin
        if ((do_init_reg_144 = ap_const_lv1_0)) then 
            ap_phi_mux_data_2_val25_phi_phi_fu_370_p4 <= data_2_val25_rewind_reg_202;
        else 
            ap_phi_mux_data_2_val25_phi_phi_fu_370_p4 <= ap_phi_reg_pp0_iter1_data_2_val25_phi_reg_366;
        end if; 
    end process;


    ap_phi_mux_data_3_val26_phi_phi_fu_382_p4_assign_proc : process(do_init_reg_144, data_3_val26_rewind_reg_216, ap_phi_reg_pp0_iter1_data_3_val26_phi_reg_378)
    begin
        if ((do_init_reg_144 = ap_const_lv1_0)) then 
            ap_phi_mux_data_3_val26_phi_phi_fu_382_p4 <= data_3_val26_rewind_reg_216;
        else 
            ap_phi_mux_data_3_val26_phi_phi_fu_382_p4 <= ap_phi_reg_pp0_iter1_data_3_val26_phi_reg_378;
        end if; 
    end process;


    ap_phi_mux_data_4_val27_phi_phi_fu_394_p4_assign_proc : process(do_init_reg_144, data_4_val27_rewind_reg_230, ap_phi_reg_pp0_iter1_data_4_val27_phi_reg_390)
    begin
        if ((do_init_reg_144 = ap_const_lv1_0)) then 
            ap_phi_mux_data_4_val27_phi_phi_fu_394_p4 <= data_4_val27_rewind_reg_230;
        else 
            ap_phi_mux_data_4_val27_phi_phi_fu_394_p4 <= ap_phi_reg_pp0_iter1_data_4_val27_phi_reg_390;
        end if; 
    end process;


    ap_phi_mux_data_5_val28_phi_phi_fu_406_p4_assign_proc : process(do_init_reg_144, data_5_val28_rewind_reg_244, ap_phi_reg_pp0_iter1_data_5_val28_phi_reg_402)
    begin
        if ((do_init_reg_144 = ap_const_lv1_0)) then 
            ap_phi_mux_data_5_val28_phi_phi_fu_406_p4 <= data_5_val28_rewind_reg_244;
        else 
            ap_phi_mux_data_5_val28_phi_phi_fu_406_p4 <= ap_phi_reg_pp0_iter1_data_5_val28_phi_reg_402;
        end if; 
    end process;


    ap_phi_mux_do_init_phi_fu_148_p6_assign_proc : process(do_init_reg_144, icmp_ln135_reg_733, ap_condition_156)
    begin
        if ((ap_const_boolean_1 = ap_condition_156)) then
            if ((icmp_ln135_reg_733 = ap_const_lv1_1)) then 
                ap_phi_mux_do_init_phi_fu_148_p6 <= ap_const_lv1_1;
            elsif ((icmp_ln135_reg_733 = ap_const_lv1_0)) then 
                ap_phi_mux_do_init_phi_fu_148_p6 <= ap_const_lv1_0;
            else 
                ap_phi_mux_do_init_phi_fu_148_p6 <= do_init_reg_144;
            end if;
        else 
            ap_phi_mux_do_init_phi_fu_148_p6 <= do_init_reg_144;
        end if; 
    end process;


    ap_phi_mux_w_index19_phi_fu_164_p6_assign_proc : process(w_index19_reg_160, w_index_reg_728, icmp_ln135_reg_733, ap_condition_156)
    begin
        if ((ap_const_boolean_1 = ap_condition_156)) then
            if ((icmp_ln135_reg_733 = ap_const_lv1_1)) then 
                ap_phi_mux_w_index19_phi_fu_164_p6 <= ap_const_lv5_0;
            elsif ((icmp_ln135_reg_733 = ap_const_lv1_0)) then 
                ap_phi_mux_w_index19_phi_fu_164_p6 <= w_index_reg_728;
            else 
                ap_phi_mux_w_index19_phi_fu_164_p6 <= w_index19_reg_160;
            end if;
        else 
            ap_phi_mux_w_index19_phi_fu_164_p6 <= w_index19_reg_160;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_data_0_val23_phi_reg_342 <= "XXXXXX";
    ap_phi_reg_pp0_iter0_data_1_val24_phi_reg_354 <= "XXXXXX";
    ap_phi_reg_pp0_iter0_data_2_val25_phi_reg_366 <= "XXXXXX";
    ap_phi_reg_pp0_iter0_data_3_val26_phi_reg_378 <= "XXXXXX";
    ap_phi_reg_pp0_iter0_data_4_val27_phi_reg_390 <= "XXXXXX";
    ap_phi_reg_pp0_iter0_data_5_val28_phi_reg_402 <= "XXXXXX";

    ap_ready_assign_proc : process(icmp_ln135_fu_426_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln135_fu_426_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln135_reg_733, ap_enable_reg_pp0_iter1, acc_fu_616_p3, ap_return_0_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1))) then 
            ap_return_0 <= acc_fu_616_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln135_reg_733, ap_enable_reg_pp0_iter1, acc_6_fu_608_p3, ap_return_1_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1))) then 
            ap_return_1 <= acc_6_fu_608_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln135_reg_733, ap_enable_reg_pp0_iter1, acc_7_fu_600_p3, ap_return_2_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1))) then 
            ap_return_2 <= acc_7_fu_600_p3;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln135_reg_733, ap_enable_reg_pp0_iter1, acc_8_fu_592_p3, ap_return_3_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1))) then 
            ap_return_3 <= acc_8_fu_592_p3;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln135_reg_733, acc_9_fu_584_p3, ap_enable_reg_pp0_iter1, ap_return_4_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln135_reg_733 = ap_const_lv1_1))) then 
            ap_return_4 <= acc_9_fu_584_p3;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;

    grp_fu_678_p1 <= grp_fu_678_p10(6 - 1 downto 0);
    grp_fu_678_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_fu_436_p15),12));
    icmp_ln135_fu_426_p2 <= "1" when (ap_phi_mux_w_index19_phi_fu_164_p6 = ap_const_lv5_1D) else "0";
    icmp_ln144_1_fu_514_p2 <= "1" when (outidx_92_q0 = ap_const_lv3_1) else "0";
    icmp_ln144_2_fu_520_p2 <= "1" when (outidx_92_q0 = ap_const_lv3_2) else "0";
    icmp_ln144_3_fu_526_p2 <= "1" when (outidx_92_q0 = ap_const_lv3_3) else "0";
    icmp_ln144_4_fu_532_p2 <= "0" when (grp_fu_678_p3 = ap_const_lv17_0) else "1";
    icmp_ln144_fu_508_p2 <= "1" when (outidx_92_q0 = ap_const_lv3_0) else "0";
    icmp_ln154_fu_630_p2 <= "1" when (signed(in_index_2_fu_624_p2) > signed(ap_const_lv32_5)) else "0";
    in_index_2_fu_624_p2 <= std_logic_vector(unsigned(in_index20_reg_258) + unsigned(ap_const_lv32_1));
    in_index_fu_636_p3 <= 
        ap_const_lv32_0 when (icmp_ln154_fu_630_p2(0) = '1') else 
        in_index_2_fu_624_p2;
    or_ln144_1_fu_543_p2 <= (icmp_ln144_3_fu_526_p2 or icmp_ln144_2_fu_520_p2);
    or_ln144_2_fu_549_p2 <= (or_ln144_1_fu_543_p2 or icmp_ln144_1_fu_514_p2);
    or_ln144_3_fu_555_p2 <= (or_ln144_fu_537_p2 or or_ln144_2_fu_549_p2);
    or_ln144_4_fu_572_p2 <= (icmp_ln144_fu_508_p2 or icmp_ln144_1_fu_514_p2);
    or_ln144_5_fu_578_p2 <= (or_ln144_4_fu_572_p2 or or_ln144_1_fu_543_p2);
    or_ln144_fu_537_p2 <= (icmp_ln144_fu_508_p2 or icmp_ln144_4_fu_532_p2);
    outidx_92_address0 <= zext_ln135_fu_414_p1(5 - 1 downto 0);

    outidx_92_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outidx_92_ce0_local <= ap_const_logic_1;
        else 
            outidx_92_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_476_p11 <= "XXXXXXXXXXXXXXXX";
    w18_address0 <= zext_ln135_fu_414_p1(5 - 1 downto 0);

    w18_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w18_ce0_local <= ap_const_logic_1;
        else 
            w18_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_index_fu_420_p2 <= std_logic_vector(unsigned(ap_phi_mux_w_index19_phi_fu_164_p6) + unsigned(ap_const_lv5_1));
    zext_ln135_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_w_index19_phi_fu_164_p6),64));
end behav;
