// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_4u_array_ap_ufixed_6_0_4_0_0_4u_relu_config7_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer5_out_dout,
        layer5_out_empty_n,
        layer5_out_read,
        layer5_out_num_data_valid,
        layer5_out_fifo_cap,
        layer7_out_din,
        layer7_out_full_n,
        layer7_out_write,
        layer7_out_num_data_valid,
        layer7_out_fifo_cap,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [75:0] layer5_out_dout;
input   layer5_out_empty_n;
output   layer5_out_read;
input  [8:0] layer5_out_num_data_valid;
input  [8:0] layer5_out_fifo_cap;
output  [23:0] layer7_out_din;
input   layer7_out_full_n;
output   layer7_out_write;
input  [31:0] layer7_out_num_data_valid;
input  [31:0] layer7_out_fifo_cap;
output   start_out;
output   start_write;

reg ap_idle;
reg layer5_out_read;
reg layer7_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [0:0] icmp_ln41_fu_659_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage1_pp0_iter1_reg;
reg    ap_block_pp0_stage1_11001;
reg    ap_loop_exit_ready_delayed;
reg    layer5_out_blk_n;
reg    ap_done_reg;
wire    ap_block_pp0_stage0_grp1;
reg    layer7_out_blk_n;
wire    ap_block_pp0_stage1_grp2;
reg   [75:0] layer5_out_read_reg_853;
reg    ap_block_state1_pp0_stage0_iter0_grp1;
reg    ap_block_pp0_stage0_11001_grp1;
wire   [18:0] trunc_ln44_fu_138_p1;
reg   [18:0] trunc_ln44_reg_873;
reg   [18:0] trunc_ln44_s_reg_878;
reg   [18:0] trunc_ln44_5_reg_883;
reg   [18:0] trunc_ln44_6_reg_888;
reg   [0:0] tmp_reg_893;
wire   [0:0] icmp_ln52_fu_184_p2;
reg   [0:0] icmp_ln52_reg_900;
reg   [8:0] tmp_s_reg_905;
reg   [0:0] tmp_107_reg_910;
wire   [0:0] icmp_ln52_24_fu_218_p2;
reg   [0:0] icmp_ln52_24_reg_917;
reg   [8:0] tmp_78_reg_922;
reg   [0:0] tmp_113_reg_927;
wire   [0:0] icmp_ln52_26_fu_252_p2;
reg   [0:0] icmp_ln52_26_reg_934;
reg   [8:0] tmp_80_reg_939;
reg   [0:0] tmp_118_reg_944;
wire   [0:0] icmp_ln52_28_fu_286_p2;
reg   [0:0] icmp_ln52_28_reg_951;
reg   [8:0] tmp_82_reg_956;
wire   [0:0] icmp_ln51_fu_305_p2;
reg   [0:0] icmp_ln51_reg_961;
wire    ap_block_pp0_stage1_11001_grp0;
reg    ap_block_pp0_stage1_subdone_grp0_done_reg;
wire    ap_block_pp0_stage1_subdone_grp0;
wire   [5:0] add_ln52_fu_355_p2;
reg   [5:0] add_ln52_reg_966;
wire   [0:0] empty_fu_386_p2;
reg   [0:0] empty_reg_972;
wire   [0:0] icmp_ln51_11_fu_392_p2;
reg   [0:0] icmp_ln51_11_reg_978;
wire   [5:0] add_ln52_11_fu_442_p2;
reg   [5:0] add_ln52_11_reg_983;
wire   [0:0] empty_58_fu_473_p2;
reg   [0:0] empty_58_reg_989;
wire   [0:0] icmp_ln51_12_fu_479_p2;
reg   [0:0] icmp_ln51_12_reg_995;
wire   [5:0] add_ln52_12_fu_529_p2;
reg   [5:0] add_ln52_12_reg_1000;
wire   [0:0] empty_59_fu_560_p2;
reg   [0:0] empty_59_reg_1006;
wire   [0:0] icmp_ln51_13_fu_566_p2;
reg   [0:0] icmp_ln51_13_reg_1012;
wire   [5:0] add_ln52_13_fu_616_p2;
reg   [5:0] add_ln52_13_reg_1017;
wire   [0:0] empty_60_fu_647_p2;
reg   [0:0] empty_60_reg_1023;
wire   [7:0] i_fu_653_p2;
reg   [7:0] i_reg_1029;
wire   [5:0] out_data_fu_700_p3;
reg   [5:0] out_data_reg_1038;
reg    ap_block_pp0_stage0_11001_grp0;
reg    ap_block_pp0_stage0_subdone_grp0_done_reg;
reg    ap_block_pp0_stage0_subdone_grp0;
reg    ap_block_pp0_stage0_subdone;
wire   [5:0] out_data_6_fu_742_p3;
reg   [5:0] out_data_6_reg_1043;
wire   [5:0] out_data_7_fu_784_p3;
reg   [5:0] out_data_7_reg_1048;
wire   [5:0] out_data_8_fu_826_p3;
reg   [5:0] out_data_8_reg_1053;
reg   [7:0] i1_fu_116;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_subdone_grp0_done_reg_iter0;
wire    ap_block_pp0_stage1;
reg    ap_block_pp0_stage1_01001_grp2;
reg    ap_block_pp0_stage1_11001_grp2;
wire   [2:0] trunc_ln52_fu_180_p1;
wire   [2:0] tmp_77_fu_208_p4;
wire   [2:0] tmp_79_fu_242_p4;
wire   [2:0] tmp_81_fu_276_p4;
wire    ap_block_pp0_stage1_grp0;
wire   [0:0] tmp_104_fu_333_p3;
wire   [0:0] or_ln52_fu_340_p2;
wire   [0:0] tmp_102_fu_319_p3;
wire   [0:0] and_ln52_fu_345_p2;
wire   [5:0] trunc_ln4_fu_310_p4;
wire   [5:0] zext_ln52_fu_351_p1;
wire   [0:0] tmp_103_fu_326_p3;
wire   [0:0] tmp_106_fu_366_p3;
wire   [0:0] not_tmp_119_fu_374_p2;
wire   [0:0] icmp_ln52_23_fu_361_p2;
wire   [0:0] and_ln52_36_fu_380_p2;
wire   [0:0] tmp_111_fu_420_p3;
wire   [0:0] or_ln52_37_fu_427_p2;
wire   [0:0] tmp_109_fu_406_p3;
wire   [0:0] and_ln52_11_fu_432_p2;
wire   [5:0] trunc_ln52_s_fu_397_p4;
wire   [5:0] zext_ln52_11_fu_438_p1;
wire   [0:0] tmp_110_fu_413_p3;
wire   [0:0] tmp_112_fu_453_p3;
wire   [0:0] not_tmp_126_fu_461_p2;
wire   [0:0] icmp_ln52_25_fu_448_p2;
wire   [0:0] and_ln52_38_fu_467_p2;
wire   [0:0] tmp_116_fu_507_p3;
wire   [0:0] or_ln52_40_fu_514_p2;
wire   [0:0] tmp_114_fu_493_p3;
wire   [0:0] and_ln52_12_fu_519_p2;
wire   [5:0] trunc_ln52_5_fu_484_p4;
wire   [5:0] zext_ln52_12_fu_525_p1;
wire   [0:0] tmp_115_fu_500_p3;
wire   [0:0] tmp_117_fu_540_p3;
wire   [0:0] not_tmp_133_fu_548_p2;
wire   [0:0] icmp_ln52_27_fu_535_p2;
wire   [0:0] and_ln52_40_fu_554_p2;
wire   [0:0] tmp_121_fu_594_p3;
wire   [0:0] or_ln52_43_fu_601_p2;
wire   [0:0] tmp_119_fu_580_p3;
wire   [0:0] and_ln52_13_fu_606_p2;
wire   [5:0] trunc_ln52_6_fu_571_p4;
wire   [5:0] zext_ln52_13_fu_612_p1;
wire   [0:0] tmp_120_fu_587_p3;
wire   [0:0] tmp_122_fu_627_p3;
wire   [0:0] not_tmp_140_fu_635_p2;
wire   [0:0] icmp_ln52_29_fu_622_p2;
wire   [0:0] and_ln52_41_fu_641_p2;
wire    ap_block_pp0_stage0_grp0;
wire   [0:0] xor_ln52_fu_669_p2;
wire   [0:0] or_ln52_35_fu_665_p2;
wire   [5:0] select_ln52_fu_679_p3;
wire   [0:0] or_ln52_36_fu_674_p2;
wire   [5:0] select_ln52_35_fu_685_p3;
wire   [5:0] select_ln52_36_fu_693_p3;
wire   [0:0] xor_ln52_11_fu_711_p2;
wire   [0:0] or_ln52_38_fu_707_p2;
wire   [5:0] select_ln52_37_fu_721_p3;
wire   [0:0] or_ln52_39_fu_716_p2;
wire   [5:0] select_ln52_38_fu_727_p3;
wire   [5:0] select_ln52_39_fu_735_p3;
wire   [0:0] xor_ln52_12_fu_753_p2;
wire   [0:0] or_ln52_41_fu_749_p2;
wire   [5:0] select_ln52_40_fu_763_p3;
wire   [0:0] or_ln52_42_fu_758_p2;
wire   [5:0] select_ln52_41_fu_769_p3;
wire   [5:0] select_ln52_42_fu_777_p3;
wire   [0:0] xor_ln52_13_fu_795_p2;
wire   [0:0] or_ln52_44_fu_791_p2;
wire   [5:0] select_ln52_43_fu_805_p3;
wire   [0:0] or_ln52_45_fu_800_p2;
wire   [5:0] select_ln52_44_fu_811_p3;
wire   [5:0] select_ln52_45_fu_819_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_done_sig;
reg    ap_condition_754;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp0_done_reg = 1'b0;
#0 i1_fu_116 = 8'd0;
#0 ap_block_pp0_stage0_subdone_grp0_done_reg_iter0 = 1'b0;
end

myproject_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp0)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp0_done_reg_iter0 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg_iter0 <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp0)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg_iter0 <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp0)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage1_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_754)) begin
            i1_fu_116 <= 8'd0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i1_fu_116 <= i_reg_1029;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln52_11_reg_983 <= add_ln52_11_fu_442_p2;
        add_ln52_12_reg_1000 <= add_ln52_12_fu_529_p2;
        add_ln52_13_reg_1017 <= add_ln52_13_fu_616_p2;
        add_ln52_reg_966 <= add_ln52_fu_355_p2;
        empty_58_reg_989 <= empty_58_fu_473_p2;
        empty_59_reg_1006 <= empty_59_fu_560_p2;
        empty_60_reg_1023 <= empty_60_fu_647_p2;
        empty_reg_972 <= empty_fu_386_p2;
        icmp_ln51_11_reg_978 <= icmp_ln51_11_fu_392_p2;
        icmp_ln51_12_reg_995 <= icmp_ln51_12_fu_479_p2;
        icmp_ln51_13_reg_1012 <= icmp_ln51_13_fu_566_p2;
        icmp_ln51_reg_961 <= icmp_ln51_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage1;
        i_reg_1029 <= i_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln52_24_reg_917 <= icmp_ln52_24_fu_218_p2;
        icmp_ln52_26_reg_934 <= icmp_ln52_26_fu_252_p2;
        icmp_ln52_28_reg_951 <= icmp_ln52_28_fu_286_p2;
        icmp_ln52_reg_900 <= icmp_ln52_fu_184_p2;
        layer5_out_read_reg_853 <= layer5_out_dout;
        tmp_107_reg_910 <= layer5_out_dout[32'd37];
        tmp_113_reg_927 <= layer5_out_dout[32'd56];
        tmp_118_reg_944 <= layer5_out_dout[32'd75];
        tmp_78_reg_922 <= {{layer5_out_dout[37:29]}};
        tmp_80_reg_939 <= {{layer5_out_dout[56:48]}};
        tmp_82_reg_956 <= {{layer5_out_dout[75:67]}};
        tmp_reg_893 <= layer5_out_dout[32'd18];
        tmp_s_reg_905 <= {{layer5_out_dout[18:10]}};
        trunc_ln44_5_reg_883 <= {{layer5_out_dout[56:38]}};
        trunc_ln44_6_reg_888 <= {{layer5_out_dout[75:57]}};
        trunc_ln44_reg_873 <= trunc_ln44_fu_138_p1;
        trunc_ln44_s_reg_878 <= {{layer5_out_dout[37:19]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_data_6_reg_1043 <= out_data_6_fu_742_p3;
        out_data_7_reg_1048 <= out_data_7_fu_784_p3;
        out_data_8_reg_1053 <= out_data_8_fu_826_p3;
        out_data_reg_1038 <= out_data_fu_700_p3;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_659_p2 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_condition_exit_pp0_iter0_stage1_pp0_iter1_reg) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer5_out_blk_n = layer5_out_empty_n;
    end else begin
        layer5_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer5_out_read = 1'b1;
    end else begin
        layer5_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_grp2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer7_out_blk_n = layer7_out_full_n;
    end else begin
        layer7_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_grp2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer7_out_write = 1'b1;
    end else begin
        layer7_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_11_fu_442_p2 = (trunc_ln52_s_fu_397_p4 + zext_ln52_11_fu_438_p1);

assign add_ln52_12_fu_529_p2 = (trunc_ln52_5_fu_484_p4 + zext_ln52_12_fu_525_p1);

assign add_ln52_13_fu_616_p2 = (trunc_ln52_6_fu_571_p4 + zext_ln52_13_fu_612_p1);

assign add_ln52_fu_355_p2 = (trunc_ln4_fu_310_p4 + zext_ln52_fu_351_p1);

assign and_ln52_11_fu_432_p2 = (tmp_109_fu_406_p3 & or_ln52_37_fu_427_p2);

assign and_ln52_12_fu_519_p2 = (tmp_114_fu_493_p3 & or_ln52_40_fu_514_p2);

assign and_ln52_13_fu_606_p2 = (tmp_119_fu_580_p3 & or_ln52_43_fu_601_p2);

assign and_ln52_36_fu_380_p2 = (tmp_106_fu_366_p3 | not_tmp_119_fu_374_p2);

assign and_ln52_38_fu_467_p2 = (tmp_112_fu_453_p3 | not_tmp_126_fu_461_p2);

assign and_ln52_40_fu_554_p2 = (tmp_117_fu_540_p3 | not_tmp_133_fu_548_p2);

assign and_ln52_41_fu_641_p2 = (tmp_122_fu_627_p3 | not_tmp_140_fu_635_p2);

assign and_ln52_fu_345_p2 = (tmp_102_fu_319_p3 & or_ln52_fu_340_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_pp0_stage0_11001_grp0 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0_grp1)));
end

assign ap_block_pp0_stage0_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0_grp1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp0 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001_grp2 = ((layer7_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((layer7_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001_grp2 = ((layer7_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((layer7_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0_grp1 = ((ap_done_reg == 1'b1) | (layer5_out_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_754 = ((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg_iter0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = internal_ap_ready;

assign empty_58_fu_473_p2 = (icmp_ln52_25_fu_448_p2 & and_ln52_38_fu_467_p2);

assign empty_59_fu_560_p2 = (icmp_ln52_27_fu_535_p2 & and_ln52_40_fu_554_p2);

assign empty_60_fu_647_p2 = (icmp_ln52_29_fu_622_p2 & and_ln52_41_fu_641_p2);

assign empty_fu_386_p2 = (icmp_ln52_23_fu_361_p2 & and_ln52_36_fu_380_p2);

assign i_fu_653_p2 = (i1_fu_116 + 8'd1);

assign icmp_ln41_fu_659_p2 = ((i1_fu_116 == 8'd168) ? 1'b1 : 1'b0);

assign icmp_ln51_11_fu_392_p2 = (($signed(trunc_ln44_s_reg_878) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_12_fu_479_p2 = (($signed(trunc_ln44_5_reg_883) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_13_fu_566_p2 = (($signed(trunc_ln44_6_reg_888) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_305_p2 = (($signed(trunc_ln44_reg_873) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln52_23_fu_361_p2 = ((tmp_s_reg_905 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_24_fu_218_p2 = ((tmp_77_fu_208_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_25_fu_448_p2 = ((tmp_78_reg_922 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_26_fu_252_p2 = ((tmp_79_fu_242_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_27_fu_535_p2 = ((tmp_80_reg_939 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_28_fu_286_p2 = ((tmp_81_fu_276_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_29_fu_622_p2 = ((tmp_82_reg_956 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_184_p2 = ((trunc_ln52_fu_180_p1 != 3'd0) ? 1'b1 : 1'b0);

assign layer7_out_din = {{{{out_data_8_reg_1053}, {out_data_7_reg_1048}}, {out_data_6_reg_1043}}, {out_data_reg_1038}};

assign not_tmp_119_fu_374_p2 = (tmp_103_fu_326_p3 ^ 1'd1);

assign not_tmp_126_fu_461_p2 = (tmp_110_fu_413_p3 ^ 1'd1);

assign not_tmp_133_fu_548_p2 = (tmp_115_fu_500_p3 ^ 1'd1);

assign not_tmp_140_fu_635_p2 = (tmp_120_fu_587_p3 ^ 1'd1);

assign or_ln52_35_fu_665_p2 = (tmp_reg_893 | empty_reg_972);

assign or_ln52_36_fu_674_p2 = (xor_ln52_fu_669_p2 | tmp_reg_893);

assign or_ln52_37_fu_427_p2 = (tmp_111_fu_420_p3 | icmp_ln52_24_reg_917);

assign or_ln52_38_fu_707_p2 = (tmp_107_reg_910 | empty_58_reg_989);

assign or_ln52_39_fu_716_p2 = (xor_ln52_11_fu_711_p2 | tmp_107_reg_910);

assign or_ln52_40_fu_514_p2 = (tmp_116_fu_507_p3 | icmp_ln52_26_reg_934);

assign or_ln52_41_fu_749_p2 = (tmp_113_reg_927 | empty_59_reg_1006);

assign or_ln52_42_fu_758_p2 = (xor_ln52_12_fu_753_p2 | tmp_113_reg_927);

assign or_ln52_43_fu_601_p2 = (tmp_121_fu_594_p3 | icmp_ln52_28_reg_951);

assign or_ln52_44_fu_791_p2 = (tmp_118_reg_944 | empty_60_reg_1023);

assign or_ln52_45_fu_800_p2 = (xor_ln52_13_fu_795_p2 | tmp_118_reg_944);

assign or_ln52_fu_340_p2 = (tmp_104_fu_333_p3 | icmp_ln52_reg_900);

assign out_data_6_fu_742_p3 = ((icmp_ln51_11_reg_978[0:0] == 1'b1) ? select_ln52_39_fu_735_p3 : 6'd0);

assign out_data_7_fu_784_p3 = ((icmp_ln51_12_reg_995[0:0] == 1'b1) ? select_ln52_42_fu_777_p3 : 6'd0);

assign out_data_8_fu_826_p3 = ((icmp_ln51_13_reg_1012[0:0] == 1'b1) ? select_ln52_45_fu_819_p3 : 6'd0);

assign out_data_fu_700_p3 = ((icmp_ln51_reg_961[0:0] == 1'b1) ? select_ln52_36_fu_693_p3 : 6'd0);

assign select_ln52_35_fu_685_p3 = ((or_ln52_35_fu_665_p2[0:0] == 1'b1) ? select_ln52_fu_679_p3 : 6'd63);

assign select_ln52_36_fu_693_p3 = ((or_ln52_36_fu_674_p2[0:0] == 1'b1) ? select_ln52_35_fu_685_p3 : add_ln52_reg_966);

assign select_ln52_37_fu_721_p3 = ((tmp_107_reg_910[0:0] == 1'b1) ? 6'd0 : add_ln52_11_reg_983);

assign select_ln52_38_fu_727_p3 = ((or_ln52_38_fu_707_p2[0:0] == 1'b1) ? select_ln52_37_fu_721_p3 : 6'd63);

assign select_ln52_39_fu_735_p3 = ((or_ln52_39_fu_716_p2[0:0] == 1'b1) ? select_ln52_38_fu_727_p3 : add_ln52_11_reg_983);

assign select_ln52_40_fu_763_p3 = ((tmp_113_reg_927[0:0] == 1'b1) ? 6'd0 : add_ln52_12_reg_1000);

assign select_ln52_41_fu_769_p3 = ((or_ln52_41_fu_749_p2[0:0] == 1'b1) ? select_ln52_40_fu_763_p3 : 6'd63);

assign select_ln52_42_fu_777_p3 = ((or_ln52_42_fu_758_p2[0:0] == 1'b1) ? select_ln52_41_fu_769_p3 : add_ln52_12_reg_1000);

assign select_ln52_43_fu_805_p3 = ((tmp_118_reg_944[0:0] == 1'b1) ? 6'd0 : add_ln52_13_reg_1017);

assign select_ln52_44_fu_811_p3 = ((or_ln52_44_fu_791_p2[0:0] == 1'b1) ? select_ln52_43_fu_805_p3 : 6'd63);

assign select_ln52_45_fu_819_p3 = ((or_ln52_45_fu_800_p2[0:0] == 1'b1) ? select_ln52_44_fu_811_p3 : add_ln52_13_reg_1017);

assign select_ln52_fu_679_p3 = ((tmp_reg_893[0:0] == 1'b1) ? 6'd0 : add_ln52_reg_966);

assign start_out = real_start;

assign tmp_102_fu_319_p3 = layer5_out_read_reg_853[32'd3];

assign tmp_103_fu_326_p3 = layer5_out_read_reg_853[32'd9];

assign tmp_104_fu_333_p3 = layer5_out_read_reg_853[32'd4];

assign tmp_106_fu_366_p3 = add_ln52_fu_355_p2[32'd5];

assign tmp_109_fu_406_p3 = layer5_out_read_reg_853[32'd22];

assign tmp_110_fu_413_p3 = layer5_out_read_reg_853[32'd28];

assign tmp_111_fu_420_p3 = layer5_out_read_reg_853[32'd23];

assign tmp_112_fu_453_p3 = add_ln52_11_fu_442_p2[32'd5];

assign tmp_114_fu_493_p3 = layer5_out_read_reg_853[32'd41];

assign tmp_115_fu_500_p3 = layer5_out_read_reg_853[32'd47];

assign tmp_116_fu_507_p3 = layer5_out_read_reg_853[32'd42];

assign tmp_117_fu_540_p3 = add_ln52_12_fu_529_p2[32'd5];

assign tmp_119_fu_580_p3 = layer5_out_read_reg_853[32'd60];

assign tmp_120_fu_587_p3 = layer5_out_read_reg_853[32'd66];

assign tmp_121_fu_594_p3 = layer5_out_read_reg_853[32'd61];

assign tmp_122_fu_627_p3 = add_ln52_13_fu_616_p2[32'd5];

assign tmp_77_fu_208_p4 = {{layer5_out_dout[21:19]}};

assign tmp_79_fu_242_p4 = {{layer5_out_dout[40:38]}};

assign tmp_81_fu_276_p4 = {{layer5_out_dout[59:57]}};

assign trunc_ln44_fu_138_p1 = layer5_out_dout[18:0];

assign trunc_ln4_fu_310_p4 = {{layer5_out_read_reg_853[9:4]}};

assign trunc_ln52_5_fu_484_p4 = {{layer5_out_read_reg_853[47:42]}};

assign trunc_ln52_6_fu_571_p4 = {{layer5_out_read_reg_853[66:61]}};

assign trunc_ln52_fu_180_p1 = layer5_out_dout[2:0];

assign trunc_ln52_s_fu_397_p4 = {{layer5_out_read_reg_853[28:23]}};

assign xor_ln52_11_fu_711_p2 = (empty_58_reg_989 ^ 1'd1);

assign xor_ln52_12_fu_753_p2 = (empty_59_reg_1006 ^ 1'd1);

assign xor_ln52_13_fu_795_p2 = (empty_60_reg_1023 ^ 1'd1);

assign xor_ln52_fu_669_p2 = (empty_reg_972 ^ 1'd1);

assign zext_ln52_11_fu_438_p1 = and_ln52_11_fu_432_p2;

assign zext_ln52_12_fu_525_p1 = and_ln52_12_fu_519_p2;

assign zext_ln52_13_fu_612_p1 = and_ln52_13_fu_606_p2;

assign zext_ln52_fu_351_p1 = and_ln52_fu_345_p2;

endmodule //myproject_relu_array_ap_fixed_4u_array_ap_ufixed_6_0_4_0_0_4u_relu_config7_s
