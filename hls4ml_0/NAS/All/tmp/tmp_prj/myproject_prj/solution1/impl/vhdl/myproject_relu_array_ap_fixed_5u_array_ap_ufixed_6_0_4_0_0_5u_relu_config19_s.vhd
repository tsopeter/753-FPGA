-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_5u_array_ap_ufixed_6_0_4_0_0_5u_relu_config19_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer18_out_dout : IN STD_LOGIC_VECTOR (79 downto 0);
    layer18_out_empty_n : IN STD_LOGIC;
    layer18_out_read : OUT STD_LOGIC;
    layer18_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer18_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer19_out_din : OUT STD_LOGIC_VECTOR (29 downto 0);
    layer19_out_full_n : IN STD_LOGIC;
    layer19_out_write : OUT STD_LOGIC;
    layer19_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer19_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of myproject_relu_array_ap_fixed_5u_array_ap_ufixed_6_0_4_0_0_5u_relu_config19_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer18_out_blk_n : STD_LOGIC;
    signal layer19_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln44_fu_121_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln52_fu_197_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_80_fu_215_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_fu_189_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln3_fu_179_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_fu_235_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_245_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_fu_239_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_79_fu_207_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_fu_261_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_146_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_23_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_42_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_171_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_35_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_305_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_36_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_35_fu_313_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln51_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_36_fu_321_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln44_s_fu_125_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_77_fu_369_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_85_fu_393_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_24_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_37_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_361_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_11_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_s_fu_351_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_11_fu_413_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_86_fu_423_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_11_fu_417_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_84_fu_385_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_fu_439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_153_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_25_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_44_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_56_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_fu_343_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_11_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_38_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_37_fu_483_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_39_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_38_fu_491_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln51_11_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_39_fu_499_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln44_5_fu_135_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_90_fu_547_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_92_fu_571_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_26_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_40_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_fu_539_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_12_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_5_fu_529_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_12_fu_591_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_93_fu_601_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_12_fu_595_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_91_fu_563_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_fu_617_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_160_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_27_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_46_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_57_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_fu_521_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_12_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_41_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_40_fu_661_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_42_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_41_fu_669_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln51_12_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_42_fu_677_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln44_6_fu_145_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_97_fu_725_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_99_fu_749_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_28_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_43_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_fu_717_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_13_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_6_fu_707_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_13_fu_769_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_100_fu_779_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_13_fu_773_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_98_fu_741_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_101_fu_795_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_167_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_29_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_48_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_58_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_95_fu_699_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_13_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_44_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_43_fu_839_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_45_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_44_fu_847_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln51_13_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_45_fu_855_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln44_7_fu_155_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_104_fu_903_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_106_fu_927_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_30_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_46_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_103_fu_895_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_14_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_7_fu_885_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_14_fu_947_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_107_fu_957_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_14_fu_951_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_105_fu_919_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_fu_973_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_174_fu_981_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_31_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_49_fu_987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_59_fu_993_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_102_fu_877_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_14_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_47_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_46_fu_1017_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_48_fu_1011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_47_fu_1025_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln51_14_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_48_fu_1033_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_0_4_0_0_0_load_fu_1041_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_0_3_0_0_0_load_fu_863_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_0_2_0_0_0_load_fu_685_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_0_1_0_0_0_load_fu_507_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_0_0_0_0_0_load_fu_329_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln52_11_fu_417_p2 <= std_logic_vector(unsigned(trunc_ln52_s_fu_351_p4) + unsigned(zext_ln52_11_fu_413_p1));
    add_ln52_12_fu_595_p2 <= std_logic_vector(unsigned(trunc_ln52_5_fu_529_p4) + unsigned(zext_ln52_12_fu_591_p1));
    add_ln52_13_fu_773_p2 <= std_logic_vector(unsigned(trunc_ln52_6_fu_707_p4) + unsigned(zext_ln52_13_fu_769_p1));
    add_ln52_14_fu_951_p2 <= std_logic_vector(unsigned(trunc_ln52_7_fu_885_p4) + unsigned(zext_ln52_14_fu_947_p1));
    add_ln52_fu_239_p2 <= std_logic_vector(unsigned(trunc_ln3_fu_179_p4) + unsigned(zext_ln52_fu_235_p1));
    and_ln52_11_fu_407_p2 <= (tmp_83_fu_361_p3 and or_ln52_37_fu_401_p2);
    and_ln52_12_fu_585_p2 <= (tmp_89_fu_539_p3 and or_ln52_40_fu_579_p2);
    and_ln52_13_fu_763_p2 <= (tmp_96_fu_717_p3 and or_ln52_43_fu_757_p2);
    and_ln52_14_fu_941_p2 <= (tmp_103_fu_895_p3 and or_ln52_46_fu_935_p2);
    and_ln52_42_fu_275_p2 <= (tmp_81_fu_261_p3 or not_tmp_146_fu_269_p2);
    and_ln52_44_fu_453_p2 <= (tmp_87_fu_439_p3 or not_tmp_153_fu_447_p2);
    and_ln52_46_fu_631_p2 <= (tmp_94_fu_617_p3 or not_tmp_160_fu_625_p2);
    and_ln52_48_fu_809_p2 <= (tmp_101_fu_795_p3 or not_tmp_167_fu_803_p2);
    and_ln52_49_fu_987_p2 <= (tmp_108_fu_973_p3 or not_tmp_174_fu_981_p2);
    and_ln52_fu_229_p2 <= (tmp_78_fu_189_p3 and or_ln52_fu_223_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer18_out_empty_n, layer19_out_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer19_out_full_n = ap_const_logic_0) or (layer18_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    empty_56_fu_459_p2 <= (icmp_ln52_25_fu_433_p2 and and_ln52_44_fu_453_p2);
    empty_57_fu_637_p2 <= (icmp_ln52_27_fu_611_p2 and and_ln52_46_fu_631_p2);
    empty_58_fu_815_p2 <= (icmp_ln52_29_fu_789_p2 and and_ln52_48_fu_809_p2);
    empty_59_fu_993_p2 <= (icmp_ln52_31_fu_967_p2 and and_ln52_49_fu_987_p2);
    empty_fu_281_p2 <= (icmp_ln52_23_fu_255_p2 and and_ln52_42_fu_275_p2);
    icmp_ln51_11_fu_337_p2 <= "1" when (signed(trunc_ln44_s_fu_125_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_12_fu_515_p2 <= "1" when (signed(trunc_ln44_5_fu_135_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_13_fu_693_p2 <= "1" when (signed(trunc_ln44_6_fu_145_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_14_fu_871_p2 <= "1" when (signed(trunc_ln44_7_fu_155_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_fu_165_p2 <= "1" when (signed(trunc_ln44_fu_121_p1) > signed(ap_const_lv16_0)) else "0";
    icmp_ln52_23_fu_255_p2 <= "1" when (tmp_s_fu_245_p4 = ap_const_lv6_0) else "0";
    icmp_ln52_24_fu_379_p2 <= "0" when (tmp_77_fu_369_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_25_fu_433_p2 <= "1" when (tmp_86_fu_423_p4 = ap_const_lv6_0) else "0";
    icmp_ln52_26_fu_557_p2 <= "0" when (tmp_90_fu_547_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_27_fu_611_p2 <= "1" when (tmp_93_fu_601_p4 = ap_const_lv6_0) else "0";
    icmp_ln52_28_fu_735_p2 <= "0" when (tmp_97_fu_725_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_29_fu_789_p2 <= "1" when (tmp_100_fu_779_p4 = ap_const_lv6_0) else "0";
    icmp_ln52_30_fu_913_p2 <= "0" when (tmp_104_fu_903_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_31_fu_967_p2 <= "1" when (tmp_107_fu_957_p4 = ap_const_lv6_0) else "0";
    icmp_ln52_fu_201_p2 <= "0" when (trunc_ln52_fu_197_p1 = ap_const_lv3_0) else "1";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer18_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer18_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer18_out_blk_n <= layer18_out_empty_n;
        else 
            layer18_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer18_out_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer18_out_read <= ap_const_logic_1;
        else 
            layer18_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer19_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer19_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer19_out_blk_n <= layer19_out_full_n;
        else 
            layer19_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer19_out_din <= ((((out_data_0_4_0_0_0_load_fu_1041_p3 & out_data_0_3_0_0_0_load_fu_863_p3) & out_data_0_2_0_0_0_load_fu_685_p3) & out_data_0_1_0_0_0_load_fu_507_p3) & out_data_0_0_0_0_0_load_fu_329_p3);

    layer19_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer19_out_write <= ap_const_logic_1;
        else 
            layer19_out_write <= ap_const_logic_0;
        end if; 
    end process;

    not_tmp_146_fu_269_p2 <= (tmp_79_fu_207_p3 xor ap_const_lv1_1);
    not_tmp_153_fu_447_p2 <= (tmp_84_fu_385_p3 xor ap_const_lv1_1);
    not_tmp_160_fu_625_p2 <= (tmp_91_fu_563_p3 xor ap_const_lv1_1);
    not_tmp_167_fu_803_p2 <= (tmp_98_fu_741_p3 xor ap_const_lv1_1);
    not_tmp_174_fu_981_p2 <= (tmp_105_fu_919_p3 xor ap_const_lv1_1);
    or_ln52_35_fu_287_p2 <= (tmp_fu_171_p3 or empty_fu_281_p2);
    or_ln52_36_fu_299_p2 <= (xor_ln52_fu_293_p2 or tmp_fu_171_p3);
    or_ln52_37_fu_401_p2 <= (tmp_85_fu_393_p3 or icmp_ln52_24_fu_379_p2);
    or_ln52_38_fu_465_p2 <= (tmp_82_fu_343_p3 or empty_56_fu_459_p2);
    or_ln52_39_fu_477_p2 <= (xor_ln52_11_fu_471_p2 or tmp_82_fu_343_p3);
    or_ln52_40_fu_579_p2 <= (tmp_92_fu_571_p3 or icmp_ln52_26_fu_557_p2);
    or_ln52_41_fu_643_p2 <= (tmp_88_fu_521_p3 or empty_57_fu_637_p2);
    or_ln52_42_fu_655_p2 <= (xor_ln52_12_fu_649_p2 or tmp_88_fu_521_p3);
    or_ln52_43_fu_757_p2 <= (tmp_99_fu_749_p3 or icmp_ln52_28_fu_735_p2);
    or_ln52_44_fu_821_p2 <= (tmp_95_fu_699_p3 or empty_58_fu_815_p2);
    or_ln52_45_fu_833_p2 <= (xor_ln52_13_fu_827_p2 or tmp_95_fu_699_p3);
    or_ln52_46_fu_935_p2 <= (tmp_106_fu_927_p3 or icmp_ln52_30_fu_913_p2);
    or_ln52_47_fu_999_p2 <= (tmp_102_fu_877_p3 or empty_59_fu_993_p2);
    or_ln52_48_fu_1011_p2 <= (xor_ln52_14_fu_1005_p2 or tmp_102_fu_877_p3);
    or_ln52_fu_223_p2 <= (tmp_80_fu_215_p3 or icmp_ln52_fu_201_p2);
    out_data_0_0_0_0_0_load_fu_329_p3 <= 
        select_ln52_36_fu_321_p3 when (icmp_ln51_fu_165_p2(0) = '1') else 
        ap_const_lv6_0;
    out_data_0_1_0_0_0_load_fu_507_p3 <= 
        select_ln52_39_fu_499_p3 when (icmp_ln51_11_fu_337_p2(0) = '1') else 
        ap_const_lv6_0;
    out_data_0_2_0_0_0_load_fu_685_p3 <= 
        select_ln52_42_fu_677_p3 when (icmp_ln51_12_fu_515_p2(0) = '1') else 
        ap_const_lv6_0;
    out_data_0_3_0_0_0_load_fu_863_p3 <= 
        select_ln52_45_fu_855_p3 when (icmp_ln51_13_fu_693_p2(0) = '1') else 
        ap_const_lv6_0;
    out_data_0_4_0_0_0_load_fu_1041_p3 <= 
        select_ln52_48_fu_1033_p3 when (icmp_ln51_14_fu_871_p2(0) = '1') else 
        ap_const_lv6_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln52_35_fu_313_p3 <= 
        select_ln52_fu_305_p3 when (or_ln52_35_fu_287_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_36_fu_321_p3 <= 
        select_ln52_35_fu_313_p3 when (or_ln52_36_fu_299_p2(0) = '1') else 
        add_ln52_fu_239_p2;
    select_ln52_37_fu_483_p3 <= 
        ap_const_lv6_0 when (tmp_82_fu_343_p3(0) = '1') else 
        add_ln52_11_fu_417_p2;
    select_ln52_38_fu_491_p3 <= 
        select_ln52_37_fu_483_p3 when (or_ln52_38_fu_465_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_39_fu_499_p3 <= 
        select_ln52_38_fu_491_p3 when (or_ln52_39_fu_477_p2(0) = '1') else 
        add_ln52_11_fu_417_p2;
    select_ln52_40_fu_661_p3 <= 
        ap_const_lv6_0 when (tmp_88_fu_521_p3(0) = '1') else 
        add_ln52_12_fu_595_p2;
    select_ln52_41_fu_669_p3 <= 
        select_ln52_40_fu_661_p3 when (or_ln52_41_fu_643_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_42_fu_677_p3 <= 
        select_ln52_41_fu_669_p3 when (or_ln52_42_fu_655_p2(0) = '1') else 
        add_ln52_12_fu_595_p2;
    select_ln52_43_fu_839_p3 <= 
        ap_const_lv6_0 when (tmp_95_fu_699_p3(0) = '1') else 
        add_ln52_13_fu_773_p2;
    select_ln52_44_fu_847_p3 <= 
        select_ln52_43_fu_839_p3 when (or_ln52_44_fu_821_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_45_fu_855_p3 <= 
        select_ln52_44_fu_847_p3 when (or_ln52_45_fu_833_p2(0) = '1') else 
        add_ln52_13_fu_773_p2;
    select_ln52_46_fu_1017_p3 <= 
        ap_const_lv6_0 when (tmp_102_fu_877_p3(0) = '1') else 
        add_ln52_14_fu_951_p2;
    select_ln52_47_fu_1025_p3 <= 
        select_ln52_46_fu_1017_p3 when (or_ln52_47_fu_999_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_48_fu_1033_p3 <= 
        select_ln52_47_fu_1025_p3 when (or_ln52_48_fu_1011_p2(0) = '1') else 
        add_ln52_14_fu_951_p2;
    select_ln52_fu_305_p3 <= 
        ap_const_lv6_0 when (tmp_fu_171_p3(0) = '1') else 
        add_ln52_fu_239_p2;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_100_fu_779_p4 <= layer18_out_dout(63 downto 58);
    tmp_101_fu_795_p3 <= add_ln52_13_fu_773_p2(5 downto 5);
    tmp_102_fu_877_p3 <= layer18_out_dout(79 downto 79);
    tmp_103_fu_895_p3 <= layer18_out_dout(67 downto 67);
    tmp_104_fu_903_p4 <= layer18_out_dout(66 downto 64);
    tmp_105_fu_919_p3 <= layer18_out_dout(73 downto 73);
    tmp_106_fu_927_p3 <= layer18_out_dout(68 downto 68);
    tmp_107_fu_957_p4 <= layer18_out_dout(79 downto 74);
    tmp_108_fu_973_p3 <= add_ln52_14_fu_951_p2(5 downto 5);
    tmp_77_fu_369_p4 <= layer18_out_dout(18 downto 16);
    tmp_78_fu_189_p3 <= layer18_out_dout(3 downto 3);
    tmp_79_fu_207_p3 <= layer18_out_dout(9 downto 9);
    tmp_80_fu_215_p3 <= layer18_out_dout(4 downto 4);
    tmp_81_fu_261_p3 <= add_ln52_fu_239_p2(5 downto 5);
    tmp_82_fu_343_p3 <= layer18_out_dout(31 downto 31);
    tmp_83_fu_361_p3 <= layer18_out_dout(19 downto 19);
    tmp_84_fu_385_p3 <= layer18_out_dout(25 downto 25);
    tmp_85_fu_393_p3 <= layer18_out_dout(20 downto 20);
    tmp_86_fu_423_p4 <= layer18_out_dout(31 downto 26);
    tmp_87_fu_439_p3 <= add_ln52_11_fu_417_p2(5 downto 5);
    tmp_88_fu_521_p3 <= layer18_out_dout(47 downto 47);
    tmp_89_fu_539_p3 <= layer18_out_dout(35 downto 35);
    tmp_90_fu_547_p4 <= layer18_out_dout(34 downto 32);
    tmp_91_fu_563_p3 <= layer18_out_dout(41 downto 41);
    tmp_92_fu_571_p3 <= layer18_out_dout(36 downto 36);
    tmp_93_fu_601_p4 <= layer18_out_dout(47 downto 42);
    tmp_94_fu_617_p3 <= add_ln52_12_fu_595_p2(5 downto 5);
    tmp_95_fu_699_p3 <= layer18_out_dout(63 downto 63);
    tmp_96_fu_717_p3 <= layer18_out_dout(51 downto 51);
    tmp_97_fu_725_p4 <= layer18_out_dout(50 downto 48);
    tmp_98_fu_741_p3 <= layer18_out_dout(57 downto 57);
    tmp_99_fu_749_p3 <= layer18_out_dout(52 downto 52);
    tmp_fu_171_p3 <= layer18_out_dout(15 downto 15);
    tmp_s_fu_245_p4 <= layer18_out_dout(15 downto 10);
    trunc_ln3_fu_179_p4 <= layer18_out_dout(9 downto 4);
    trunc_ln44_5_fu_135_p4 <= layer18_out_dout(47 downto 32);
    trunc_ln44_6_fu_145_p4 <= layer18_out_dout(63 downto 48);
    trunc_ln44_7_fu_155_p4 <= layer18_out_dout(79 downto 64);
    trunc_ln44_fu_121_p1 <= layer18_out_dout(16 - 1 downto 0);
    trunc_ln44_s_fu_125_p4 <= layer18_out_dout(31 downto 16);
    trunc_ln52_5_fu_529_p4 <= layer18_out_dout(41 downto 36);
    trunc_ln52_6_fu_707_p4 <= layer18_out_dout(57 downto 52);
    trunc_ln52_7_fu_885_p4 <= layer18_out_dout(73 downto 68);
    trunc_ln52_fu_197_p1 <= layer18_out_dout(3 - 1 downto 0);
    trunc_ln52_s_fu_351_p4 <= layer18_out_dout(25 downto 20);
    xor_ln52_11_fu_471_p2 <= (empty_56_fu_459_p2 xor ap_const_lv1_1);
    xor_ln52_12_fu_649_p2 <= (empty_57_fu_637_p2 xor ap_const_lv1_1);
    xor_ln52_13_fu_827_p2 <= (empty_58_fu_815_p2 xor ap_const_lv1_1);
    xor_ln52_14_fu_1005_p2 <= (empty_59_fu_993_p2 xor ap_const_lv1_1);
    xor_ln52_fu_293_p2 <= (empty_fu_281_p2 xor ap_const_lv1_1);
    zext_ln52_11_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_11_fu_407_p2),6));
    zext_ln52_12_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_12_fu_585_p2),6));
    zext_ln52_13_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_13_fu_763_p2),6));
    zext_ln52_14_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_14_fu_941_p2),6));
    zext_ln52_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_fu_229_p2),6));
end behav;
