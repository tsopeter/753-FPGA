-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_4u_array_ap_ufixed_6_0_4_0_0_4u_relu_config7_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer5_out_dout : IN STD_LOGIC_VECTOR (75 downto 0);
    layer5_out_empty_n : IN STD_LOGIC;
    layer5_out_read : OUT STD_LOGIC;
    layer5_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer5_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer7_out_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    layer7_out_full_n : IN STD_LOGIC;
    layer7_out_write : OUT STD_LOGIC;
    layer7_out_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
    layer7_out_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0);
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_4u_array_ap_ufixed_6_0_4_0_0_4u_relu_config7_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_A8 : STD_LOGIC_VECTOR (7 downto 0) := "10101000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln41_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage1_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_loop_exit_ready_delayed : STD_LOGIC;
    signal layer5_out_blk_n : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal layer7_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1_grp2 : BOOLEAN;
    signal layer5_out_read_reg_853 : STD_LOGIC_VECTOR (75 downto 0);
    signal ap_block_state1_pp0_stage0_iter0_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal trunc_ln44_fu_138_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln44_reg_873 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln44_s_reg_878 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln44_5_reg_883 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln44_6_reg_888 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_900 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_905 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_107_reg_910 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_24_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_24_reg_917 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_reg_922 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_113_reg_927 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_26_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_26_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_reg_939 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_118_reg_944 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_28_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_28_reg_951 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_reg_956 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln51_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_961 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage1_subdone_grp0 : BOOLEAN;
    signal add_ln52_fu_355_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_reg_966 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_972 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_11_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_11_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_11_fu_442_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_11_reg_983 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_58_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_58_reg_989 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_12_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_12_reg_995 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_12_fu_529_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_12_reg_1000 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_59_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_59_reg_1006 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_13_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_13_reg_1012 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_13_fu_616_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_13_reg_1017 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_60_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_60_reg_1023 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_653_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_1029 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_data_fu_700_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_reg_1038 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal out_data_6_fu_742_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_6_reg_1043 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_7_fu_784_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_7_reg_1048 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_8_fu_826_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_8_reg_1053 : STD_LOGIC_VECTOR (5 downto 0);
    signal i1_fu_116 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone_grp0_done_reg_iter0 : BOOLEAN := false;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage1_01001_grp2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_grp2 : BOOLEAN;
    signal trunc_ln52_fu_180_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_77_fu_208_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_79_fu_242_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_81_fu_276_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage1_grp0 : BOOLEAN;
    signal tmp_104_fu_333_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_102_fu_319_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln4_fu_310_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_fu_351_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_103_fu_326_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_106_fu_366_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_119_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_23_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_36_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_111_fu_420_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_37_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_109_fu_406_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_11_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_s_fu_397_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_11_fu_438_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_110_fu_413_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_112_fu_453_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_126_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_25_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_38_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_116_fu_507_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_40_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_114_fu_493_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_12_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_5_fu_484_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_12_fu_525_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_115_fu_500_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_117_fu_540_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_133_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_27_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_40_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_121_fu_594_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_43_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_119_fu_580_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_13_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_6_fu_571_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_13_fu_612_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_120_fu_587_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_122_fu_627_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_140_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_29_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_41_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_grp0 : BOOLEAN;
    signal xor_ln52_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_35_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_679_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_36_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_35_fu_685_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_36_fu_693_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln52_11_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_38_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_37_fu_721_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_39_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_38_fu_727_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_39_fu_735_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln52_12_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_41_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_40_fu_763_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_42_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_41_fu_769_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_42_fu_777_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln52_13_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_44_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_43_fu_805_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_45_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_44_fu_811_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_45_fu_819_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_754 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_delay_pipe_U : component myproject_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue,
        ap_loop_exit_ready_delayed => ap_loop_exit_ready_delayed);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp0_done_reg_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp0_done_reg_iter0 <= ap_const_boolean_0;
            else
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg_iter0 <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg_iter0 <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage1_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then 
                        ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0)) then 
                        ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_11001)) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                end if;
            end if; 
        end if;
    end process;

    i1_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_boolean_1 = ap_condition_754)) then 
                    i1_fu_116 <= ap_const_lv8_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i1_fu_116 <= i_reg_1029;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln52_11_reg_983 <= add_ln52_11_fu_442_p2;
                add_ln52_12_reg_1000 <= add_ln52_12_fu_529_p2;
                add_ln52_13_reg_1017 <= add_ln52_13_fu_616_p2;
                add_ln52_reg_966 <= add_ln52_fu_355_p2;
                empty_58_reg_989 <= empty_58_fu_473_p2;
                empty_59_reg_1006 <= empty_59_fu_560_p2;
                empty_60_reg_1023 <= empty_60_fu_647_p2;
                empty_reg_972 <= empty_fu_386_p2;
                icmp_ln51_11_reg_978 <= icmp_ln51_11_fu_392_p2;
                icmp_ln51_12_reg_995 <= icmp_ln51_12_fu_479_p2;
                icmp_ln51_13_reg_1012 <= icmp_ln51_13_fu_566_p2;
                icmp_ln51_reg_961 <= icmp_ln51_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_condition_exit_pp0_iter0_stage1_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage1;
                i_reg_1029 <= i_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln52_24_reg_917 <= icmp_ln52_24_fu_218_p2;
                icmp_ln52_26_reg_934 <= icmp_ln52_26_fu_252_p2;
                icmp_ln52_28_reg_951 <= icmp_ln52_28_fu_286_p2;
                icmp_ln52_reg_900 <= icmp_ln52_fu_184_p2;
                layer5_out_read_reg_853 <= layer5_out_dout;
                tmp_107_reg_910 <= layer5_out_dout(37 downto 37);
                tmp_113_reg_927 <= layer5_out_dout(56 downto 56);
                tmp_118_reg_944 <= layer5_out_dout(75 downto 75);
                tmp_78_reg_922 <= layer5_out_dout(37 downto 29);
                tmp_80_reg_939 <= layer5_out_dout(56 downto 48);
                tmp_82_reg_956 <= layer5_out_dout(75 downto 67);
                tmp_reg_893 <= layer5_out_dout(18 downto 18);
                tmp_s_reg_905 <= layer5_out_dout(18 downto 10);
                trunc_ln44_5_reg_883 <= layer5_out_dout(56 downto 38);
                trunc_ln44_6_reg_888 <= layer5_out_dout(75 downto 57);
                trunc_ln44_reg_873 <= trunc_ln44_fu_138_p1;
                trunc_ln44_s_reg_878 <= layer5_out_dout(37 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                out_data_6_reg_1043 <= out_data_6_fu_742_p3;
                out_data_7_reg_1048 <= out_data_7_fu_784_p3;
                out_data_8_reg_1053 <= out_data_8_fu_826_p3;
                out_data_reg_1038 <= out_data_fu_700_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln52_11_fu_442_p2 <= std_logic_vector(unsigned(trunc_ln52_s_fu_397_p4) + unsigned(zext_ln52_11_fu_438_p1));
    add_ln52_12_fu_529_p2 <= std_logic_vector(unsigned(trunc_ln52_5_fu_484_p4) + unsigned(zext_ln52_12_fu_525_p1));
    add_ln52_13_fu_616_p2 <= std_logic_vector(unsigned(trunc_ln52_6_fu_571_p4) + unsigned(zext_ln52_13_fu_612_p1));
    add_ln52_fu_355_p2 <= std_logic_vector(unsigned(trunc_ln4_fu_310_p4) + unsigned(zext_ln52_fu_351_p1));
    and_ln52_11_fu_432_p2 <= (tmp_109_fu_406_p3 and or_ln52_37_fu_427_p2);
    and_ln52_12_fu_519_p2 <= (tmp_114_fu_493_p3 and or_ln52_40_fu_514_p2);
    and_ln52_13_fu_606_p2 <= (tmp_119_fu_580_p3 and or_ln52_43_fu_601_p2);
    and_ln52_36_fu_380_p2 <= (tmp_106_fu_366_p3 or not_tmp_119_fu_374_p2);
    and_ln52_38_fu_467_p2 <= (tmp_112_fu_453_p3 or not_tmp_126_fu_461_p2);
    and_ln52_40_fu_554_p2 <= (tmp_117_fu_540_p3 or not_tmp_133_fu_548_p2);
    and_ln52_41_fu_641_p2 <= (tmp_122_fu_627_p3 or not_tmp_140_fu_635_p2);
    and_ln52_fu_345_p2 <= (tmp_102_fu_319_p3 and or_ln52_fu_340_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);

    ap_block_pp0_stage0_11001_grp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001_grp0 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_done_reg, ap_block_state1_pp0_stage0_iter0_grp1)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0_grp1)));
    end process;

        ap_block_pp0_stage0_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_done_reg, ap_block_state1_pp0_stage0_iter0_grp1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0_grp1))));
    end process;


    ap_block_pp0_stage0_subdone_grp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone_grp0 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_grp2_assign_proc : process(ap_enable_reg_pp0_iter1, layer7_out_full_n)
    begin
                ap_block_pp0_stage1_01001_grp2 <= ((layer7_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, layer7_out_full_n)
    begin
                ap_block_pp0_stage1_11001 <= ((layer7_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_grp2_assign_proc : process(ap_enable_reg_pp0_iter1, layer7_out_full_n)
    begin
                ap_block_pp0_stage1_11001_grp2 <= ((layer7_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_grp2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, layer7_out_full_n)
    begin
                ap_block_pp0_stage1_subdone <= ((layer7_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_grp1_assign_proc : process(layer5_out_empty_n, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0_grp1 <= ((ap_done_reg = ap_const_logic_1) or (layer5_out_empty_n = ap_const_logic_0));
    end process;


    ap_condition_754_assign_proc : process(ap_enable_reg_pp0_iter0, ap_loop_init, ap_block_pp0_stage0_subdone_grp0_done_reg_iter0)
    begin
                ap_condition_754 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg_iter0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln41_fu_659_p2)
    begin
        if (((icmp_ln41_fu_659_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_loop_exit_ready_delayed_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1_pp0_iter1_reg) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_loop_exit_ready_delayed <= ap_const_logic_1;
        else 
            ap_loop_exit_ready_delayed <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_58_fu_473_p2 <= (icmp_ln52_25_fu_448_p2 and and_ln52_38_fu_467_p2);
    empty_59_fu_560_p2 <= (icmp_ln52_27_fu_535_p2 and and_ln52_40_fu_554_p2);
    empty_60_fu_647_p2 <= (icmp_ln52_29_fu_622_p2 and and_ln52_41_fu_641_p2);
    empty_fu_386_p2 <= (icmp_ln52_23_fu_361_p2 and and_ln52_36_fu_380_p2);
    i_fu_653_p2 <= std_logic_vector(unsigned(i1_fu_116) + unsigned(ap_const_lv8_1));
    icmp_ln41_fu_659_p2 <= "1" when (i1_fu_116 = ap_const_lv8_A8) else "0";
    icmp_ln51_11_fu_392_p2 <= "1" when (signed(trunc_ln44_s_reg_878) > signed(ap_const_lv19_0)) else "0";
    icmp_ln51_12_fu_479_p2 <= "1" when (signed(trunc_ln44_5_reg_883) > signed(ap_const_lv19_0)) else "0";
    icmp_ln51_13_fu_566_p2 <= "1" when (signed(trunc_ln44_6_reg_888) > signed(ap_const_lv19_0)) else "0";
    icmp_ln51_fu_305_p2 <= "1" when (signed(trunc_ln44_reg_873) > signed(ap_const_lv19_0)) else "0";
    icmp_ln52_23_fu_361_p2 <= "1" when (tmp_s_reg_905 = ap_const_lv9_0) else "0";
    icmp_ln52_24_fu_218_p2 <= "0" when (tmp_77_fu_208_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_25_fu_448_p2 <= "1" when (tmp_78_reg_922 = ap_const_lv9_0) else "0";
    icmp_ln52_26_fu_252_p2 <= "0" when (tmp_79_fu_242_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_27_fu_535_p2 <= "1" when (tmp_80_reg_939 = ap_const_lv9_0) else "0";
    icmp_ln52_28_fu_286_p2 <= "0" when (tmp_81_fu_276_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_29_fu_622_p2 <= "1" when (tmp_82_reg_956 = ap_const_lv9_0) else "0";
    icmp_ln52_fu_184_p2 <= "0" when (trunc_ln52_fu_180_p1 = ap_const_lv3_0) else "1";

    layer5_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, layer5_out_empty_n, ap_done_reg, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer5_out_blk_n <= layer5_out_empty_n;
        else 
            layer5_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer5_out_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer5_out_read <= ap_const_logic_1;
        else 
            layer5_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer7_out_blk_n_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, layer7_out_full_n, ap_block_pp0_stage1_grp2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_grp2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer7_out_blk_n <= layer7_out_full_n;
        else 
            layer7_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer7_out_din <= (((out_data_8_reg_1053 & out_data_7_reg_1048) & out_data_6_reg_1043) & out_data_reg_1038);

    layer7_out_write_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001_grp2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer7_out_write <= ap_const_logic_1;
        else 
            layer7_out_write <= ap_const_logic_0;
        end if; 
    end process;

    not_tmp_119_fu_374_p2 <= (tmp_103_fu_326_p3 xor ap_const_lv1_1);
    not_tmp_126_fu_461_p2 <= (tmp_110_fu_413_p3 xor ap_const_lv1_1);
    not_tmp_133_fu_548_p2 <= (tmp_115_fu_500_p3 xor ap_const_lv1_1);
    not_tmp_140_fu_635_p2 <= (tmp_120_fu_587_p3 xor ap_const_lv1_1);
    or_ln52_35_fu_665_p2 <= (tmp_reg_893 or empty_reg_972);
    or_ln52_36_fu_674_p2 <= (xor_ln52_fu_669_p2 or tmp_reg_893);
    or_ln52_37_fu_427_p2 <= (tmp_111_fu_420_p3 or icmp_ln52_24_reg_917);
    or_ln52_38_fu_707_p2 <= (tmp_107_reg_910 or empty_58_reg_989);
    or_ln52_39_fu_716_p2 <= (xor_ln52_11_fu_711_p2 or tmp_107_reg_910);
    or_ln52_40_fu_514_p2 <= (tmp_116_fu_507_p3 or icmp_ln52_26_reg_934);
    or_ln52_41_fu_749_p2 <= (tmp_113_reg_927 or empty_59_reg_1006);
    or_ln52_42_fu_758_p2 <= (xor_ln52_12_fu_753_p2 or tmp_113_reg_927);
    or_ln52_43_fu_601_p2 <= (tmp_121_fu_594_p3 or icmp_ln52_28_reg_951);
    or_ln52_44_fu_791_p2 <= (tmp_118_reg_944 or empty_60_reg_1023);
    or_ln52_45_fu_800_p2 <= (xor_ln52_13_fu_795_p2 or tmp_118_reg_944);
    or_ln52_fu_340_p2 <= (tmp_104_fu_333_p3 or icmp_ln52_reg_900);
    out_data_6_fu_742_p3 <= 
        select_ln52_39_fu_735_p3 when (icmp_ln51_11_reg_978(0) = '1') else 
        ap_const_lv6_0;
    out_data_7_fu_784_p3 <= 
        select_ln52_42_fu_777_p3 when (icmp_ln51_12_reg_995(0) = '1') else 
        ap_const_lv6_0;
    out_data_8_fu_826_p3 <= 
        select_ln52_45_fu_819_p3 when (icmp_ln51_13_reg_1012(0) = '1') else 
        ap_const_lv6_0;
    out_data_fu_700_p3 <= 
        select_ln52_36_fu_693_p3 when (icmp_ln51_reg_961(0) = '1') else 
        ap_const_lv6_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln52_35_fu_685_p3 <= 
        select_ln52_fu_679_p3 when (or_ln52_35_fu_665_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_36_fu_693_p3 <= 
        select_ln52_35_fu_685_p3 when (or_ln52_36_fu_674_p2(0) = '1') else 
        add_ln52_reg_966;
    select_ln52_37_fu_721_p3 <= 
        ap_const_lv6_0 when (tmp_107_reg_910(0) = '1') else 
        add_ln52_11_reg_983;
    select_ln52_38_fu_727_p3 <= 
        select_ln52_37_fu_721_p3 when (or_ln52_38_fu_707_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_39_fu_735_p3 <= 
        select_ln52_38_fu_727_p3 when (or_ln52_39_fu_716_p2(0) = '1') else 
        add_ln52_11_reg_983;
    select_ln52_40_fu_763_p3 <= 
        ap_const_lv6_0 when (tmp_113_reg_927(0) = '1') else 
        add_ln52_12_reg_1000;
    select_ln52_41_fu_769_p3 <= 
        select_ln52_40_fu_763_p3 when (or_ln52_41_fu_749_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_42_fu_777_p3 <= 
        select_ln52_41_fu_769_p3 when (or_ln52_42_fu_758_p2(0) = '1') else 
        add_ln52_12_reg_1000;
    select_ln52_43_fu_805_p3 <= 
        ap_const_lv6_0 when (tmp_118_reg_944(0) = '1') else 
        add_ln52_13_reg_1017;
    select_ln52_44_fu_811_p3 <= 
        select_ln52_43_fu_805_p3 when (or_ln52_44_fu_791_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_45_fu_819_p3 <= 
        select_ln52_44_fu_811_p3 when (or_ln52_45_fu_800_p2(0) = '1') else 
        add_ln52_13_reg_1017;
    select_ln52_fu_679_p3 <= 
        ap_const_lv6_0 when (tmp_reg_893(0) = '1') else 
        add_ln52_reg_966;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_102_fu_319_p3 <= layer5_out_read_reg_853(3 downto 3);
    tmp_103_fu_326_p3 <= layer5_out_read_reg_853(9 downto 9);
    tmp_104_fu_333_p3 <= layer5_out_read_reg_853(4 downto 4);
    tmp_106_fu_366_p3 <= add_ln52_fu_355_p2(5 downto 5);
    tmp_109_fu_406_p3 <= layer5_out_read_reg_853(22 downto 22);
    tmp_110_fu_413_p3 <= layer5_out_read_reg_853(28 downto 28);
    tmp_111_fu_420_p3 <= layer5_out_read_reg_853(23 downto 23);
    tmp_112_fu_453_p3 <= add_ln52_11_fu_442_p2(5 downto 5);
    tmp_114_fu_493_p3 <= layer5_out_read_reg_853(41 downto 41);
    tmp_115_fu_500_p3 <= layer5_out_read_reg_853(47 downto 47);
    tmp_116_fu_507_p3 <= layer5_out_read_reg_853(42 downto 42);
    tmp_117_fu_540_p3 <= add_ln52_12_fu_529_p2(5 downto 5);
    tmp_119_fu_580_p3 <= layer5_out_read_reg_853(60 downto 60);
    tmp_120_fu_587_p3 <= layer5_out_read_reg_853(66 downto 66);
    tmp_121_fu_594_p3 <= layer5_out_read_reg_853(61 downto 61);
    tmp_122_fu_627_p3 <= add_ln52_13_fu_616_p2(5 downto 5);
    tmp_77_fu_208_p4 <= layer5_out_dout(21 downto 19);
    tmp_79_fu_242_p4 <= layer5_out_dout(40 downto 38);
    tmp_81_fu_276_p4 <= layer5_out_dout(59 downto 57);
    trunc_ln44_fu_138_p1 <= layer5_out_dout(19 - 1 downto 0);
    trunc_ln4_fu_310_p4 <= layer5_out_read_reg_853(9 downto 4);
    trunc_ln52_5_fu_484_p4 <= layer5_out_read_reg_853(47 downto 42);
    trunc_ln52_6_fu_571_p4 <= layer5_out_read_reg_853(66 downto 61);
    trunc_ln52_fu_180_p1 <= layer5_out_dout(3 - 1 downto 0);
    trunc_ln52_s_fu_397_p4 <= layer5_out_read_reg_853(28 downto 23);
    xor_ln52_11_fu_711_p2 <= (empty_58_reg_989 xor ap_const_lv1_1);
    xor_ln52_12_fu_753_p2 <= (empty_59_reg_1006 xor ap_const_lv1_1);
    xor_ln52_13_fu_795_p2 <= (empty_60_reg_1023 xor ap_const_lv1_1);
    xor_ln52_fu_669_p2 <= (empty_reg_972 xor ap_const_lv1_1);
    zext_ln52_11_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_11_fu_432_p2),6));
    zext_ln52_12_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_12_fu_519_p2),6));
    zext_ln52_13_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_13_fu_606_p2),6));
    zext_ln52_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_fu_345_p2),6));
end behav;
