// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_5u_array_ap_ufixed_6_0_4_0_0_5u_relu_config10_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer8_out_dout,
        layer8_out_empty_n,
        layer8_out_read,
        layer8_out_num_data_valid,
        layer8_out_fifo_cap,
        layer10_out_din,
        layer10_out_full_n,
        layer10_out_write,
        layer10_out_num_data_valid,
        layer10_out_fifo_cap,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [99:0] layer8_out_dout;
input   layer8_out_empty_n;
output   layer8_out_read;
input  [5:0] layer8_out_num_data_valid;
input  [5:0] layer8_out_fifo_cap;
output  [29:0] layer10_out_din;
input   layer10_out_full_n;
output   layer10_out_write;
input  [31:0] layer10_out_num_data_valid;
input  [31:0] layer10_out_fifo_cap;
output   start_out;
output   start_write;

reg ap_idle;
reg layer8_out_read;
reg layer10_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln41_fu_369_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    layer8_out_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    layer10_out_blk_n;
reg   [99:0] layer8_out_read_reg_1042;
reg    ap_block_pp0_stage0_11001_grp1;
wire   [19:0] trunc_ln44_fu_155_p1;
reg   [19:0] trunc_ln44_reg_1066;
reg   [19:0] trunc_ln44_2_reg_1071;
reg   [19:0] trunc_ln44_3_reg_1076;
reg   [19:0] trunc_ln44_4_reg_1081;
reg   [19:0] trunc_ln44_5_reg_1086;
reg   [0:0] tmp_reg_1091;
reg   [0:0] tmp_reg_1091_pp0_iter2_reg;
wire   [0:0] icmp_ln52_fu_211_p2;
reg   [0:0] icmp_ln52_reg_1098;
reg   [9:0] tmp_s_reg_1103;
reg   [0:0] tmp_82_reg_1108;
reg   [0:0] tmp_82_reg_1108_pp0_iter2_reg;
wire   [0:0] icmp_ln52_4_fu_245_p2;
reg   [0:0] icmp_ln52_4_reg_1115;
reg   [9:0] tmp_12_reg_1120;
reg   [0:0] tmp_87_reg_1125;
reg   [0:0] tmp_87_reg_1125_pp0_iter2_reg;
wire   [0:0] icmp_ln52_6_fu_279_p2;
reg   [0:0] icmp_ln52_6_reg_1132;
reg   [9:0] tmp_19_reg_1137;
reg   [0:0] tmp_92_reg_1142;
reg   [0:0] tmp_92_reg_1142_pp0_iter2_reg;
wire   [0:0] icmp_ln52_8_fu_313_p2;
reg   [0:0] icmp_ln52_8_reg_1149;
reg   [9:0] tmp_26_reg_1154;
reg   [0:0] tmp_97_reg_1159;
reg   [0:0] tmp_97_reg_1159_pp0_iter2_reg;
wire   [0:0] icmp_ln52_10_fu_347_p2;
reg   [0:0] icmp_ln52_10_reg_1166;
reg   [9:0] tmp_33_reg_1171;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln51_fu_380_p2;
reg   [0:0] icmp_ln51_reg_1180;
wire   [5:0] add_ln52_fu_430_p2;
reg   [5:0] add_ln52_reg_1185;
wire   [0:0] empty_fu_461_p2;
reg   [0:0] empty_reg_1191;
wire   [0:0] icmp_ln51_2_fu_467_p2;
reg   [0:0] icmp_ln51_2_reg_1197;
wire   [5:0] add_ln52_1_fu_517_p2;
reg   [5:0] add_ln52_1_reg_1202;
wire   [0:0] empty_54_fu_548_p2;
reg   [0:0] empty_54_reg_1208;
wire   [0:0] icmp_ln51_3_fu_554_p2;
reg   [0:0] icmp_ln51_3_reg_1214;
wire   [5:0] add_ln52_2_fu_604_p2;
reg   [5:0] add_ln52_2_reg_1219;
wire   [0:0] empty_55_fu_635_p2;
reg   [0:0] empty_55_reg_1225;
wire   [0:0] icmp_ln51_4_fu_641_p2;
reg   [0:0] icmp_ln51_4_reg_1231;
wire   [5:0] add_ln52_3_fu_691_p2;
reg   [5:0] add_ln52_3_reg_1236;
wire   [0:0] empty_56_fu_722_p2;
reg   [0:0] empty_56_reg_1242;
wire   [0:0] icmp_ln51_5_fu_728_p2;
reg   [0:0] icmp_ln51_5_reg_1248;
wire   [5:0] add_ln52_4_fu_778_p2;
reg   [5:0] add_ln52_4_reg_1253;
wire   [0:0] empty_57_fu_809_p2;
reg   [0:0] empty_57_reg_1259;
wire   [5:0] out_data_fu_850_p3;
reg   [5:0] out_data_reg_1265;
wire   [5:0] out_data_1_fu_892_p3;
reg   [5:0] out_data_1_reg_1270;
wire   [5:0] out_data_2_fu_934_p3;
reg   [5:0] out_data_2_reg_1275;
wire   [5:0] out_data_3_fu_976_p3;
reg   [5:0] out_data_3_reg_1280;
wire   [5:0] out_data_4_fu_1018_p3;
reg   [5:0] out_data_4_reg_1285;
reg   [4:0] i1_fu_130;
wire   [4:0] i_fu_363_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_01001_grp1;
wire   [2:0] trunc_ln52_fu_207_p1;
wire   [2:0] tmp_4_fu_235_p4;
wire   [2:0] tmp_16_fu_269_p4;
wire   [2:0] tmp_23_fu_303_p4;
wire   [2:0] tmp_30_fu_337_p4;
wire   [0:0] tmp_80_fu_408_p3;
wire   [0:0] or_ln52_fu_415_p2;
wire   [0:0] tmp_78_fu_394_p3;
wire   [0:0] and_ln52_fu_420_p2;
wire   [5:0] trunc_ln3_fu_385_p4;
wire   [5:0] zext_ln52_fu_426_p1;
wire   [0:0] tmp_79_fu_401_p3;
wire   [0:0] tmp_81_fu_441_p3;
wire   [0:0] not_tmp_8_fu_449_p2;
wire   [0:0] icmp_ln52_3_fu_436_p2;
wire   [0:0] and_ln52_5_fu_455_p2;
wire   [0:0] tmp_85_fu_495_p3;
wire   [0:0] or_ln52_6_fu_502_p2;
wire   [0:0] tmp_83_fu_481_p3;
wire   [0:0] and_ln52_3_fu_507_p2;
wire   [5:0] trunc_ln52_2_fu_472_p4;
wire   [5:0] zext_ln52_1_fu_513_p1;
wire   [0:0] tmp_84_fu_488_p3;
wire   [0:0] tmp_86_fu_528_p3;
wire   [0:0] not_tmp_10_fu_536_p2;
wire   [0:0] icmp_ln52_5_fu_523_p2;
wire   [0:0] and_ln52_7_fu_542_p2;
wire   [0:0] tmp_90_fu_582_p3;
wire   [0:0] or_ln52_9_fu_589_p2;
wire   [0:0] tmp_88_fu_568_p3;
wire   [0:0] and_ln52_4_fu_594_p2;
wire   [5:0] trunc_ln52_3_fu_559_p4;
wire   [5:0] zext_ln52_2_fu_600_p1;
wire   [0:0] tmp_89_fu_575_p3;
wire   [0:0] tmp_91_fu_615_p3;
wire   [0:0] not_tmp_17_fu_623_p2;
wire   [0:0] icmp_ln52_7_fu_610_p2;
wire   [0:0] and_ln52_9_fu_629_p2;
wire   [0:0] tmp_95_fu_669_p3;
wire   [0:0] or_ln52_12_fu_676_p2;
wire   [0:0] tmp_93_fu_655_p3;
wire   [0:0] and_ln52_6_fu_681_p2;
wire   [5:0] trunc_ln52_4_fu_646_p4;
wire   [5:0] zext_ln52_3_fu_687_p1;
wire   [0:0] tmp_94_fu_662_p3;
wire   [0:0] tmp_96_fu_702_p3;
wire   [0:0] not_tmp_24_fu_710_p2;
wire   [0:0] icmp_ln52_9_fu_697_p2;
wire   [0:0] and_ln52_11_fu_716_p2;
wire   [0:0] tmp_100_fu_756_p3;
wire   [0:0] or_ln52_15_fu_763_p2;
wire   [0:0] tmp_98_fu_742_p3;
wire   [0:0] and_ln52_8_fu_768_p2;
wire   [5:0] trunc_ln52_5_fu_733_p4;
wire   [5:0] zext_ln52_4_fu_774_p1;
wire   [0:0] tmp_99_fu_749_p3;
wire   [0:0] tmp_101_fu_789_p3;
wire   [0:0] not_tmp_31_fu_797_p2;
wire   [0:0] icmp_ln52_11_fu_784_p2;
wire   [0:0] and_ln52_12_fu_803_p2;
wire   [0:0] xor_ln52_fu_819_p2;
wire   [0:0] or_ln52_4_fu_815_p2;
wire   [5:0] select_ln52_fu_829_p3;
wire   [0:0] or_ln52_5_fu_824_p2;
wire   [5:0] select_ln52_4_fu_835_p3;
wire   [5:0] select_ln52_5_fu_843_p3;
wire   [0:0] xor_ln52_2_fu_861_p2;
wire   [0:0] or_ln52_7_fu_857_p2;
wire   [5:0] select_ln52_6_fu_871_p3;
wire   [0:0] or_ln52_8_fu_866_p2;
wire   [5:0] select_ln52_7_fu_877_p3;
wire   [5:0] select_ln52_8_fu_885_p3;
wire   [0:0] xor_ln52_3_fu_903_p2;
wire   [0:0] or_ln52_10_fu_899_p2;
wire   [5:0] select_ln52_9_fu_913_p3;
wire   [0:0] or_ln52_11_fu_908_p2;
wire   [5:0] select_ln52_10_fu_919_p3;
wire   [5:0] select_ln52_11_fu_927_p3;
wire   [0:0] xor_ln52_4_fu_945_p2;
wire   [0:0] or_ln52_13_fu_941_p2;
wire   [5:0] select_ln52_12_fu_955_p3;
wire   [0:0] or_ln52_14_fu_950_p2;
wire   [5:0] select_ln52_13_fu_961_p3;
wire   [5:0] select_ln52_14_fu_969_p3;
wire   [0:0] xor_ln52_5_fu_987_p2;
wire   [0:0] or_ln52_16_fu_983_p2;
wire   [5:0] select_ln52_15_fu_997_p3;
wire   [0:0] or_ln52_17_fu_992_p2;
wire   [5:0] select_ln52_16_fu_1003_p3;
wire   [5:0] select_ln52_17_fu_1011_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 i1_fu_130 = 5'd0;
end

myproject_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1))) begin
            i1_fu_130 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i1_fu_130 <= i_fu_363_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        add_ln52_1_reg_1202 <= add_ln52_1_fu_517_p2;
        add_ln52_2_reg_1219 <= add_ln52_2_fu_604_p2;
        add_ln52_3_reg_1236 <= add_ln52_3_fu_691_p2;
        add_ln52_4_reg_1253 <= add_ln52_4_fu_778_p2;
        add_ln52_reg_1185 <= add_ln52_fu_430_p2;
        empty_54_reg_1208 <= empty_54_fu_548_p2;
        empty_55_reg_1225 <= empty_55_fu_635_p2;
        empty_56_reg_1242 <= empty_56_fu_722_p2;
        empty_57_reg_1259 <= empty_57_fu_809_p2;
        empty_reg_1191 <= empty_fu_461_p2;
        icmp_ln51_2_reg_1197 <= icmp_ln51_2_fu_467_p2;
        icmp_ln51_3_reg_1214 <= icmp_ln51_3_fu_554_p2;
        icmp_ln51_4_reg_1231 <= icmp_ln51_4_fu_641_p2;
        icmp_ln51_5_reg_1248 <= icmp_ln51_5_fu_728_p2;
        icmp_ln51_reg_1180 <= icmp_ln51_fu_380_p2;
        out_data_1_reg_1270 <= out_data_1_fu_892_p3;
        out_data_2_reg_1275 <= out_data_2_fu_934_p3;
        out_data_3_reg_1280 <= out_data_3_fu_976_p3;
        out_data_4_reg_1285 <= out_data_4_fu_1018_p3;
        out_data_reg_1265 <= out_data_fu_850_p3;
        tmp_82_reg_1108_pp0_iter2_reg <= tmp_82_reg_1108;
        tmp_87_reg_1125_pp0_iter2_reg <= tmp_87_reg_1125;
        tmp_92_reg_1142_pp0_iter2_reg <= tmp_92_reg_1142;
        tmp_97_reg_1159_pp0_iter2_reg <= tmp_97_reg_1159;
        tmp_reg_1091_pp0_iter2_reg <= tmp_reg_1091;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln52_10_reg_1166 <= icmp_ln52_10_fu_347_p2;
        icmp_ln52_4_reg_1115 <= icmp_ln52_4_fu_245_p2;
        icmp_ln52_6_reg_1132 <= icmp_ln52_6_fu_279_p2;
        icmp_ln52_8_reg_1149 <= icmp_ln52_8_fu_313_p2;
        icmp_ln52_reg_1098 <= icmp_ln52_fu_211_p2;
        layer8_out_read_reg_1042 <= layer8_out_dout;
        tmp_12_reg_1120 <= {{layer8_out_dout[39:30]}};
        tmp_19_reg_1137 <= {{layer8_out_dout[59:50]}};
        tmp_26_reg_1154 <= {{layer8_out_dout[79:70]}};
        tmp_33_reg_1171 <= {{layer8_out_dout[99:90]}};
        tmp_82_reg_1108 <= layer8_out_dout[32'd39];
        tmp_87_reg_1125 <= layer8_out_dout[32'd59];
        tmp_92_reg_1142 <= layer8_out_dout[32'd79];
        tmp_97_reg_1159 <= layer8_out_dout[32'd99];
        tmp_reg_1091 <= layer8_out_dout[32'd19];
        tmp_s_reg_1103 <= {{layer8_out_dout[19:10]}};
        trunc_ln44_2_reg_1071 <= {{layer8_out_dout[39:20]}};
        trunc_ln44_3_reg_1076 <= {{layer8_out_dout[59:40]}};
        trunc_ln44_4_reg_1081 <= {{layer8_out_dout[79:60]}};
        trunc_ln44_5_reg_1086 <= {{layer8_out_dout[99:80]}};
        trunc_ln44_reg_1066 <= trunc_ln44_fu_155_p1;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_369_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        layer10_out_blk_n = layer10_out_full_n;
    end else begin
        layer10_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        layer10_out_write = 1'b1;
    end else begin
        layer10_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer8_out_blk_n = layer8_out_empty_n;
    end else begin
        layer8_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer8_out_read = 1'b1;
    end else begin
        layer8_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_1_fu_517_p2 = (trunc_ln52_2_fu_472_p4 + zext_ln52_1_fu_513_p1);

assign add_ln52_2_fu_604_p2 = (trunc_ln52_3_fu_559_p4 + zext_ln52_2_fu_600_p1);

assign add_ln52_3_fu_691_p2 = (trunc_ln52_4_fu_646_p4 + zext_ln52_3_fu_687_p1);

assign add_ln52_4_fu_778_p2 = (trunc_ln52_5_fu_733_p4 + zext_ln52_4_fu_774_p1);

assign add_ln52_fu_430_p2 = (trunc_ln3_fu_385_p4 + zext_ln52_fu_426_p1);

assign and_ln52_11_fu_716_p2 = (tmp_96_fu_702_p3 | not_tmp_24_fu_710_p2);

assign and_ln52_12_fu_803_p2 = (tmp_101_fu_789_p3 | not_tmp_31_fu_797_p2);

assign and_ln52_3_fu_507_p2 = (tmp_83_fu_481_p3 & or_ln52_6_fu_502_p2);

assign and_ln52_4_fu_594_p2 = (tmp_88_fu_568_p3 & or_ln52_9_fu_589_p2);

assign and_ln52_5_fu_455_p2 = (tmp_81_fu_441_p3 | not_tmp_8_fu_449_p2);

assign and_ln52_6_fu_681_p2 = (tmp_93_fu_655_p3 & or_ln52_12_fu_676_p2);

assign and_ln52_7_fu_542_p2 = (tmp_86_fu_528_p3 | not_tmp_10_fu_536_p2);

assign and_ln52_8_fu_768_p2 = (tmp_98_fu_742_p3 & or_ln52_15_fu_763_p2);

assign and_ln52_9_fu_629_p2 = (tmp_91_fu_615_p3 | not_tmp_17_fu_623_p2);

assign and_ln52_fu_420_p2 = (tmp_78_fu_394_p3 & or_ln52_fu_415_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((ap_done_reg == 1'b1) | ((layer10_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((layer8_out_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((layer10_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((layer8_out_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((ap_done_reg == 1'b1) | ((layer10_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((layer8_out_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((layer10_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((layer8_out_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = internal_ap_ready;

assign empty_54_fu_548_p2 = (icmp_ln52_5_fu_523_p2 & and_ln52_7_fu_542_p2);

assign empty_55_fu_635_p2 = (icmp_ln52_7_fu_610_p2 & and_ln52_9_fu_629_p2);

assign empty_56_fu_722_p2 = (icmp_ln52_9_fu_697_p2 & and_ln52_11_fu_716_p2);

assign empty_57_fu_809_p2 = (icmp_ln52_11_fu_784_p2 & and_ln52_12_fu_803_p2);

assign empty_fu_461_p2 = (icmp_ln52_3_fu_436_p2 & and_ln52_5_fu_455_p2);

assign i_fu_363_p2 = (i1_fu_130 + 5'd1);

assign icmp_ln41_fu_369_p2 = ((i1_fu_130 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln51_2_fu_467_p2 = (($signed(trunc_ln44_2_reg_1071) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_3_fu_554_p2 = (($signed(trunc_ln44_3_reg_1076) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_4_fu_641_p2 = (($signed(trunc_ln44_4_reg_1081) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_5_fu_728_p2 = (($signed(trunc_ln44_5_reg_1086) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_380_p2 = (($signed(trunc_ln44_reg_1066) > $signed(20'd0)) ? 1'b1 : 1'b0);

assign icmp_ln52_10_fu_347_p2 = ((tmp_30_fu_337_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_11_fu_784_p2 = ((tmp_33_reg_1171 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_3_fu_436_p2 = ((tmp_s_reg_1103 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_4_fu_245_p2 = ((tmp_4_fu_235_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_5_fu_523_p2 = ((tmp_12_reg_1120 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_6_fu_279_p2 = ((tmp_16_fu_269_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_7_fu_610_p2 = ((tmp_19_reg_1137 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_8_fu_313_p2 = ((tmp_23_fu_303_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_9_fu_697_p2 = ((tmp_26_reg_1154 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_211_p2 = ((trunc_ln52_fu_207_p1 != 3'd0) ? 1'b1 : 1'b0);

assign layer10_out_din = {{{{{out_data_4_reg_1285}, {out_data_3_reg_1280}}, {out_data_2_reg_1275}}, {out_data_1_reg_1270}}, {out_data_reg_1265}};

assign not_tmp_10_fu_536_p2 = (tmp_84_fu_488_p3 ^ 1'd1);

assign not_tmp_17_fu_623_p2 = (tmp_89_fu_575_p3 ^ 1'd1);

assign not_tmp_24_fu_710_p2 = (tmp_94_fu_662_p3 ^ 1'd1);

assign not_tmp_31_fu_797_p2 = (tmp_99_fu_749_p3 ^ 1'd1);

assign not_tmp_8_fu_449_p2 = (tmp_79_fu_401_p3 ^ 1'd1);

assign or_ln52_10_fu_899_p2 = (tmp_87_reg_1125_pp0_iter2_reg | empty_55_reg_1225);

assign or_ln52_11_fu_908_p2 = (xor_ln52_3_fu_903_p2 | tmp_87_reg_1125_pp0_iter2_reg);

assign or_ln52_12_fu_676_p2 = (tmp_95_fu_669_p3 | icmp_ln52_8_reg_1149);

assign or_ln52_13_fu_941_p2 = (tmp_92_reg_1142_pp0_iter2_reg | empty_56_reg_1242);

assign or_ln52_14_fu_950_p2 = (xor_ln52_4_fu_945_p2 | tmp_92_reg_1142_pp0_iter2_reg);

assign or_ln52_15_fu_763_p2 = (tmp_100_fu_756_p3 | icmp_ln52_10_reg_1166);

assign or_ln52_16_fu_983_p2 = (tmp_97_reg_1159_pp0_iter2_reg | empty_57_reg_1259);

assign or_ln52_17_fu_992_p2 = (xor_ln52_5_fu_987_p2 | tmp_97_reg_1159_pp0_iter2_reg);

assign or_ln52_4_fu_815_p2 = (tmp_reg_1091_pp0_iter2_reg | empty_reg_1191);

assign or_ln52_5_fu_824_p2 = (xor_ln52_fu_819_p2 | tmp_reg_1091_pp0_iter2_reg);

assign or_ln52_6_fu_502_p2 = (tmp_85_fu_495_p3 | icmp_ln52_4_reg_1115);

assign or_ln52_7_fu_857_p2 = (tmp_82_reg_1108_pp0_iter2_reg | empty_54_reg_1208);

assign or_ln52_8_fu_866_p2 = (xor_ln52_2_fu_861_p2 | tmp_82_reg_1108_pp0_iter2_reg);

assign or_ln52_9_fu_589_p2 = (tmp_90_fu_582_p3 | icmp_ln52_6_reg_1132);

assign or_ln52_fu_415_p2 = (tmp_80_fu_408_p3 | icmp_ln52_reg_1098);

assign out_data_1_fu_892_p3 = ((icmp_ln51_2_reg_1197[0:0] == 1'b1) ? select_ln52_8_fu_885_p3 : 6'd0);

assign out_data_2_fu_934_p3 = ((icmp_ln51_3_reg_1214[0:0] == 1'b1) ? select_ln52_11_fu_927_p3 : 6'd0);

assign out_data_3_fu_976_p3 = ((icmp_ln51_4_reg_1231[0:0] == 1'b1) ? select_ln52_14_fu_969_p3 : 6'd0);

assign out_data_4_fu_1018_p3 = ((icmp_ln51_5_reg_1248[0:0] == 1'b1) ? select_ln52_17_fu_1011_p3 : 6'd0);

assign out_data_fu_850_p3 = ((icmp_ln51_reg_1180[0:0] == 1'b1) ? select_ln52_5_fu_843_p3 : 6'd0);

assign select_ln52_10_fu_919_p3 = ((or_ln52_10_fu_899_p2[0:0] == 1'b1) ? select_ln52_9_fu_913_p3 : 6'd63);

assign select_ln52_11_fu_927_p3 = ((or_ln52_11_fu_908_p2[0:0] == 1'b1) ? select_ln52_10_fu_919_p3 : add_ln52_2_reg_1219);

assign select_ln52_12_fu_955_p3 = ((tmp_92_reg_1142_pp0_iter2_reg[0:0] == 1'b1) ? 6'd0 : add_ln52_3_reg_1236);

assign select_ln52_13_fu_961_p3 = ((or_ln52_13_fu_941_p2[0:0] == 1'b1) ? select_ln52_12_fu_955_p3 : 6'd63);

assign select_ln52_14_fu_969_p3 = ((or_ln52_14_fu_950_p2[0:0] == 1'b1) ? select_ln52_13_fu_961_p3 : add_ln52_3_reg_1236);

assign select_ln52_15_fu_997_p3 = ((tmp_97_reg_1159_pp0_iter2_reg[0:0] == 1'b1) ? 6'd0 : add_ln52_4_reg_1253);

assign select_ln52_16_fu_1003_p3 = ((or_ln52_16_fu_983_p2[0:0] == 1'b1) ? select_ln52_15_fu_997_p3 : 6'd63);

assign select_ln52_17_fu_1011_p3 = ((or_ln52_17_fu_992_p2[0:0] == 1'b1) ? select_ln52_16_fu_1003_p3 : add_ln52_4_reg_1253);

assign select_ln52_4_fu_835_p3 = ((or_ln52_4_fu_815_p2[0:0] == 1'b1) ? select_ln52_fu_829_p3 : 6'd63);

assign select_ln52_5_fu_843_p3 = ((or_ln52_5_fu_824_p2[0:0] == 1'b1) ? select_ln52_4_fu_835_p3 : add_ln52_reg_1185);

assign select_ln52_6_fu_871_p3 = ((tmp_82_reg_1108_pp0_iter2_reg[0:0] == 1'b1) ? 6'd0 : add_ln52_1_reg_1202);

assign select_ln52_7_fu_877_p3 = ((or_ln52_7_fu_857_p2[0:0] == 1'b1) ? select_ln52_6_fu_871_p3 : 6'd63);

assign select_ln52_8_fu_885_p3 = ((or_ln52_8_fu_866_p2[0:0] == 1'b1) ? select_ln52_7_fu_877_p3 : add_ln52_1_reg_1202);

assign select_ln52_9_fu_913_p3 = ((tmp_87_reg_1125_pp0_iter2_reg[0:0] == 1'b1) ? 6'd0 : add_ln52_2_reg_1219);

assign select_ln52_fu_829_p3 = ((tmp_reg_1091_pp0_iter2_reg[0:0] == 1'b1) ? 6'd0 : add_ln52_reg_1185);

assign start_out = real_start;

assign tmp_100_fu_756_p3 = layer8_out_read_reg_1042[32'd84];

assign tmp_101_fu_789_p3 = add_ln52_4_fu_778_p2[32'd5];

assign tmp_16_fu_269_p4 = {{layer8_out_dout[42:40]}};

assign tmp_23_fu_303_p4 = {{layer8_out_dout[62:60]}};

assign tmp_30_fu_337_p4 = {{layer8_out_dout[82:80]}};

assign tmp_4_fu_235_p4 = {{layer8_out_dout[22:20]}};

assign tmp_78_fu_394_p3 = layer8_out_read_reg_1042[32'd3];

assign tmp_79_fu_401_p3 = layer8_out_read_reg_1042[32'd9];

assign tmp_80_fu_408_p3 = layer8_out_read_reg_1042[32'd4];

assign tmp_81_fu_441_p3 = add_ln52_fu_430_p2[32'd5];

assign tmp_83_fu_481_p3 = layer8_out_read_reg_1042[32'd23];

assign tmp_84_fu_488_p3 = layer8_out_read_reg_1042[32'd29];

assign tmp_85_fu_495_p3 = layer8_out_read_reg_1042[32'd24];

assign tmp_86_fu_528_p3 = add_ln52_1_fu_517_p2[32'd5];

assign tmp_88_fu_568_p3 = layer8_out_read_reg_1042[32'd43];

assign tmp_89_fu_575_p3 = layer8_out_read_reg_1042[32'd49];

assign tmp_90_fu_582_p3 = layer8_out_read_reg_1042[32'd44];

assign tmp_91_fu_615_p3 = add_ln52_2_fu_604_p2[32'd5];

assign tmp_93_fu_655_p3 = layer8_out_read_reg_1042[32'd63];

assign tmp_94_fu_662_p3 = layer8_out_read_reg_1042[32'd69];

assign tmp_95_fu_669_p3 = layer8_out_read_reg_1042[32'd64];

assign tmp_96_fu_702_p3 = add_ln52_3_fu_691_p2[32'd5];

assign tmp_98_fu_742_p3 = layer8_out_read_reg_1042[32'd83];

assign tmp_99_fu_749_p3 = layer8_out_read_reg_1042[32'd89];

assign trunc_ln3_fu_385_p4 = {{layer8_out_read_reg_1042[9:4]}};

assign trunc_ln44_fu_155_p1 = layer8_out_dout[19:0];

assign trunc_ln52_2_fu_472_p4 = {{layer8_out_read_reg_1042[29:24]}};

assign trunc_ln52_3_fu_559_p4 = {{layer8_out_read_reg_1042[49:44]}};

assign trunc_ln52_4_fu_646_p4 = {{layer8_out_read_reg_1042[69:64]}};

assign trunc_ln52_5_fu_733_p4 = {{layer8_out_read_reg_1042[89:84]}};

assign trunc_ln52_fu_207_p1 = layer8_out_dout[2:0];

assign xor_ln52_2_fu_861_p2 = (empty_54_reg_1208 ^ 1'd1);

assign xor_ln52_3_fu_903_p2 = (empty_55_reg_1225 ^ 1'd1);

assign xor_ln52_4_fu_945_p2 = (empty_56_reg_1242 ^ 1'd1);

assign xor_ln52_5_fu_987_p2 = (empty_57_reg_1259 ^ 1'd1);

assign xor_ln52_fu_819_p2 = (empty_reg_1191 ^ 1'd1);

assign zext_ln52_1_fu_513_p1 = and_ln52_3_fu_507_p2;

assign zext_ln52_2_fu_600_p1 = and_ln52_4_fu_594_p2;

assign zext_ln52_3_fu_687_p1 = and_ln52_6_fu_681_p2;

assign zext_ln52_4_fu_774_p1 = and_ln52_8_fu_768_p2;

assign zext_ln52_fu_426_p1 = and_ln52_fu_420_p2;

endmodule //myproject_relu_array_ap_fixed_5u_array_ap_ufixed_6_0_4_0_0_5u_relu_config10_s
