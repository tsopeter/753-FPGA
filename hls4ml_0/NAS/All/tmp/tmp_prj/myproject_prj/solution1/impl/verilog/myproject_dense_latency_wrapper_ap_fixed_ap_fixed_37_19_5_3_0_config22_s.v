// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_dense_latency_wrapper_ap_fixed_ap_fixed_37_19_5_3_0_config22_s (
        ap_clk,
        ap_rst,
        data_0_val1,
        data_1_val2,
        data_2_val3,
        data_3_val4,
        data_4_val5,
        ap_return
);


input   ap_clk;
input   ap_rst;
input  [26:0] data_0_val1;
input  [26:0] data_1_val2;
input  [26:0] data_2_val3;
input  [26:0] data_3_val4;
input  [26:0] data_4_val5;
output  [31:0] ap_return;

reg   [26:0] data_1_val2_read_reg_210;
wire    ap_block_pp0_stage0_11001;
wire   [30:0] p_neg12_fu_94_p2;
reg   [30:0] p_neg12_reg_215;
wire   [30:0] sub_ln73_fu_124_p2;
reg   [30:0] sub_ln73_reg_220;
wire   [30:0] sub_ln73_34_fu_158_p2;
reg   [30:0] sub_ln73_34_reg_225;
wire   [29:0] sub_ln58_fu_164_p2;
reg   [29:0] sub_ln58_reg_230;
reg   [29:0] sub_ln58_reg_230_pp0_iter1_reg;
wire   [30:0] mul_ln73_34_fu_181_p2;
reg   [30:0] mul_ln73_34_reg_235;
wire   [30:0] add_ln58_46_fu_186_p2;
reg   [30:0] add_ln58_46_reg_240;
reg   [30:0] add_ln58_46_reg_240_pp0_iter2_reg;
wire   [30:0] add_ln58_fu_193_p2;
reg   [30:0] add_ln58_reg_245;
wire    ap_block_pp0_stage0;
wire   [28:0] tmp_fu_70_p3;
wire   [29:0] tmp_141_fu_82_p3;
wire  signed [30:0] p_shl11_fu_90_p1;
wire   [29:0] tmp_143_fu_100_p3;
wire   [27:0] tmp_144_fu_112_p3;
wire  signed [30:0] sext_ln73_11_fu_108_p1;
wire  signed [30:0] sext_ln73_12_fu_120_p1;
wire   [29:0] tmp_145_fu_134_p3;
wire   [27:0] tmp_146_fu_146_p3;
wire  signed [30:0] sext_ln73_14_fu_154_p1;
wire  signed [30:0] sext_ln73_13_fu_142_p1;
wire  signed [29:0] sext_ln70_fu_130_p1;
wire  signed [29:0] sext_ln73_fu_78_p1;
wire   [27:0] tmp_142_fu_170_p3;
wire  signed [30:0] p_shl13_fu_177_p1;
wire  signed [30:0] sext_ln58_fu_190_p1;
wire  signed [31:0] sext_ln58_31_fu_201_p1;
wire  signed [31:0] sext_ln58_24_fu_198_p1;
reg   [26:0] data_0_val1_int_reg;
reg   [26:0] data_1_val2_int_reg;
reg   [26:0] data_2_val3_int_reg;
reg   [26:0] data_3_val4_int_reg;
reg   [26:0] data_4_val5_int_reg;
wire    ap_ce_reg;

always @ (posedge ap_clk) begin
    data_0_val1_int_reg <= data_0_val1;
end

always @ (posedge ap_clk) begin
    data_1_val2_int_reg <= data_1_val2;
end

always @ (posedge ap_clk) begin
    data_2_val3_int_reg <= data_2_val3;
end

always @ (posedge ap_clk) begin
    data_3_val4_int_reg <= data_3_val4;
end

always @ (posedge ap_clk) begin
    data_4_val5_int_reg <= data_4_val5;
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln58_46_reg_240[30 : 1] <= add_ln58_46_fu_186_p2[30 : 1];
        add_ln58_46_reg_240_pp0_iter2_reg[30 : 1] <= add_ln58_46_reg_240[30 : 1];
        add_ln58_reg_245 <= add_ln58_fu_193_p2;
        data_1_val2_read_reg_210 <= data_1_val2_int_reg;
        mul_ln73_34_reg_235[30 : 1] <= mul_ln73_34_fu_181_p2[30 : 1];
        p_neg12_reg_215[30 : 3] <= p_neg12_fu_94_p2[30 : 3];
        sub_ln58_reg_230 <= sub_ln58_fu_164_p2;
        sub_ln58_reg_230_pp0_iter1_reg <= sub_ln58_reg_230;
        sub_ln73_34_reg_225[30 : 1] <= sub_ln73_34_fu_158_p2[30 : 1];
        sub_ln73_reg_220[30 : 1] <= sub_ln73_fu_124_p2[30 : 1];
    end
end

assign add_ln58_46_fu_186_p2 = (sub_ln73_reg_220 + sub_ln73_34_reg_225);

assign add_ln58_fu_193_p2 = ($signed(sext_ln58_fu_190_p1) + $signed(mul_ln73_34_reg_235));

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_return = ($signed(sext_ln58_31_fu_201_p1) + $signed(sext_ln58_24_fu_198_p1));

assign mul_ln73_34_fu_181_p2 = ($signed(p_neg12_reg_215) - $signed(p_shl13_fu_177_p1));

assign p_neg12_fu_94_p2 = ($signed(31'd0) - $signed(p_shl11_fu_90_p1));

assign p_shl11_fu_90_p1 = $signed(tmp_141_fu_82_p3);

assign p_shl13_fu_177_p1 = $signed(tmp_142_fu_170_p3);

assign sext_ln58_24_fu_198_p1 = $signed(add_ln58_reg_245);

assign sext_ln58_31_fu_201_p1 = $signed(add_ln58_46_reg_240_pp0_iter2_reg);

assign sext_ln58_fu_190_p1 = $signed(sub_ln58_reg_230_pp0_iter1_reg);

assign sext_ln70_fu_130_p1 = $signed(data_3_val4_int_reg);

assign sext_ln73_11_fu_108_p1 = $signed(tmp_143_fu_100_p3);

assign sext_ln73_12_fu_120_p1 = $signed(tmp_144_fu_112_p3);

assign sext_ln73_13_fu_142_p1 = $signed(tmp_145_fu_134_p3);

assign sext_ln73_14_fu_154_p1 = $signed(tmp_146_fu_146_p3);

assign sext_ln73_fu_78_p1 = $signed(tmp_fu_70_p3);

assign sub_ln58_fu_164_p2 = ($signed(sext_ln70_fu_130_p1) - $signed(sext_ln73_fu_78_p1));

assign sub_ln73_34_fu_158_p2 = ($signed(sext_ln73_14_fu_154_p1) - $signed(sext_ln73_13_fu_142_p1));

assign sub_ln73_fu_124_p2 = ($signed(sext_ln73_11_fu_108_p1) - $signed(sext_ln73_12_fu_120_p1));

assign tmp_141_fu_82_p3 = {{data_1_val2_int_reg}, {3'd0}};

assign tmp_142_fu_170_p3 = {{data_1_val2_read_reg_210}, {1'd0}};

assign tmp_143_fu_100_p3 = {{data_2_val3_int_reg}, {3'd0}};

assign tmp_144_fu_112_p3 = {{data_2_val3_int_reg}, {1'd0}};

assign tmp_145_fu_134_p3 = {{data_4_val5_int_reg}, {3'd0}};

assign tmp_146_fu_146_p3 = {{data_4_val5_int_reg}, {1'd0}};

assign tmp_fu_70_p3 = {{data_0_val1_int_reg}, {2'd0}};

always @ (posedge ap_clk) begin
    p_neg12_reg_215[2:0] <= 3'b000;
    sub_ln73_reg_220[0] <= 1'b0;
    sub_ln73_34_reg_225[0] <= 1'b0;
    mul_ln73_34_reg_235[0] <= 1'b0;
    add_ln58_46_reg_240[0] <= 1'b0;
    add_ln58_46_reg_240_pp0_iter2_reg[0] <= 1'b0;
end

endmodule //myproject_dense_latency_wrapper_ap_fixed_ap_fixed_37_19_5_3_0_config22_s
