-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_gt_nin_rem0_ap_ufixed_ap_fixed_19_9_5_3_0_config8_mult_s_w8zec is 
    generic(
             DataWidth     : integer := 16; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 72
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_gt_nin_rem0_ap_ufixed_ap_fixed_19_9_5_3_0_config8_mult_s_w8zec is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0100000000111011", 1 => "0010111111111011", 2 => "0100000110111101", 3 => "0100001000000000", 
    4 => "1011000001000000", 5 => "1101000000000001", 6 => "1110000101000111", 7 => "1100000010111011", 
    8 => "0000000000000101", 9 => "0011111110111011", 10 => "1110111010000110", 11 => "0011000100111011", 
    12 => "0010000100000001", 13 => "0001111111111011", 14 => "1111000111000001", 15 => "1110111100000010", 
    16 => "0100000000000111", 17 => "1100111011111100", 18 => "0001111111111010", 19 => "1110000001111000", 
    20 => "1010000010111010", 21 => "0001111111000100", 22 => "1110000101111110", 23 => "0100000100000101", 
    24 => "0101111100000000", 25 => "1100111110111001", 26 => "1110111111111010", 27 => "1100111110000011", 
    28 => "0011000001000110", 29 => "1110000010111011", 30 => "0111111101000001", 31 => "1111111111000001", 
    32 => "1110000100111101", 33 => "0001111110000001", 34 => "0010111100000101", 35 => "0100000110111100", 
    36 => "0100000010000111", 37 => "0011000111111110", 38 => "1101000101000001", 39 => "0010000000000001", 
    40 => "1100000011111000", 41 => "1101111100001001", 42 => "0011111111000010", 43 => "1011111110000011", 
    44 => "1110000000000101", 45 => "0011001000000010", 46 => "0101111011000100", 47 => "0010111111111101", 
    48 => "1111111111000001", 49 => "1111111110000100", 50 => "0000000010111000", 51 => "0010001000111011", 
    52 => "0110111111111011", 53 => "1110000001111011", 54 => "1011000001111111", 55 => "1101000111000101", 
    56 => "1101111011000000", 57 => "1001111100000110", 58 => "1101000001000100", 59 => "0010111111000110", 
    60 => "1111000011000000", 61 => "1010000000111011", 62 => "0011111100111100", 63 => "1011111111111110", 
    64 => "0001001000111100", 65 => "0000111110000010", 66 => "0100000000000000", 67 => "0011000011111111", 
    68 => "1111001000000101", 69 => "0000111110000101", 70 => "0010001000000011", 71 => "0010111111000001");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

