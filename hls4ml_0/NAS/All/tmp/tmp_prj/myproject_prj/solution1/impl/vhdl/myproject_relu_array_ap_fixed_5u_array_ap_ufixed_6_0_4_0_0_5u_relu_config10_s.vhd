-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_5u_array_ap_ufixed_6_0_4_0_0_5u_relu_config10_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer8_out_dout : IN STD_LOGIC_VECTOR (99 downto 0);
    layer8_out_empty_n : IN STD_LOGIC;
    layer8_out_read : OUT STD_LOGIC;
    layer8_out_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    layer8_out_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    layer10_out_din : OUT STD_LOGIC_VECTOR (29 downto 0);
    layer10_out_full_n : IN STD_LOGIC;
    layer10_out_write : OUT STD_LOGIC;
    layer10_out_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
    layer10_out_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0);
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_5u_array_ap_ufixed_6_0_4_0_0_5u_relu_config10_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln41_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer8_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal layer10_out_blk_n : STD_LOGIC;
    signal layer8_out_read_reg_1042 : STD_LOGIC_VECTOR (99 downto 0);
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal trunc_ln44_fu_155_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln44_reg_1066 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln44_2_reg_1071 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln44_3_reg_1076 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln44_4_reg_1081 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln44_5_reg_1086 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_reg_1091 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1091_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1098 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1103 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_82_reg_1108 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_reg_1108_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_4_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_4_reg_1115 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1120 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_87_reg_1125 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_reg_1125_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_6_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_6_reg_1132 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_1137 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_92_reg_1142 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_92_reg_1142_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_8_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_8_reg_1149 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1154 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_97_reg_1159 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_reg_1159_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_10_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_10_reg_1166 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_reg_1171 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln51_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_1180 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_fu_430_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_reg_1185 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_1191 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_2_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_2_reg_1197 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_1_fu_517_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_1_reg_1202 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_54_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_1208 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_3_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_3_reg_1214 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_2_fu_604_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_2_reg_1219 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_55_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_55_reg_1225 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_4_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_4_reg_1231 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_3_fu_691_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_3_reg_1236 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_56_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_56_reg_1242 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_5_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_5_reg_1248 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_4_fu_778_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_4_reg_1253 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_57_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_57_reg_1259 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_fu_850_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_reg_1265 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_1_fu_892_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_1_reg_1270 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_2_fu_934_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_2_reg_1275 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_3_fu_976_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_3_reg_1280 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_4_fu_1018_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_4_reg_1285 : STD_LOGIC_VECTOR (5 downto 0);
    signal i1_fu_130 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal i_fu_363_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal trunc_ln52_fu_207_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_235_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_16_fu_269_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_23_fu_303_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_30_fu_337_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_80_fu_408_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_fu_394_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln3_fu_385_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_fu_426_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_79_fu_401_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_fu_441_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_8_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_3_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_5_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_fu_495_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_6_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_481_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_3_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_2_fu_472_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_1_fu_513_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_84_fu_488_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_fu_528_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_10_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_5_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_7_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_fu_582_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_9_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_fu_568_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_4_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_3_fu_559_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_2_fu_600_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_89_fu_575_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_91_fu_615_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_17_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_7_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_9_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_95_fu_669_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_12_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_fu_655_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_6_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_4_fu_646_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_3_fu_687_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_94_fu_662_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_fu_702_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_24_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_9_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_11_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_100_fu_756_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_15_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_98_fu_742_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_8_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_5_fu_733_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_4_fu_774_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_99_fu_749_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_101_fu_789_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_31_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_11_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_12_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_4_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_829_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_5_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_4_fu_835_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_5_fu_843_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln52_2_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_7_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_6_fu_871_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_8_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_7_fu_877_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_8_fu_885_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln52_3_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_10_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_9_fu_913_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_11_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_10_fu_919_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_11_fu_927_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln52_4_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_13_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_12_fu_955_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_14_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_13_fu_961_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_14_fu_969_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln52_5_fu_987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_16_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_15_fu_997_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_17_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_16_fu_1003_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_17_fu_1011_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component myproject_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    i1_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    i1_fu_130 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i1_fu_130 <= i_fu_363_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                add_ln52_1_reg_1202 <= add_ln52_1_fu_517_p2;
                add_ln52_2_reg_1219 <= add_ln52_2_fu_604_p2;
                add_ln52_3_reg_1236 <= add_ln52_3_fu_691_p2;
                add_ln52_4_reg_1253 <= add_ln52_4_fu_778_p2;
                add_ln52_reg_1185 <= add_ln52_fu_430_p2;
                empty_54_reg_1208 <= empty_54_fu_548_p2;
                empty_55_reg_1225 <= empty_55_fu_635_p2;
                empty_56_reg_1242 <= empty_56_fu_722_p2;
                empty_57_reg_1259 <= empty_57_fu_809_p2;
                empty_reg_1191 <= empty_fu_461_p2;
                icmp_ln51_2_reg_1197 <= icmp_ln51_2_fu_467_p2;
                icmp_ln51_3_reg_1214 <= icmp_ln51_3_fu_554_p2;
                icmp_ln51_4_reg_1231 <= icmp_ln51_4_fu_641_p2;
                icmp_ln51_5_reg_1248 <= icmp_ln51_5_fu_728_p2;
                icmp_ln51_reg_1180 <= icmp_ln51_fu_380_p2;
                out_data_1_reg_1270 <= out_data_1_fu_892_p3;
                out_data_2_reg_1275 <= out_data_2_fu_934_p3;
                out_data_3_reg_1280 <= out_data_3_fu_976_p3;
                out_data_4_reg_1285 <= out_data_4_fu_1018_p3;
                out_data_reg_1265 <= out_data_fu_850_p3;
                tmp_82_reg_1108_pp0_iter2_reg <= tmp_82_reg_1108;
                tmp_87_reg_1125_pp0_iter2_reg <= tmp_87_reg_1125;
                tmp_92_reg_1142_pp0_iter2_reg <= tmp_92_reg_1142;
                tmp_97_reg_1159_pp0_iter2_reg <= tmp_97_reg_1159;
                tmp_reg_1091_pp0_iter2_reg <= tmp_reg_1091;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln52_10_reg_1166 <= icmp_ln52_10_fu_347_p2;
                icmp_ln52_4_reg_1115 <= icmp_ln52_4_fu_245_p2;
                icmp_ln52_6_reg_1132 <= icmp_ln52_6_fu_279_p2;
                icmp_ln52_8_reg_1149 <= icmp_ln52_8_fu_313_p2;
                icmp_ln52_reg_1098 <= icmp_ln52_fu_211_p2;
                layer8_out_read_reg_1042 <= layer8_out_dout;
                tmp_12_reg_1120 <= layer8_out_dout(39 downto 30);
                tmp_19_reg_1137 <= layer8_out_dout(59 downto 50);
                tmp_26_reg_1154 <= layer8_out_dout(79 downto 70);
                tmp_33_reg_1171 <= layer8_out_dout(99 downto 90);
                tmp_82_reg_1108 <= layer8_out_dout(39 downto 39);
                tmp_87_reg_1125 <= layer8_out_dout(59 downto 59);
                tmp_92_reg_1142 <= layer8_out_dout(79 downto 79);
                tmp_97_reg_1159 <= layer8_out_dout(99 downto 99);
                tmp_reg_1091 <= layer8_out_dout(19 downto 19);
                tmp_s_reg_1103 <= layer8_out_dout(19 downto 10);
                trunc_ln44_2_reg_1071 <= layer8_out_dout(39 downto 20);
                trunc_ln44_3_reg_1076 <= layer8_out_dout(59 downto 40);
                trunc_ln44_4_reg_1081 <= layer8_out_dout(79 downto 60);
                trunc_ln44_5_reg_1086 <= layer8_out_dout(99 downto 80);
                trunc_ln44_reg_1066 <= trunc_ln44_fu_155_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln52_1_fu_517_p2 <= std_logic_vector(unsigned(trunc_ln52_2_fu_472_p4) + unsigned(zext_ln52_1_fu_513_p1));
    add_ln52_2_fu_604_p2 <= std_logic_vector(unsigned(trunc_ln52_3_fu_559_p4) + unsigned(zext_ln52_2_fu_600_p1));
    add_ln52_3_fu_691_p2 <= std_logic_vector(unsigned(trunc_ln52_4_fu_646_p4) + unsigned(zext_ln52_3_fu_687_p1));
    add_ln52_4_fu_778_p2 <= std_logic_vector(unsigned(trunc_ln52_5_fu_733_p4) + unsigned(zext_ln52_4_fu_774_p1));
    add_ln52_fu_430_p2 <= std_logic_vector(unsigned(trunc_ln3_fu_385_p4) + unsigned(zext_ln52_fu_426_p1));
    and_ln52_11_fu_716_p2 <= (tmp_96_fu_702_p3 or not_tmp_24_fu_710_p2);
    and_ln52_12_fu_803_p2 <= (tmp_101_fu_789_p3 or not_tmp_31_fu_797_p2);
    and_ln52_3_fu_507_p2 <= (tmp_83_fu_481_p3 and or_ln52_6_fu_502_p2);
    and_ln52_4_fu_594_p2 <= (tmp_88_fu_568_p3 and or_ln52_9_fu_589_p2);
    and_ln52_5_fu_455_p2 <= (tmp_81_fu_441_p3 or not_tmp_8_fu_449_p2);
    and_ln52_6_fu_681_p2 <= (tmp_93_fu_655_p3 and or_ln52_12_fu_676_p2);
    and_ln52_7_fu_542_p2 <= (tmp_86_fu_528_p3 or not_tmp_10_fu_536_p2);
    and_ln52_8_fu_768_p2 <= (tmp_98_fu_742_p3 and or_ln52_15_fu_763_p2);
    and_ln52_9_fu_629_p2 <= (tmp_91_fu_615_p3 or not_tmp_17_fu_623_p2);
    and_ln52_fu_420_p2 <= (tmp_78_fu_394_p3 and or_ln52_fu_415_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, layer8_out_empty_n, layer10_out_full_n, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_01001_grp1 <= ((ap_done_reg = ap_const_logic_1) or ((layer10_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((layer8_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, layer8_out_empty_n, layer10_out_full_n, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((layer10_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((layer8_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, layer8_out_empty_n, layer10_out_full_n, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((ap_done_reg = ap_const_logic_1) or ((layer10_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((layer8_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, layer8_out_empty_n, layer10_out_full_n, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((layer10_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((layer8_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln41_fu_369_p2)
    begin
        if (((icmp_ln41_fu_369_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_54_fu_548_p2 <= (icmp_ln52_5_fu_523_p2 and and_ln52_7_fu_542_p2);
    empty_55_fu_635_p2 <= (icmp_ln52_7_fu_610_p2 and and_ln52_9_fu_629_p2);
    empty_56_fu_722_p2 <= (icmp_ln52_9_fu_697_p2 and and_ln52_11_fu_716_p2);
    empty_57_fu_809_p2 <= (icmp_ln52_11_fu_784_p2 and and_ln52_12_fu_803_p2);
    empty_fu_461_p2 <= (icmp_ln52_3_fu_436_p2 and and_ln52_5_fu_455_p2);
    i_fu_363_p2 <= std_logic_vector(unsigned(i1_fu_130) + unsigned(ap_const_lv5_1));
    icmp_ln41_fu_369_p2 <= "1" when (i1_fu_130 = ap_const_lv5_18) else "0";
    icmp_ln51_2_fu_467_p2 <= "1" when (signed(trunc_ln44_2_reg_1071) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_3_fu_554_p2 <= "1" when (signed(trunc_ln44_3_reg_1076) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_4_fu_641_p2 <= "1" when (signed(trunc_ln44_4_reg_1081) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_5_fu_728_p2 <= "1" when (signed(trunc_ln44_5_reg_1086) > signed(ap_const_lv20_0)) else "0";
    icmp_ln51_fu_380_p2 <= "1" when (signed(trunc_ln44_reg_1066) > signed(ap_const_lv20_0)) else "0";
    icmp_ln52_10_fu_347_p2 <= "0" when (tmp_30_fu_337_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_11_fu_784_p2 <= "1" when (tmp_33_reg_1171 = ap_const_lv10_0) else "0";
    icmp_ln52_3_fu_436_p2 <= "1" when (tmp_s_reg_1103 = ap_const_lv10_0) else "0";
    icmp_ln52_4_fu_245_p2 <= "0" when (tmp_4_fu_235_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_5_fu_523_p2 <= "1" when (tmp_12_reg_1120 = ap_const_lv10_0) else "0";
    icmp_ln52_6_fu_279_p2 <= "0" when (tmp_16_fu_269_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_7_fu_610_p2 <= "1" when (tmp_19_reg_1137 = ap_const_lv10_0) else "0";
    icmp_ln52_8_fu_313_p2 <= "0" when (tmp_23_fu_303_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_9_fu_697_p2 <= "1" when (tmp_26_reg_1154 = ap_const_lv10_0) else "0";
    icmp_ln52_fu_211_p2 <= "0" when (trunc_ln52_fu_207_p1 = ap_const_lv3_0) else "1";

    layer10_out_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, layer10_out_full_n, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer10_out_blk_n <= layer10_out_full_n;
        else 
            layer10_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer10_out_din <= ((((out_data_4_reg_1285 & out_data_3_reg_1280) & out_data_2_reg_1275) & out_data_1_reg_1270) & out_data_reg_1265);

    layer10_out_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer10_out_write <= ap_const_logic_1;
        else 
            layer10_out_write <= ap_const_logic_0;
        end if; 
    end process;


    layer8_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer8_out_empty_n, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer8_out_blk_n <= layer8_out_empty_n;
        else 
            layer8_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer8_out_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer8_out_read <= ap_const_logic_1;
        else 
            layer8_out_read <= ap_const_logic_0;
        end if; 
    end process;

    not_tmp_10_fu_536_p2 <= (tmp_84_fu_488_p3 xor ap_const_lv1_1);
    not_tmp_17_fu_623_p2 <= (tmp_89_fu_575_p3 xor ap_const_lv1_1);
    not_tmp_24_fu_710_p2 <= (tmp_94_fu_662_p3 xor ap_const_lv1_1);
    not_tmp_31_fu_797_p2 <= (tmp_99_fu_749_p3 xor ap_const_lv1_1);
    not_tmp_8_fu_449_p2 <= (tmp_79_fu_401_p3 xor ap_const_lv1_1);
    or_ln52_10_fu_899_p2 <= (tmp_87_reg_1125_pp0_iter2_reg or empty_55_reg_1225);
    or_ln52_11_fu_908_p2 <= (xor_ln52_3_fu_903_p2 or tmp_87_reg_1125_pp0_iter2_reg);
    or_ln52_12_fu_676_p2 <= (tmp_95_fu_669_p3 or icmp_ln52_8_reg_1149);
    or_ln52_13_fu_941_p2 <= (tmp_92_reg_1142_pp0_iter2_reg or empty_56_reg_1242);
    or_ln52_14_fu_950_p2 <= (xor_ln52_4_fu_945_p2 or tmp_92_reg_1142_pp0_iter2_reg);
    or_ln52_15_fu_763_p2 <= (tmp_100_fu_756_p3 or icmp_ln52_10_reg_1166);
    or_ln52_16_fu_983_p2 <= (tmp_97_reg_1159_pp0_iter2_reg or empty_57_reg_1259);
    or_ln52_17_fu_992_p2 <= (xor_ln52_5_fu_987_p2 or tmp_97_reg_1159_pp0_iter2_reg);
    or_ln52_4_fu_815_p2 <= (tmp_reg_1091_pp0_iter2_reg or empty_reg_1191);
    or_ln52_5_fu_824_p2 <= (xor_ln52_fu_819_p2 or tmp_reg_1091_pp0_iter2_reg);
    or_ln52_6_fu_502_p2 <= (tmp_85_fu_495_p3 or icmp_ln52_4_reg_1115);
    or_ln52_7_fu_857_p2 <= (tmp_82_reg_1108_pp0_iter2_reg or empty_54_reg_1208);
    or_ln52_8_fu_866_p2 <= (xor_ln52_2_fu_861_p2 or tmp_82_reg_1108_pp0_iter2_reg);
    or_ln52_9_fu_589_p2 <= (tmp_90_fu_582_p3 or icmp_ln52_6_reg_1132);
    or_ln52_fu_415_p2 <= (tmp_80_fu_408_p3 or icmp_ln52_reg_1098);
    out_data_1_fu_892_p3 <= 
        select_ln52_8_fu_885_p3 when (icmp_ln51_2_reg_1197(0) = '1') else 
        ap_const_lv6_0;
    out_data_2_fu_934_p3 <= 
        select_ln52_11_fu_927_p3 when (icmp_ln51_3_reg_1214(0) = '1') else 
        ap_const_lv6_0;
    out_data_3_fu_976_p3 <= 
        select_ln52_14_fu_969_p3 when (icmp_ln51_4_reg_1231(0) = '1') else 
        ap_const_lv6_0;
    out_data_4_fu_1018_p3 <= 
        select_ln52_17_fu_1011_p3 when (icmp_ln51_5_reg_1248(0) = '1') else 
        ap_const_lv6_0;
    out_data_fu_850_p3 <= 
        select_ln52_5_fu_843_p3 when (icmp_ln51_reg_1180(0) = '1') else 
        ap_const_lv6_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln52_10_fu_919_p3 <= 
        select_ln52_9_fu_913_p3 when (or_ln52_10_fu_899_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_11_fu_927_p3 <= 
        select_ln52_10_fu_919_p3 when (or_ln52_11_fu_908_p2(0) = '1') else 
        add_ln52_2_reg_1219;
    select_ln52_12_fu_955_p3 <= 
        ap_const_lv6_0 when (tmp_92_reg_1142_pp0_iter2_reg(0) = '1') else 
        add_ln52_3_reg_1236;
    select_ln52_13_fu_961_p3 <= 
        select_ln52_12_fu_955_p3 when (or_ln52_13_fu_941_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_14_fu_969_p3 <= 
        select_ln52_13_fu_961_p3 when (or_ln52_14_fu_950_p2(0) = '1') else 
        add_ln52_3_reg_1236;
    select_ln52_15_fu_997_p3 <= 
        ap_const_lv6_0 when (tmp_97_reg_1159_pp0_iter2_reg(0) = '1') else 
        add_ln52_4_reg_1253;
    select_ln52_16_fu_1003_p3 <= 
        select_ln52_15_fu_997_p3 when (or_ln52_16_fu_983_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_17_fu_1011_p3 <= 
        select_ln52_16_fu_1003_p3 when (or_ln52_17_fu_992_p2(0) = '1') else 
        add_ln52_4_reg_1253;
    select_ln52_4_fu_835_p3 <= 
        select_ln52_fu_829_p3 when (or_ln52_4_fu_815_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_5_fu_843_p3 <= 
        select_ln52_4_fu_835_p3 when (or_ln52_5_fu_824_p2(0) = '1') else 
        add_ln52_reg_1185;
    select_ln52_6_fu_871_p3 <= 
        ap_const_lv6_0 when (tmp_82_reg_1108_pp0_iter2_reg(0) = '1') else 
        add_ln52_1_reg_1202;
    select_ln52_7_fu_877_p3 <= 
        select_ln52_6_fu_871_p3 when (or_ln52_7_fu_857_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_8_fu_885_p3 <= 
        select_ln52_7_fu_877_p3 when (or_ln52_8_fu_866_p2(0) = '1') else 
        add_ln52_1_reg_1202;
    select_ln52_9_fu_913_p3 <= 
        ap_const_lv6_0 when (tmp_87_reg_1125_pp0_iter2_reg(0) = '1') else 
        add_ln52_2_reg_1219;
    select_ln52_fu_829_p3 <= 
        ap_const_lv6_0 when (tmp_reg_1091_pp0_iter2_reg(0) = '1') else 
        add_ln52_reg_1185;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_100_fu_756_p3 <= layer8_out_read_reg_1042(84 downto 84);
    tmp_101_fu_789_p3 <= add_ln52_4_fu_778_p2(5 downto 5);
    tmp_16_fu_269_p4 <= layer8_out_dout(42 downto 40);
    tmp_23_fu_303_p4 <= layer8_out_dout(62 downto 60);
    tmp_30_fu_337_p4 <= layer8_out_dout(82 downto 80);
    tmp_4_fu_235_p4 <= layer8_out_dout(22 downto 20);
    tmp_78_fu_394_p3 <= layer8_out_read_reg_1042(3 downto 3);
    tmp_79_fu_401_p3 <= layer8_out_read_reg_1042(9 downto 9);
    tmp_80_fu_408_p3 <= layer8_out_read_reg_1042(4 downto 4);
    tmp_81_fu_441_p3 <= add_ln52_fu_430_p2(5 downto 5);
    tmp_83_fu_481_p3 <= layer8_out_read_reg_1042(23 downto 23);
    tmp_84_fu_488_p3 <= layer8_out_read_reg_1042(29 downto 29);
    tmp_85_fu_495_p3 <= layer8_out_read_reg_1042(24 downto 24);
    tmp_86_fu_528_p3 <= add_ln52_1_fu_517_p2(5 downto 5);
    tmp_88_fu_568_p3 <= layer8_out_read_reg_1042(43 downto 43);
    tmp_89_fu_575_p3 <= layer8_out_read_reg_1042(49 downto 49);
    tmp_90_fu_582_p3 <= layer8_out_read_reg_1042(44 downto 44);
    tmp_91_fu_615_p3 <= add_ln52_2_fu_604_p2(5 downto 5);
    tmp_93_fu_655_p3 <= layer8_out_read_reg_1042(63 downto 63);
    tmp_94_fu_662_p3 <= layer8_out_read_reg_1042(69 downto 69);
    tmp_95_fu_669_p3 <= layer8_out_read_reg_1042(64 downto 64);
    tmp_96_fu_702_p3 <= add_ln52_3_fu_691_p2(5 downto 5);
    tmp_98_fu_742_p3 <= layer8_out_read_reg_1042(83 downto 83);
    tmp_99_fu_749_p3 <= layer8_out_read_reg_1042(89 downto 89);
    trunc_ln3_fu_385_p4 <= layer8_out_read_reg_1042(9 downto 4);
    trunc_ln44_fu_155_p1 <= layer8_out_dout(20 - 1 downto 0);
    trunc_ln52_2_fu_472_p4 <= layer8_out_read_reg_1042(29 downto 24);
    trunc_ln52_3_fu_559_p4 <= layer8_out_read_reg_1042(49 downto 44);
    trunc_ln52_4_fu_646_p4 <= layer8_out_read_reg_1042(69 downto 64);
    trunc_ln52_5_fu_733_p4 <= layer8_out_read_reg_1042(89 downto 84);
    trunc_ln52_fu_207_p1 <= layer8_out_dout(3 - 1 downto 0);
    xor_ln52_2_fu_861_p2 <= (empty_54_reg_1208 xor ap_const_lv1_1);
    xor_ln52_3_fu_903_p2 <= (empty_55_reg_1225 xor ap_const_lv1_1);
    xor_ln52_4_fu_945_p2 <= (empty_56_reg_1242 xor ap_const_lv1_1);
    xor_ln52_5_fu_987_p2 <= (empty_57_reg_1259 xor ap_const_lv1_1);
    xor_ln52_fu_819_p2 <= (empty_reg_1191 xor ap_const_lv1_1);
    zext_ln52_1_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_3_fu_507_p2),6));
    zext_ln52_2_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_4_fu_594_p2),6));
    zext_ln52_3_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_6_fu_681_p2),6));
    zext_ln52_4_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_8_fu_768_p2),6));
    zext_ln52_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_fu_420_p2),6));
end behav;
