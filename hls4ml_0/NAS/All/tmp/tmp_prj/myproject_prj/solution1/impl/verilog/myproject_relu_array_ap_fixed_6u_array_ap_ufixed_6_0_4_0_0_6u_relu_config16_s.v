// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_6u_array_ap_ufixed_6_0_4_0_0_6u_relu_config16_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer14_out_dout,
        layer14_out_empty_n,
        layer14_out_read,
        layer14_out_num_data_valid,
        layer14_out_fifo_cap,
        layer16_out_din,
        layer16_out_full_n,
        layer16_out_write,
        layer16_out_num_data_valid,
        layer16_out_fifo_cap
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [113:0] layer14_out_dout;
input   layer14_out_empty_n;
output   layer14_out_read;
input  [1:0] layer14_out_num_data_valid;
input  [1:0] layer14_out_fifo_cap;
output  [35:0] layer16_out_din;
input   layer16_out_full_n;
output   layer16_out_write;
input  [1:0] layer16_out_num_data_valid;
input  [1:0] layer16_out_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer14_out_read;
reg layer16_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer14_out_blk_n;
reg    layer16_out_blk_n;
wire    ap_CS_fsm_state4;
reg   [113:0] layer14_out_read_reg_1176;
reg    ap_block_state1;
wire   [18:0] trunc_ln44_fu_139_p1;
reg   [18:0] trunc_ln44_reg_1204;
reg   [18:0] trunc_ln44_6_reg_1209;
reg   [18:0] trunc_ln44_7_reg_1214;
reg   [18:0] trunc_ln44_8_reg_1219;
reg   [18:0] trunc_ln44_9_reg_1224;
reg   [18:0] trunc_ln44_s_reg_1229;
reg   [0:0] tmp_reg_1234;
wire   [0:0] icmp_ln52_fu_205_p2;
reg   [0:0] icmp_ln52_reg_1241;
reg   [8:0] tmp_5_reg_1246;
reg   [0:0] tmp_6_reg_1251;
wire   [0:0] icmp_ln52_2_fu_239_p2;
reg   [0:0] icmp_ln52_2_reg_1258;
reg   [8:0] tmp_s_reg_1263;
reg   [0:0] tmp_12_reg_1268;
wire   [0:0] icmp_ln52_4_fu_273_p2;
reg   [0:0] icmp_ln52_4_reg_1275;
reg   [8:0] tmp_17_reg_1280;
reg   [0:0] tmp_19_reg_1285;
wire   [0:0] icmp_ln52_6_fu_307_p2;
reg   [0:0] icmp_ln52_6_reg_1292;
reg   [8:0] tmp_24_reg_1297;
reg   [0:0] tmp_26_reg_1302;
wire   [0:0] icmp_ln52_8_fu_341_p2;
reg   [0:0] icmp_ln52_8_reg_1309;
reg   [8:0] tmp_31_reg_1314;
reg   [0:0] tmp_33_reg_1319;
wire   [0:0] icmp_ln52_10_fu_375_p2;
reg   [0:0] icmp_ln52_10_reg_1326;
reg   [8:0] tmp_38_reg_1331;
wire   [0:0] icmp_ln51_fu_391_p2;
reg   [0:0] icmp_ln51_reg_1336;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln52_fu_441_p2;
reg   [5:0] add_ln52_reg_1341;
wire   [0:0] empty_fu_472_p2;
reg   [0:0] empty_reg_1347;
wire   [0:0] icmp_ln51_1_fu_478_p2;
reg   [0:0] icmp_ln51_1_reg_1353;
wire   [5:0] add_ln52_1_fu_528_p2;
reg   [5:0] add_ln52_1_reg_1358;
wire   [0:0] empty_44_fu_559_p2;
reg   [0:0] empty_44_reg_1364;
wire   [0:0] icmp_ln51_2_fu_565_p2;
reg   [0:0] icmp_ln51_2_reg_1370;
wire   [5:0] add_ln52_2_fu_615_p2;
reg   [5:0] add_ln52_2_reg_1375;
wire   [0:0] empty_45_fu_646_p2;
reg   [0:0] empty_45_reg_1381;
wire   [0:0] icmp_ln51_3_fu_652_p2;
reg   [0:0] icmp_ln51_3_reg_1387;
wire   [5:0] add_ln52_3_fu_702_p2;
reg   [5:0] add_ln52_3_reg_1392;
wire   [0:0] empty_46_fu_733_p2;
reg   [0:0] empty_46_reg_1398;
wire   [0:0] icmp_ln51_4_fu_739_p2;
reg   [0:0] icmp_ln51_4_reg_1404;
wire   [5:0] add_ln52_4_fu_789_p2;
reg   [5:0] add_ln52_4_reg_1409;
wire   [0:0] empty_47_fu_820_p2;
reg   [0:0] empty_47_reg_1415;
wire   [0:0] icmp_ln51_5_fu_826_p2;
reg   [0:0] icmp_ln51_5_reg_1421;
wire   [5:0] add_ln52_5_fu_876_p2;
reg   [5:0] add_ln52_5_reg_1426;
wire   [0:0] empty_48_fu_907_p2;
reg   [0:0] empty_48_reg_1432;
wire   [5:0] out_data_0_0_0_0_0_load_fu_948_p3;
reg   [5:0] out_data_0_0_0_0_0_load_reg_1438;
wire    ap_CS_fsm_state3;
wire   [5:0] out_data_0_1_0_0_0_load_fu_990_p3;
reg   [5:0] out_data_0_1_0_0_0_load_reg_1443;
wire   [5:0] out_data_0_2_0_0_0_load_fu_1032_p3;
reg   [5:0] out_data_0_2_0_0_0_load_reg_1448;
wire   [5:0] out_data_0_3_0_0_0_load_fu_1074_p3;
reg   [5:0] out_data_0_3_0_0_0_load_reg_1453;
wire   [5:0] out_data_0_4_0_0_0_load_fu_1116_p3;
reg   [5:0] out_data_0_4_0_0_0_load_reg_1458;
wire   [5:0] out_data_0_5_0_0_0_load_fu_1158_p3;
reg   [5:0] out_data_0_5_0_0_0_load_reg_1463;
wire   [2:0] trunc_ln52_fu_201_p1;
wire   [2:0] tmp_9_fu_229_p4;
wire   [2:0] tmp_14_fu_263_p4;
wire   [2:0] tmp_21_fu_297_p4;
wire   [2:0] tmp_28_fu_331_p4;
wire   [2:0] tmp_35_fu_365_p4;
wire   [0:0] tmp_3_fu_419_p3;
wire   [0:0] or_ln52_fu_426_p2;
wire   [0:0] tmp_1_fu_405_p3;
wire   [0:0] and_ln52_fu_431_p2;
wire   [5:0] trunc_ln1_fu_396_p4;
wire   [5:0] zext_ln52_fu_437_p1;
wire   [0:0] tmp_2_fu_412_p3;
wire   [0:0] tmp_4_fu_452_p3;
wire   [0:0] not_tmp_37_fu_460_p2;
wire   [0:0] icmp_ln52_1_fu_447_p2;
wire   [0:0] and_ln52_14_fu_466_p2;
wire   [0:0] tmp_10_fu_506_p3;
wire   [0:0] or_ln52_3_fu_513_p2;
wire   [0:0] tmp_7_fu_492_p3;
wire   [0:0] and_ln52_1_fu_518_p2;
wire   [5:0] trunc_ln52_6_fu_483_p4;
wire   [5:0] zext_ln52_1_fu_524_p1;
wire   [0:0] tmp_8_fu_499_p3;
wire   [0:0] tmp_11_fu_539_p3;
wire   [0:0] not_tmp_44_fu_547_p2;
wire   [0:0] icmp_ln52_3_fu_534_p2;
wire   [0:0] and_ln52_16_fu_553_p2;
wire   [0:0] tmp_16_fu_593_p3;
wire   [0:0] or_ln52_6_fu_600_p2;
wire   [0:0] tmp_13_fu_579_p3;
wire   [0:0] and_ln52_2_fu_605_p2;
wire   [5:0] trunc_ln52_7_fu_570_p4;
wire   [5:0] zext_ln52_2_fu_611_p1;
wire   [0:0] tmp_15_fu_586_p3;
wire   [0:0] tmp_18_fu_626_p3;
wire   [0:0] not_tmp_51_fu_634_p2;
wire   [0:0] icmp_ln52_5_fu_621_p2;
wire   [0:0] and_ln52_18_fu_640_p2;
wire   [0:0] tmp_23_fu_680_p3;
wire   [0:0] or_ln52_9_fu_687_p2;
wire   [0:0] tmp_20_fu_666_p3;
wire   [0:0] and_ln52_3_fu_692_p2;
wire   [5:0] trunc_ln52_8_fu_657_p4;
wire   [5:0] zext_ln52_3_fu_698_p1;
wire   [0:0] tmp_22_fu_673_p3;
wire   [0:0] tmp_25_fu_713_p3;
wire   [0:0] not_tmp_58_fu_721_p2;
wire   [0:0] icmp_ln52_7_fu_708_p2;
wire   [0:0] and_ln52_20_fu_727_p2;
wire   [0:0] tmp_30_fu_767_p3;
wire   [0:0] or_ln52_12_fu_774_p2;
wire   [0:0] tmp_27_fu_753_p3;
wire   [0:0] and_ln52_4_fu_779_p2;
wire   [5:0] trunc_ln52_9_fu_744_p4;
wire   [5:0] zext_ln52_4_fu_785_p1;
wire   [0:0] tmp_29_fu_760_p3;
wire   [0:0] tmp_32_fu_800_p3;
wire   [0:0] not_tmp_65_fu_808_p2;
wire   [0:0] icmp_ln52_9_fu_795_p2;
wire   [0:0] and_ln52_22_fu_814_p2;
wire   [0:0] tmp_37_fu_854_p3;
wire   [0:0] or_ln52_15_fu_861_p2;
wire   [0:0] tmp_34_fu_840_p3;
wire   [0:0] and_ln52_5_fu_866_p2;
wire   [5:0] trunc_ln52_s_fu_831_p4;
wire   [5:0] zext_ln52_5_fu_872_p1;
wire   [0:0] tmp_36_fu_847_p3;
wire   [0:0] tmp_39_fu_887_p3;
wire   [0:0] not_tmp_72_fu_895_p2;
wire   [0:0] icmp_ln52_11_fu_882_p2;
wire   [0:0] and_ln52_23_fu_901_p2;
wire   [0:0] xor_ln52_fu_917_p2;
wire   [0:0] or_ln52_1_fu_913_p2;
wire   [5:0] select_ln52_fu_927_p3;
wire   [0:0] or_ln52_2_fu_922_p2;
wire   [5:0] select_ln52_1_fu_933_p3;
wire   [5:0] select_ln52_2_fu_941_p3;
wire   [0:0] xor_ln52_1_fu_959_p2;
wire   [0:0] or_ln52_4_fu_955_p2;
wire   [5:0] select_ln52_3_fu_969_p3;
wire   [0:0] or_ln52_5_fu_964_p2;
wire   [5:0] select_ln52_4_fu_975_p3;
wire   [5:0] select_ln52_5_fu_983_p3;
wire   [0:0] xor_ln52_2_fu_1001_p2;
wire   [0:0] or_ln52_7_fu_997_p2;
wire   [5:0] select_ln52_6_fu_1011_p3;
wire   [0:0] or_ln52_8_fu_1006_p2;
wire   [5:0] select_ln52_7_fu_1017_p3;
wire   [5:0] select_ln52_8_fu_1025_p3;
wire   [0:0] xor_ln52_3_fu_1043_p2;
wire   [0:0] or_ln52_10_fu_1039_p2;
wire   [5:0] select_ln52_9_fu_1053_p3;
wire   [0:0] or_ln52_11_fu_1048_p2;
wire   [5:0] select_ln52_10_fu_1059_p3;
wire   [5:0] select_ln52_11_fu_1067_p3;
wire   [0:0] xor_ln52_4_fu_1085_p2;
wire   [0:0] or_ln52_13_fu_1081_p2;
wire   [5:0] select_ln52_12_fu_1095_p3;
wire   [0:0] or_ln52_14_fu_1090_p2;
wire   [5:0] select_ln52_13_fu_1101_p3;
wire   [5:0] select_ln52_14_fu_1109_p3;
wire   [0:0] xor_ln52_5_fu_1127_p2;
wire   [0:0] or_ln52_16_fu_1123_p2;
wire   [5:0] select_ln52_15_fu_1137_p3;
wire   [0:0] or_ln52_17_fu_1132_p2;
wire   [5:0] select_ln52_16_fu_1143_p3;
wire   [5:0] select_ln52_17_fu_1151_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((layer16_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln52_1_reg_1358 <= add_ln52_1_fu_528_p2;
        add_ln52_2_reg_1375 <= add_ln52_2_fu_615_p2;
        add_ln52_3_reg_1392 <= add_ln52_3_fu_702_p2;
        add_ln52_4_reg_1409 <= add_ln52_4_fu_789_p2;
        add_ln52_5_reg_1426 <= add_ln52_5_fu_876_p2;
        add_ln52_reg_1341 <= add_ln52_fu_441_p2;
        empty_44_reg_1364 <= empty_44_fu_559_p2;
        empty_45_reg_1381 <= empty_45_fu_646_p2;
        empty_46_reg_1398 <= empty_46_fu_733_p2;
        empty_47_reg_1415 <= empty_47_fu_820_p2;
        empty_48_reg_1432 <= empty_48_fu_907_p2;
        empty_reg_1347 <= empty_fu_472_p2;
        icmp_ln51_1_reg_1353 <= icmp_ln51_1_fu_478_p2;
        icmp_ln51_2_reg_1370 <= icmp_ln51_2_fu_565_p2;
        icmp_ln51_3_reg_1387 <= icmp_ln51_3_fu_652_p2;
        icmp_ln51_4_reg_1404 <= icmp_ln51_4_fu_739_p2;
        icmp_ln51_5_reg_1421 <= icmp_ln51_5_fu_826_p2;
        icmp_ln51_reg_1336 <= icmp_ln51_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln52_10_reg_1326 <= icmp_ln52_10_fu_375_p2;
        icmp_ln52_2_reg_1258 <= icmp_ln52_2_fu_239_p2;
        icmp_ln52_4_reg_1275 <= icmp_ln52_4_fu_273_p2;
        icmp_ln52_6_reg_1292 <= icmp_ln52_6_fu_307_p2;
        icmp_ln52_8_reg_1309 <= icmp_ln52_8_fu_341_p2;
        icmp_ln52_reg_1241 <= icmp_ln52_fu_205_p2;
        layer14_out_read_reg_1176 <= layer14_out_dout;
        tmp_12_reg_1268 <= layer14_out_dout[32'd56];
        tmp_17_reg_1280 <= {{layer14_out_dout[56:48]}};
        tmp_19_reg_1285 <= layer14_out_dout[32'd75];
        tmp_24_reg_1297 <= {{layer14_out_dout[75:67]}};
        tmp_26_reg_1302 <= layer14_out_dout[32'd94];
        tmp_31_reg_1314 <= {{layer14_out_dout[94:86]}};
        tmp_33_reg_1319 <= layer14_out_dout[32'd113];
        tmp_38_reg_1331 <= {{layer14_out_dout[113:105]}};
        tmp_5_reg_1246 <= {{layer14_out_dout[18:10]}};
        tmp_6_reg_1251 <= layer14_out_dout[32'd37];
        tmp_reg_1234 <= layer14_out_dout[32'd18];
        tmp_s_reg_1263 <= {{layer14_out_dout[37:29]}};
        trunc_ln44_6_reg_1209 <= {{layer14_out_dout[37:19]}};
        trunc_ln44_7_reg_1214 <= {{layer14_out_dout[56:38]}};
        trunc_ln44_8_reg_1219 <= {{layer14_out_dout[75:57]}};
        trunc_ln44_9_reg_1224 <= {{layer14_out_dout[94:76]}};
        trunc_ln44_reg_1204 <= trunc_ln44_fu_139_p1;
        trunc_ln44_s_reg_1229 <= {{layer14_out_dout[113:95]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_data_0_0_0_0_0_load_reg_1438 <= out_data_0_0_0_0_0_load_fu_948_p3;
        out_data_0_1_0_0_0_load_reg_1443 <= out_data_0_1_0_0_0_load_fu_990_p3;
        out_data_0_2_0_0_0_load_reg_1448 <= out_data_0_2_0_0_0_load_fu_1032_p3;
        out_data_0_3_0_0_0_load_reg_1453 <= out_data_0_3_0_0_0_load_fu_1074_p3;
        out_data_0_4_0_0_0_load_reg_1458 <= out_data_0_4_0_0_0_load_fu_1116_p3;
        out_data_0_5_0_0_0_load_reg_1463 <= out_data_0_5_0_0_0_load_fu_1158_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((layer16_out_full_n == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((layer16_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((layer16_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer14_out_blk_n = layer14_out_empty_n;
    end else begin
        layer14_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer14_out_read = 1'b1;
    end else begin
        layer14_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        layer16_out_blk_n = layer16_out_full_n;
    end else begin
        layer16_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((layer16_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        layer16_out_write = 1'b1;
    end else begin
        layer16_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((layer16_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_1_fu_528_p2 = (trunc_ln52_6_fu_483_p4 + zext_ln52_1_fu_524_p1);

assign add_ln52_2_fu_615_p2 = (trunc_ln52_7_fu_570_p4 + zext_ln52_2_fu_611_p1);

assign add_ln52_3_fu_702_p2 = (trunc_ln52_8_fu_657_p4 + zext_ln52_3_fu_698_p1);

assign add_ln52_4_fu_789_p2 = (trunc_ln52_9_fu_744_p4 + zext_ln52_4_fu_785_p1);

assign add_ln52_5_fu_876_p2 = (trunc_ln52_s_fu_831_p4 + zext_ln52_5_fu_872_p1);

assign add_ln52_fu_441_p2 = (trunc_ln1_fu_396_p4 + zext_ln52_fu_437_p1);

assign and_ln52_14_fu_466_p2 = (tmp_4_fu_452_p3 | not_tmp_37_fu_460_p2);

assign and_ln52_16_fu_553_p2 = (tmp_11_fu_539_p3 | not_tmp_44_fu_547_p2);

assign and_ln52_18_fu_640_p2 = (tmp_18_fu_626_p3 | not_tmp_51_fu_634_p2);

assign and_ln52_1_fu_518_p2 = (tmp_7_fu_492_p3 & or_ln52_3_fu_513_p2);

assign and_ln52_20_fu_727_p2 = (tmp_25_fu_713_p3 | not_tmp_58_fu_721_p2);

assign and_ln52_22_fu_814_p2 = (tmp_32_fu_800_p3 | not_tmp_65_fu_808_p2);

assign and_ln52_23_fu_901_p2 = (tmp_39_fu_887_p3 | not_tmp_72_fu_895_p2);

assign and_ln52_2_fu_605_p2 = (tmp_13_fu_579_p3 & or_ln52_6_fu_600_p2);

assign and_ln52_3_fu_692_p2 = (tmp_20_fu_666_p3 & or_ln52_9_fu_687_p2);

assign and_ln52_4_fu_779_p2 = (tmp_27_fu_753_p3 & or_ln52_12_fu_774_p2);

assign and_ln52_5_fu_866_p2 = (tmp_34_fu_840_p3 & or_ln52_15_fu_861_p2);

assign and_ln52_fu_431_p2 = (tmp_1_fu_405_p3 & or_ln52_fu_426_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((layer14_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign empty_44_fu_559_p2 = (icmp_ln52_3_fu_534_p2 & and_ln52_16_fu_553_p2);

assign empty_45_fu_646_p2 = (icmp_ln52_5_fu_621_p2 & and_ln52_18_fu_640_p2);

assign empty_46_fu_733_p2 = (icmp_ln52_7_fu_708_p2 & and_ln52_20_fu_727_p2);

assign empty_47_fu_820_p2 = (icmp_ln52_9_fu_795_p2 & and_ln52_22_fu_814_p2);

assign empty_48_fu_907_p2 = (icmp_ln52_11_fu_882_p2 & and_ln52_23_fu_901_p2);

assign empty_fu_472_p2 = (icmp_ln52_1_fu_447_p2 & and_ln52_14_fu_466_p2);

assign icmp_ln51_1_fu_478_p2 = (($signed(trunc_ln44_6_reg_1209) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_2_fu_565_p2 = (($signed(trunc_ln44_7_reg_1214) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_3_fu_652_p2 = (($signed(trunc_ln44_8_reg_1219) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_4_fu_739_p2 = (($signed(trunc_ln44_9_reg_1224) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_5_fu_826_p2 = (($signed(trunc_ln44_s_reg_1229) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_391_p2 = (($signed(trunc_ln44_reg_1204) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln52_10_fu_375_p2 = ((tmp_35_fu_365_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_11_fu_882_p2 = ((tmp_38_reg_1331 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_447_p2 = ((tmp_5_reg_1246 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_2_fu_239_p2 = ((tmp_9_fu_229_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_3_fu_534_p2 = ((tmp_s_reg_1263 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_4_fu_273_p2 = ((tmp_14_fu_263_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_5_fu_621_p2 = ((tmp_17_reg_1280 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_6_fu_307_p2 = ((tmp_21_fu_297_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_7_fu_708_p2 = ((tmp_24_reg_1297 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_8_fu_341_p2 = ((tmp_28_fu_331_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_9_fu_795_p2 = ((tmp_31_reg_1314 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_205_p2 = ((trunc_ln52_fu_201_p1 != 3'd0) ? 1'b1 : 1'b0);

assign layer16_out_din = {{{{{{out_data_0_5_0_0_0_load_reg_1463}, {out_data_0_4_0_0_0_load_reg_1458}}, {out_data_0_3_0_0_0_load_reg_1453}}, {out_data_0_2_0_0_0_load_reg_1448}}, {out_data_0_1_0_0_0_load_reg_1443}}, {out_data_0_0_0_0_0_load_reg_1438}};

assign not_tmp_37_fu_460_p2 = (tmp_2_fu_412_p3 ^ 1'd1);

assign not_tmp_44_fu_547_p2 = (tmp_8_fu_499_p3 ^ 1'd1);

assign not_tmp_51_fu_634_p2 = (tmp_15_fu_586_p3 ^ 1'd1);

assign not_tmp_58_fu_721_p2 = (tmp_22_fu_673_p3 ^ 1'd1);

assign not_tmp_65_fu_808_p2 = (tmp_29_fu_760_p3 ^ 1'd1);

assign not_tmp_72_fu_895_p2 = (tmp_36_fu_847_p3 ^ 1'd1);

assign or_ln52_10_fu_1039_p2 = (tmp_19_reg_1285 | empty_46_reg_1398);

assign or_ln52_11_fu_1048_p2 = (xor_ln52_3_fu_1043_p2 | tmp_19_reg_1285);

assign or_ln52_12_fu_774_p2 = (tmp_30_fu_767_p3 | icmp_ln52_8_reg_1309);

assign or_ln52_13_fu_1081_p2 = (tmp_26_reg_1302 | empty_47_reg_1415);

assign or_ln52_14_fu_1090_p2 = (xor_ln52_4_fu_1085_p2 | tmp_26_reg_1302);

assign or_ln52_15_fu_861_p2 = (tmp_37_fu_854_p3 | icmp_ln52_10_reg_1326);

assign or_ln52_16_fu_1123_p2 = (tmp_33_reg_1319 | empty_48_reg_1432);

assign or_ln52_17_fu_1132_p2 = (xor_ln52_5_fu_1127_p2 | tmp_33_reg_1319);

assign or_ln52_1_fu_913_p2 = (tmp_reg_1234 | empty_reg_1347);

assign or_ln52_2_fu_922_p2 = (xor_ln52_fu_917_p2 | tmp_reg_1234);

assign or_ln52_3_fu_513_p2 = (tmp_10_fu_506_p3 | icmp_ln52_2_reg_1258);

assign or_ln52_4_fu_955_p2 = (tmp_6_reg_1251 | empty_44_reg_1364);

assign or_ln52_5_fu_964_p2 = (xor_ln52_1_fu_959_p2 | tmp_6_reg_1251);

assign or_ln52_6_fu_600_p2 = (tmp_16_fu_593_p3 | icmp_ln52_4_reg_1275);

assign or_ln52_7_fu_997_p2 = (tmp_12_reg_1268 | empty_45_reg_1381);

assign or_ln52_8_fu_1006_p2 = (xor_ln52_2_fu_1001_p2 | tmp_12_reg_1268);

assign or_ln52_9_fu_687_p2 = (tmp_23_fu_680_p3 | icmp_ln52_6_reg_1292);

assign or_ln52_fu_426_p2 = (tmp_3_fu_419_p3 | icmp_ln52_reg_1241);

assign out_data_0_0_0_0_0_load_fu_948_p3 = ((icmp_ln51_reg_1336[0:0] == 1'b1) ? select_ln52_2_fu_941_p3 : 6'd0);

assign out_data_0_1_0_0_0_load_fu_990_p3 = ((icmp_ln51_1_reg_1353[0:0] == 1'b1) ? select_ln52_5_fu_983_p3 : 6'd0);

assign out_data_0_2_0_0_0_load_fu_1032_p3 = ((icmp_ln51_2_reg_1370[0:0] == 1'b1) ? select_ln52_8_fu_1025_p3 : 6'd0);

assign out_data_0_3_0_0_0_load_fu_1074_p3 = ((icmp_ln51_3_reg_1387[0:0] == 1'b1) ? select_ln52_11_fu_1067_p3 : 6'd0);

assign out_data_0_4_0_0_0_load_fu_1116_p3 = ((icmp_ln51_4_reg_1404[0:0] == 1'b1) ? select_ln52_14_fu_1109_p3 : 6'd0);

assign out_data_0_5_0_0_0_load_fu_1158_p3 = ((icmp_ln51_5_reg_1421[0:0] == 1'b1) ? select_ln52_17_fu_1151_p3 : 6'd0);

assign select_ln52_10_fu_1059_p3 = ((or_ln52_10_fu_1039_p2[0:0] == 1'b1) ? select_ln52_9_fu_1053_p3 : 6'd63);

assign select_ln52_11_fu_1067_p3 = ((or_ln52_11_fu_1048_p2[0:0] == 1'b1) ? select_ln52_10_fu_1059_p3 : add_ln52_3_reg_1392);

assign select_ln52_12_fu_1095_p3 = ((tmp_26_reg_1302[0:0] == 1'b1) ? 6'd0 : add_ln52_4_reg_1409);

assign select_ln52_13_fu_1101_p3 = ((or_ln52_13_fu_1081_p2[0:0] == 1'b1) ? select_ln52_12_fu_1095_p3 : 6'd63);

assign select_ln52_14_fu_1109_p3 = ((or_ln52_14_fu_1090_p2[0:0] == 1'b1) ? select_ln52_13_fu_1101_p3 : add_ln52_4_reg_1409);

assign select_ln52_15_fu_1137_p3 = ((tmp_33_reg_1319[0:0] == 1'b1) ? 6'd0 : add_ln52_5_reg_1426);

assign select_ln52_16_fu_1143_p3 = ((or_ln52_16_fu_1123_p2[0:0] == 1'b1) ? select_ln52_15_fu_1137_p3 : 6'd63);

assign select_ln52_17_fu_1151_p3 = ((or_ln52_17_fu_1132_p2[0:0] == 1'b1) ? select_ln52_16_fu_1143_p3 : add_ln52_5_reg_1426);

assign select_ln52_1_fu_933_p3 = ((or_ln52_1_fu_913_p2[0:0] == 1'b1) ? select_ln52_fu_927_p3 : 6'd63);

assign select_ln52_2_fu_941_p3 = ((or_ln52_2_fu_922_p2[0:0] == 1'b1) ? select_ln52_1_fu_933_p3 : add_ln52_reg_1341);

assign select_ln52_3_fu_969_p3 = ((tmp_6_reg_1251[0:0] == 1'b1) ? 6'd0 : add_ln52_1_reg_1358);

assign select_ln52_4_fu_975_p3 = ((or_ln52_4_fu_955_p2[0:0] == 1'b1) ? select_ln52_3_fu_969_p3 : 6'd63);

assign select_ln52_5_fu_983_p3 = ((or_ln52_5_fu_964_p2[0:0] == 1'b1) ? select_ln52_4_fu_975_p3 : add_ln52_1_reg_1358);

assign select_ln52_6_fu_1011_p3 = ((tmp_12_reg_1268[0:0] == 1'b1) ? 6'd0 : add_ln52_2_reg_1375);

assign select_ln52_7_fu_1017_p3 = ((or_ln52_7_fu_997_p2[0:0] == 1'b1) ? select_ln52_6_fu_1011_p3 : 6'd63);

assign select_ln52_8_fu_1025_p3 = ((or_ln52_8_fu_1006_p2[0:0] == 1'b1) ? select_ln52_7_fu_1017_p3 : add_ln52_2_reg_1375);

assign select_ln52_9_fu_1053_p3 = ((tmp_19_reg_1285[0:0] == 1'b1) ? 6'd0 : add_ln52_3_reg_1392);

assign select_ln52_fu_927_p3 = ((tmp_reg_1234[0:0] == 1'b1) ? 6'd0 : add_ln52_reg_1341);

assign start_out = real_start;

assign tmp_10_fu_506_p3 = layer14_out_read_reg_1176[32'd23];

assign tmp_11_fu_539_p3 = add_ln52_1_fu_528_p2[32'd5];

assign tmp_13_fu_579_p3 = layer14_out_read_reg_1176[32'd41];

assign tmp_14_fu_263_p4 = {{layer14_out_dout[40:38]}};

assign tmp_15_fu_586_p3 = layer14_out_read_reg_1176[32'd47];

assign tmp_16_fu_593_p3 = layer14_out_read_reg_1176[32'd42];

assign tmp_18_fu_626_p3 = add_ln52_2_fu_615_p2[32'd5];

assign tmp_1_fu_405_p3 = layer14_out_read_reg_1176[32'd3];

assign tmp_20_fu_666_p3 = layer14_out_read_reg_1176[32'd60];

assign tmp_21_fu_297_p4 = {{layer14_out_dout[59:57]}};

assign tmp_22_fu_673_p3 = layer14_out_read_reg_1176[32'd66];

assign tmp_23_fu_680_p3 = layer14_out_read_reg_1176[32'd61];

assign tmp_25_fu_713_p3 = add_ln52_3_fu_702_p2[32'd5];

assign tmp_27_fu_753_p3 = layer14_out_read_reg_1176[32'd79];

assign tmp_28_fu_331_p4 = {{layer14_out_dout[78:76]}};

assign tmp_29_fu_760_p3 = layer14_out_read_reg_1176[32'd85];

assign tmp_2_fu_412_p3 = layer14_out_read_reg_1176[32'd9];

assign tmp_30_fu_767_p3 = layer14_out_read_reg_1176[32'd80];

assign tmp_32_fu_800_p3 = add_ln52_4_fu_789_p2[32'd5];

assign tmp_34_fu_840_p3 = layer14_out_read_reg_1176[32'd98];

assign tmp_35_fu_365_p4 = {{layer14_out_dout[97:95]}};

assign tmp_36_fu_847_p3 = layer14_out_read_reg_1176[32'd104];

assign tmp_37_fu_854_p3 = layer14_out_read_reg_1176[32'd99];

assign tmp_39_fu_887_p3 = add_ln52_5_fu_876_p2[32'd5];

assign tmp_3_fu_419_p3 = layer14_out_read_reg_1176[32'd4];

assign tmp_4_fu_452_p3 = add_ln52_fu_441_p2[32'd5];

assign tmp_7_fu_492_p3 = layer14_out_read_reg_1176[32'd22];

assign tmp_8_fu_499_p3 = layer14_out_read_reg_1176[32'd28];

assign tmp_9_fu_229_p4 = {{layer14_out_dout[21:19]}};

assign trunc_ln1_fu_396_p4 = {{layer14_out_read_reg_1176[9:4]}};

assign trunc_ln44_fu_139_p1 = layer14_out_dout[18:0];

assign trunc_ln52_6_fu_483_p4 = {{layer14_out_read_reg_1176[28:23]}};

assign trunc_ln52_7_fu_570_p4 = {{layer14_out_read_reg_1176[47:42]}};

assign trunc_ln52_8_fu_657_p4 = {{layer14_out_read_reg_1176[66:61]}};

assign trunc_ln52_9_fu_744_p4 = {{layer14_out_read_reg_1176[85:80]}};

assign trunc_ln52_fu_201_p1 = layer14_out_dout[2:0];

assign trunc_ln52_s_fu_831_p4 = {{layer14_out_read_reg_1176[104:99]}};

assign xor_ln52_1_fu_959_p2 = (empty_44_reg_1364 ^ 1'd1);

assign xor_ln52_2_fu_1001_p2 = (empty_45_reg_1381 ^ 1'd1);

assign xor_ln52_3_fu_1043_p2 = (empty_46_reg_1398 ^ 1'd1);

assign xor_ln52_4_fu_1085_p2 = (empty_47_reg_1415 ^ 1'd1);

assign xor_ln52_5_fu_1127_p2 = (empty_48_reg_1432 ^ 1'd1);

assign xor_ln52_fu_917_p2 = (empty_reg_1347 ^ 1'd1);

assign zext_ln52_1_fu_524_p1 = and_ln52_1_fu_518_p2;

assign zext_ln52_2_fu_611_p1 = and_ln52_2_fu_605_p2;

assign zext_ln52_3_fu_698_p1 = and_ln52_3_fu_692_p2;

assign zext_ln52_4_fu_785_p1 = and_ln52_4_fu_779_p2;

assign zext_ln52_5_fu_872_p1 = and_ln52_5_fu_866_p2;

assign zext_ln52_fu_437_p1 = and_ln52_fu_431_p2;

endmodule //myproject_relu_array_ap_fixed_6u_array_ap_ufixed_6_0_4_0_0_6u_relu_config16_s
