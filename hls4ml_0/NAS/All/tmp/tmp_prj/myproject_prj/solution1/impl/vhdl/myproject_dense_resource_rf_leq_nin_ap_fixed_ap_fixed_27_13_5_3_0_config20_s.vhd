-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_27_13_5_3_0_config20_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_8_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_9_val : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (26 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (26 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (26 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (26 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (26 downto 0) );
end;


architecture behav of myproject_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_27_13_5_3_0_config20_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln46_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w20_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal w20_q0 : STD_LOGIC_VECTOR (58 downto 0);
    signal do_init_reg_187 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index3_reg_203 : STD_LOGIC_VECTOR (2 downto 0);
    signal data_0_val23_rewind_reg_218 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_val24_rewind_reg_232 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_val25_rewind_reg_246 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_val26_rewind_reg_260 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_val27_rewind_reg_274 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_5_val28_rewind_reg_288 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_6_val29_rewind_reg_302 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_7_val30_rewind_reg_316 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_8_val31_rewind_reg_330 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_9_val32_rewind_reg_344 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i22_198_reg_358 : STD_LOGIC_VECTOR (24 downto 0);
    signal conv_i_i22_3107_reg_372 : STD_LOGIC_VECTOR (24 downto 0);
    signal conv_i_i22_5116_reg_386 : STD_LOGIC_VECTOR (24 downto 0);
    signal conv_i_i22_7125_reg_400 : STD_LOGIC_VECTOR (24 downto 0);
    signal conv_i_i22_9134_reg_414 : STD_LOGIC_VECTOR (23 downto 0);
    signal w_index_fu_553_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_index_reg_1012 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln46_reg_1017 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln58_388_fu_668_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal add_ln58_390_fu_715_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln58_392_fu_762_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln58_394_fu_809_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln58_396_fu_852_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_do_init_phi_fu_191_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_w_index3_phi_fu_207_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_data_0_val23_phi_phi_fu_432_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_data_1_val24_phi_phi_fu_444_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_data_2_val25_phi_phi_fu_456_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_data_3_val26_phi_phi_fu_468_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_data_4_val27_phi_phi_fu_480_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_data_5_val28_phi_phi_fu_492_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_data_6_val29_phi_phi_fu_504_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_data_7_val30_phi_phi_fu_516_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_data_8_val31_phi_phi_fu_528_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_data_9_val32_phi_phi_fu_540_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_0_val23_phi_reg_428 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_0_val23_phi_reg_428 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_1_val24_phi_reg_440 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_1_val24_phi_reg_440 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_2_val25_phi_reg_452 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_2_val25_phi_reg_452 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_3_val26_phi_reg_464 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_3_val26_phi_reg_464 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_4_val27_phi_reg_476 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_4_val27_phi_reg_476 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_5_val28_phi_reg_488 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_5_val28_phi_reg_488 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_6_val29_phi_reg_500 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_6_val29_phi_reg_500 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_7_val30_phi_reg_512 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_7_val30_phi_reg_512 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_8_val31_phi_reg_524 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_8_val31_phi_reg_524 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_9_val32_phi_reg_536 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_9_val32_phi_reg_536 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln46_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w20_ce0_local : STD_LOGIC;
    signal a_fu_565_p11 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_fu_565_p13 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_fu_593_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal a_70_fu_605_p11 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_70_fu_605_p13 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_382_fu_633_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_388_fu_655_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln73_389_fu_643_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln73_388_fu_655_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_912_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln58_387_fu_665_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal w_383_fu_674_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_384_fu_688_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_390_fu_702_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln73_390_fu_702_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_921_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln58_389_fu_712_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal w_385_fu_721_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_386_fu_735_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_392_fu_749_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln73_392_fu_749_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_930_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln58_391_fu_759_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal w_387_fu_768_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_388_fu_782_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_394_fu_796_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln73_394_fu_796_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_939_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln58_393_fu_806_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal w_389_fu_815_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_395_fu_829_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln73_fu_597_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_fu_835_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_948_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln58_395_fu_849_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln46_fu_858_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln46_9_fu_862_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln46_10_fu_866_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln46_11_fu_870_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln46_12_fu_874_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_912_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_921_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_930_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_939_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln73_395_fu_829_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_171 : BOOLEAN;
    signal ap_condition_37 : BOOLEAN;
    signal a_fu_565_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_fu_565_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_fu_565_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_fu_565_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_fu_565_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_70_fu_605_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_70_fu_605_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_70_fu_605_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_70_fu_605_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_70_fu_605_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_sparsemux_11_3_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        def : IN STD_LOGIC_VECTOR (15 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_mul_16s_6s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_mac_muladd_16s_6s_22s_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component myproject_mac_muladd_16s_5s_22s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component myproject_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_w20_ROM_NP5jm IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;



begin
    w20_U : component myproject_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_w20_ROM_NP5jm
    generic map (
        DataWidth => 59,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w20_address0,
        ce0 => w20_ce0_local,
        q0 => w20_q0);

    sparsemux_11_3_16_1_1_U1112 : component myproject_sparsemux_11_3_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 16,
        CASE1 => "001",
        din1_WIDTH => 16,
        CASE2 => "010",
        din2_WIDTH => 16,
        CASE3 => "011",
        din3_WIDTH => 16,
        CASE4 => "100",
        din4_WIDTH => 16,
        def_WIDTH => 16,
        sel_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => ap_phi_mux_data_0_val23_phi_phi_fu_432_p4,
        din1 => ap_phi_mux_data_1_val24_phi_phi_fu_444_p4,
        din2 => ap_phi_mux_data_2_val25_phi_phi_fu_456_p4,
        din3 => ap_phi_mux_data_3_val26_phi_phi_fu_468_p4,
        din4 => ap_phi_mux_data_4_val27_phi_phi_fu_480_p4,
        def => a_fu_565_p11,
        sel => w_index3_reg_203,
        dout => a_fu_565_p13);

    sparsemux_11_3_16_1_1_U1113 : component myproject_sparsemux_11_3_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 16,
        CASE1 => "001",
        din1_WIDTH => 16,
        CASE2 => "010",
        din2_WIDTH => 16,
        CASE3 => "011",
        din3_WIDTH => 16,
        CASE4 => "100",
        din4_WIDTH => 16,
        def_WIDTH => 16,
        sel_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => ap_phi_mux_data_5_val28_phi_phi_fu_492_p4,
        din1 => ap_phi_mux_data_6_val29_phi_phi_fu_504_p4,
        din2 => ap_phi_mux_data_7_val30_phi_phi_fu_516_p4,
        din3 => ap_phi_mux_data_8_val31_phi_phi_fu_528_p4,
        din4 => ap_phi_mux_data_9_val32_phi_phi_fu_540_p4,
        def => a_70_fu_605_p11,
        sel => w_index3_reg_203,
        dout => a_70_fu_605_p13);

    mul_16s_6s_22_1_1_U1114 : component myproject_mul_16s_6s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 22)
    port map (
        din0 => mul_ln73_388_fu_655_p0,
        din1 => w_382_fu_633_p4,
        dout => mul_ln73_388_fu_655_p2);

    mul_16s_6s_22_1_1_U1115 : component myproject_mul_16s_6s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 22)
    port map (
        din0 => mul_ln73_390_fu_702_p0,
        din1 => w_384_fu_688_p4,
        dout => mul_ln73_390_fu_702_p2);

    mul_16s_6s_22_1_1_U1116 : component myproject_mul_16s_6s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 22)
    port map (
        din0 => mul_ln73_392_fu_749_p0,
        din1 => w_386_fu_735_p4,
        dout => mul_ln73_392_fu_749_p2);

    mul_16s_6s_22_1_1_U1117 : component myproject_mul_16s_6s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 22)
    port map (
        din0 => mul_ln73_394_fu_796_p0,
        din1 => w_388_fu_782_p4,
        dout => mul_ln73_394_fu_796_p2);

    mul_16s_6s_22_1_1_U1118 : component myproject_mul_16s_6s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 22)
    port map (
        din0 => mul_ln73_395_fu_829_p0,
        din1 => w_389_fu_815_p4,
        dout => mul_ln73_395_fu_829_p2);

    mac_muladd_16s_6s_22s_23_1_1_U1119 : component myproject_mac_muladd_16s_6s_22s_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        din2_WIDTH => 22,
        dout_WIDTH => 23)
    port map (
        din0 => grp_fu_912_p0,
        din1 => w_fu_593_p1,
        din2 => mul_ln73_388_fu_655_p2,
        dout => grp_fu_912_p3);

    mac_muladd_16s_6s_22s_23_1_1_U1120 : component myproject_mac_muladd_16s_6s_22s_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        din2_WIDTH => 22,
        dout_WIDTH => 23)
    port map (
        din0 => grp_fu_921_p0,
        din1 => w_383_fu_674_p4,
        din2 => mul_ln73_390_fu_702_p2,
        dout => grp_fu_921_p3);

    mac_muladd_16s_6s_22s_23_1_1_U1121 : component myproject_mac_muladd_16s_6s_22s_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        din2_WIDTH => 22,
        dout_WIDTH => 23)
    port map (
        din0 => grp_fu_930_p0,
        din1 => w_385_fu_721_p4,
        din2 => mul_ln73_392_fu_749_p2,
        dout => grp_fu_930_p3);

    mac_muladd_16s_6s_22s_23_1_1_U1122 : component myproject_mac_muladd_16s_6s_22s_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        din2_WIDTH => 22,
        dout_WIDTH => 23)
    port map (
        din0 => grp_fu_939_p0,
        din1 => w_387_fu_768_p4,
        din2 => mul_ln73_394_fu_796_p2,
        dout => grp_fu_939_p3);

    mac_muladd_16s_5s_22s_22_1_1_U1123 : component myproject_mac_muladd_16s_5s_22s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 5,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => a_70_fu_605_p13,
        din1 => tmp_fu_835_p4,
        din2 => mul_ln73_395_fu_829_p2,
        dout => grp_fu_948_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv27_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1))) then 
                    ap_return_0_preg <= sext_ln46_fu_858_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv27_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1))) then 
                    ap_return_1_preg <= sext_ln46_9_fu_862_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv27_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1))) then 
                    ap_return_2_preg <= sext_ln46_10_fu_866_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv27_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1))) then 
                    ap_return_3_preg <= sext_ln46_11_fu_870_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv27_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1))) then 
                    ap_return_4_preg <= sext_ln46_12_fu_874_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_data_0_val23_phi_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_0_val23_phi_reg_428 <= data_0_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_0_val23_phi_reg_428 <= ap_phi_reg_pp0_iter0_data_0_val23_phi_reg_428;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_1_val24_phi_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_1_val24_phi_reg_440 <= data_1_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_1_val24_phi_reg_440 <= ap_phi_reg_pp0_iter0_data_1_val24_phi_reg_440;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_2_val25_phi_reg_452_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_2_val25_phi_reg_452 <= data_2_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_2_val25_phi_reg_452 <= ap_phi_reg_pp0_iter0_data_2_val25_phi_reg_452;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_3_val26_phi_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_3_val26_phi_reg_464 <= data_3_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_3_val26_phi_reg_464 <= ap_phi_reg_pp0_iter0_data_3_val26_phi_reg_464;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_4_val27_phi_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_4_val27_phi_reg_476 <= data_4_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_4_val27_phi_reg_476 <= ap_phi_reg_pp0_iter0_data_4_val27_phi_reg_476;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_5_val28_phi_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_5_val28_phi_reg_488 <= data_5_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_5_val28_phi_reg_488 <= ap_phi_reg_pp0_iter0_data_5_val28_phi_reg_488;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_6_val29_phi_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_6_val29_phi_reg_500 <= data_6_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_6_val29_phi_reg_500 <= ap_phi_reg_pp0_iter0_data_6_val29_phi_reg_500;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_7_val30_phi_reg_512_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_7_val30_phi_reg_512 <= data_7_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_7_val30_phi_reg_512 <= ap_phi_reg_pp0_iter0_data_7_val30_phi_reg_512;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_8_val31_phi_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_8_val31_phi_reg_524 <= data_8_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_8_val31_phi_reg_524 <= ap_phi_reg_pp0_iter0_data_8_val31_phi_reg_524;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_9_val32_phi_reg_536_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_37)) then
                if ((ap_phi_mux_do_init_phi_fu_191_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_9_val32_phi_reg_536 <= data_9_val;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_9_val32_phi_reg_536 <= ap_phi_reg_pp0_iter0_data_9_val32_phi_reg_536;
                end if;
            end if; 
        end if;
    end process;

    conv_i_i22_198_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_0))) then 
                conv_i_i22_198_reg_358 <= add_ln58_388_fu_668_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                conv_i_i22_198_reg_358 <= ap_const_lv25_0;
            end if; 
        end if;
    end process;

    conv_i_i22_3107_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_0))) then 
                conv_i_i22_3107_reg_372 <= add_ln58_390_fu_715_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                conv_i_i22_3107_reg_372 <= ap_const_lv25_0;
            end if; 
        end if;
    end process;

    conv_i_i22_5116_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_0))) then 
                conv_i_i22_5116_reg_386 <= add_ln58_392_fu_762_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                conv_i_i22_5116_reg_386 <= ap_const_lv25_0;
            end if; 
        end if;
    end process;

    conv_i_i22_7125_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_0))) then 
                conv_i_i22_7125_reg_400 <= add_ln58_394_fu_809_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                conv_i_i22_7125_reg_400 <= ap_const_lv25_0;
            end if; 
        end if;
    end process;

    conv_i_i22_9134_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_0))) then 
                conv_i_i22_9134_reg_414 <= add_ln58_396_fu_852_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                conv_i_i22_9134_reg_414 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    do_init_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_0))) then 
                do_init_reg_187 <= ap_const_lv1_0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_187 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    w_index3_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_0))) then 
                w_index3_reg_203 <= w_index_reg_1012;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                w_index3_reg_203 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_0))) then
                data_0_val23_rewind_reg_218 <= ap_phi_mux_data_0_val23_phi_phi_fu_432_p4;
                data_1_val24_rewind_reg_232 <= ap_phi_mux_data_1_val24_phi_phi_fu_444_p4;
                data_2_val25_rewind_reg_246 <= ap_phi_mux_data_2_val25_phi_phi_fu_456_p4;
                data_3_val26_rewind_reg_260 <= ap_phi_mux_data_3_val26_phi_phi_fu_468_p4;
                data_4_val27_rewind_reg_274 <= ap_phi_mux_data_4_val27_phi_phi_fu_480_p4;
                data_5_val28_rewind_reg_288 <= ap_phi_mux_data_5_val28_phi_phi_fu_492_p4;
                data_6_val29_rewind_reg_302 <= ap_phi_mux_data_6_val29_phi_phi_fu_504_p4;
                data_7_val30_rewind_reg_316 <= ap_phi_mux_data_7_val30_phi_phi_fu_516_p4;
                data_8_val31_rewind_reg_330 <= ap_phi_mux_data_8_val31_phi_phi_fu_528_p4;
                data_9_val32_rewind_reg_344 <= ap_phi_mux_data_9_val32_phi_phi_fu_540_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln46_reg_1017 <= icmp_ln46_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                w_index_reg_1012 <= w_index_fu_553_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    a_70_fu_605_p11 <= "XXXXXXXXXXXXXXXX";
    a_fu_565_p11 <= "XXXXXXXXXXXXXXXX";
    add_ln58_388_fu_668_p2 <= std_logic_vector(unsigned(conv_i_i22_198_reg_358) + unsigned(sext_ln58_387_fu_665_p1));
    add_ln58_390_fu_715_p2 <= std_logic_vector(unsigned(conv_i_i22_3107_reg_372) + unsigned(sext_ln58_389_fu_712_p1));
    add_ln58_392_fu_762_p2 <= std_logic_vector(unsigned(conv_i_i22_5116_reg_386) + unsigned(sext_ln58_391_fu_759_p1));
    add_ln58_394_fu_809_p2 <= std_logic_vector(unsigned(conv_i_i22_7125_reg_400) + unsigned(sext_ln58_393_fu_806_p1));
    add_ln58_396_fu_852_p2 <= std_logic_vector(unsigned(conv_i_i22_9134_reg_414) + unsigned(sext_ln58_395_fu_849_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_171_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_171 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_37_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_37 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_1017, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_data_0_val23_phi_phi_fu_432_p4_assign_proc : process(do_init_reg_187, data_0_val23_rewind_reg_218, ap_phi_reg_pp0_iter1_data_0_val23_phi_reg_428)
    begin
        if ((do_init_reg_187 = ap_const_lv1_0)) then 
            ap_phi_mux_data_0_val23_phi_phi_fu_432_p4 <= data_0_val23_rewind_reg_218;
        else 
            ap_phi_mux_data_0_val23_phi_phi_fu_432_p4 <= ap_phi_reg_pp0_iter1_data_0_val23_phi_reg_428;
        end if; 
    end process;


    ap_phi_mux_data_1_val24_phi_phi_fu_444_p4_assign_proc : process(do_init_reg_187, data_1_val24_rewind_reg_232, ap_phi_reg_pp0_iter1_data_1_val24_phi_reg_440)
    begin
        if ((do_init_reg_187 = ap_const_lv1_0)) then 
            ap_phi_mux_data_1_val24_phi_phi_fu_444_p4 <= data_1_val24_rewind_reg_232;
        else 
            ap_phi_mux_data_1_val24_phi_phi_fu_444_p4 <= ap_phi_reg_pp0_iter1_data_1_val24_phi_reg_440;
        end if; 
    end process;


    ap_phi_mux_data_2_val25_phi_phi_fu_456_p4_assign_proc : process(do_init_reg_187, data_2_val25_rewind_reg_246, ap_phi_reg_pp0_iter1_data_2_val25_phi_reg_452)
    begin
        if ((do_init_reg_187 = ap_const_lv1_0)) then 
            ap_phi_mux_data_2_val25_phi_phi_fu_456_p4 <= data_2_val25_rewind_reg_246;
        else 
            ap_phi_mux_data_2_val25_phi_phi_fu_456_p4 <= ap_phi_reg_pp0_iter1_data_2_val25_phi_reg_452;
        end if; 
    end process;


    ap_phi_mux_data_3_val26_phi_phi_fu_468_p4_assign_proc : process(do_init_reg_187, data_3_val26_rewind_reg_260, ap_phi_reg_pp0_iter1_data_3_val26_phi_reg_464)
    begin
        if ((do_init_reg_187 = ap_const_lv1_0)) then 
            ap_phi_mux_data_3_val26_phi_phi_fu_468_p4 <= data_3_val26_rewind_reg_260;
        else 
            ap_phi_mux_data_3_val26_phi_phi_fu_468_p4 <= ap_phi_reg_pp0_iter1_data_3_val26_phi_reg_464;
        end if; 
    end process;


    ap_phi_mux_data_4_val27_phi_phi_fu_480_p4_assign_proc : process(do_init_reg_187, data_4_val27_rewind_reg_274, ap_phi_reg_pp0_iter1_data_4_val27_phi_reg_476)
    begin
        if ((do_init_reg_187 = ap_const_lv1_0)) then 
            ap_phi_mux_data_4_val27_phi_phi_fu_480_p4 <= data_4_val27_rewind_reg_274;
        else 
            ap_phi_mux_data_4_val27_phi_phi_fu_480_p4 <= ap_phi_reg_pp0_iter1_data_4_val27_phi_reg_476;
        end if; 
    end process;


    ap_phi_mux_data_5_val28_phi_phi_fu_492_p4_assign_proc : process(do_init_reg_187, data_5_val28_rewind_reg_288, ap_phi_reg_pp0_iter1_data_5_val28_phi_reg_488)
    begin
        if ((do_init_reg_187 = ap_const_lv1_0)) then 
            ap_phi_mux_data_5_val28_phi_phi_fu_492_p4 <= data_5_val28_rewind_reg_288;
        else 
            ap_phi_mux_data_5_val28_phi_phi_fu_492_p4 <= ap_phi_reg_pp0_iter1_data_5_val28_phi_reg_488;
        end if; 
    end process;


    ap_phi_mux_data_6_val29_phi_phi_fu_504_p4_assign_proc : process(do_init_reg_187, data_6_val29_rewind_reg_302, ap_phi_reg_pp0_iter1_data_6_val29_phi_reg_500)
    begin
        if ((do_init_reg_187 = ap_const_lv1_0)) then 
            ap_phi_mux_data_6_val29_phi_phi_fu_504_p4 <= data_6_val29_rewind_reg_302;
        else 
            ap_phi_mux_data_6_val29_phi_phi_fu_504_p4 <= ap_phi_reg_pp0_iter1_data_6_val29_phi_reg_500;
        end if; 
    end process;


    ap_phi_mux_data_7_val30_phi_phi_fu_516_p4_assign_proc : process(do_init_reg_187, data_7_val30_rewind_reg_316, ap_phi_reg_pp0_iter1_data_7_val30_phi_reg_512)
    begin
        if ((do_init_reg_187 = ap_const_lv1_0)) then 
            ap_phi_mux_data_7_val30_phi_phi_fu_516_p4 <= data_7_val30_rewind_reg_316;
        else 
            ap_phi_mux_data_7_val30_phi_phi_fu_516_p4 <= ap_phi_reg_pp0_iter1_data_7_val30_phi_reg_512;
        end if; 
    end process;


    ap_phi_mux_data_8_val31_phi_phi_fu_528_p4_assign_proc : process(do_init_reg_187, data_8_val31_rewind_reg_330, ap_phi_reg_pp0_iter1_data_8_val31_phi_reg_524)
    begin
        if ((do_init_reg_187 = ap_const_lv1_0)) then 
            ap_phi_mux_data_8_val31_phi_phi_fu_528_p4 <= data_8_val31_rewind_reg_330;
        else 
            ap_phi_mux_data_8_val31_phi_phi_fu_528_p4 <= ap_phi_reg_pp0_iter1_data_8_val31_phi_reg_524;
        end if; 
    end process;


    ap_phi_mux_data_9_val32_phi_phi_fu_540_p4_assign_proc : process(do_init_reg_187, data_9_val32_rewind_reg_344, ap_phi_reg_pp0_iter1_data_9_val32_phi_reg_536)
    begin
        if ((do_init_reg_187 = ap_const_lv1_0)) then 
            ap_phi_mux_data_9_val32_phi_phi_fu_540_p4 <= data_9_val32_rewind_reg_344;
        else 
            ap_phi_mux_data_9_val32_phi_phi_fu_540_p4 <= ap_phi_reg_pp0_iter1_data_9_val32_phi_reg_536;
        end if; 
    end process;


    ap_phi_mux_do_init_phi_fu_191_p6_assign_proc : process(do_init_reg_187, icmp_ln46_reg_1017, ap_condition_171)
    begin
        if ((ap_const_boolean_1 = ap_condition_171)) then
            if ((icmp_ln46_reg_1017 = ap_const_lv1_1)) then 
                ap_phi_mux_do_init_phi_fu_191_p6 <= ap_const_lv1_1;
            elsif ((icmp_ln46_reg_1017 = ap_const_lv1_0)) then 
                ap_phi_mux_do_init_phi_fu_191_p6 <= ap_const_lv1_0;
            else 
                ap_phi_mux_do_init_phi_fu_191_p6 <= do_init_reg_187;
            end if;
        else 
            ap_phi_mux_do_init_phi_fu_191_p6 <= do_init_reg_187;
        end if; 
    end process;


    ap_phi_mux_w_index3_phi_fu_207_p6_assign_proc : process(w_index3_reg_203, w_index_reg_1012, icmp_ln46_reg_1017, ap_condition_171)
    begin
        if ((ap_const_boolean_1 = ap_condition_171)) then
            if ((icmp_ln46_reg_1017 = ap_const_lv1_1)) then 
                ap_phi_mux_w_index3_phi_fu_207_p6 <= ap_const_lv3_0;
            elsif ((icmp_ln46_reg_1017 = ap_const_lv1_0)) then 
                ap_phi_mux_w_index3_phi_fu_207_p6 <= w_index_reg_1012;
            else 
                ap_phi_mux_w_index3_phi_fu_207_p6 <= w_index3_reg_203;
            end if;
        else 
            ap_phi_mux_w_index3_phi_fu_207_p6 <= w_index3_reg_203;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_data_0_val23_phi_reg_428 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_1_val24_phi_reg_440 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_2_val25_phi_reg_452 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_3_val26_phi_reg_464 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_4_val27_phi_reg_476 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_5_val28_phi_reg_488 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_6_val29_phi_reg_500 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_7_val30_phi_reg_512 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_8_val31_phi_reg_524 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_9_val32_phi_reg_536 <= "XXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(icmp_ln46_fu_559_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_fu_559_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_1017, ap_enable_reg_pp0_iter1, sext_ln46_fu_858_p1, ap_return_0_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1))) then 
            ap_return_0 <= sext_ln46_fu_858_p1;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_1017, ap_enable_reg_pp0_iter1, sext_ln46_9_fu_862_p1, ap_return_1_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1))) then 
            ap_return_1 <= sext_ln46_9_fu_862_p1;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_1017, ap_enable_reg_pp0_iter1, sext_ln46_10_fu_866_p1, ap_return_2_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1))) then 
            ap_return_2 <= sext_ln46_10_fu_866_p1;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_1017, ap_enable_reg_pp0_iter1, sext_ln46_11_fu_870_p1, ap_return_3_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1))) then 
            ap_return_3 <= sext_ln46_11_fu_870_p1;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_reg_1017, ap_enable_reg_pp0_iter1, sext_ln46_12_fu_874_p1, ap_return_4_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_1017 = ap_const_lv1_1))) then 
            ap_return_4 <= sext_ln46_12_fu_874_p1;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;

    grp_fu_912_p0 <= sext_ln73_fu_597_p1(16 - 1 downto 0);
    grp_fu_921_p0 <= sext_ln73_fu_597_p1(16 - 1 downto 0);
    grp_fu_930_p0 <= sext_ln73_fu_597_p1(16 - 1 downto 0);
    grp_fu_939_p0 <= sext_ln73_fu_597_p1(16 - 1 downto 0);
    icmp_ln46_fu_559_p2 <= "1" when (ap_phi_mux_w_index3_phi_fu_207_p6 = ap_const_lv3_4) else "0";
    mul_ln73_388_fu_655_p0 <= sext_ln73_389_fu_643_p1(16 - 1 downto 0);
    mul_ln73_390_fu_702_p0 <= sext_ln73_389_fu_643_p1(16 - 1 downto 0);
    mul_ln73_392_fu_749_p0 <= sext_ln73_389_fu_643_p1(16 - 1 downto 0);
    mul_ln73_394_fu_796_p0 <= sext_ln73_389_fu_643_p1(16 - 1 downto 0);
    mul_ln73_395_fu_829_p0 <= sext_ln73_fu_597_p1(16 - 1 downto 0);
        sext_ln46_10_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_392_fu_762_p2),27));

        sext_ln46_11_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_394_fu_809_p2),27));

        sext_ln46_12_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_396_fu_852_p2),27));

        sext_ln46_9_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_390_fu_715_p2),27));

        sext_ln46_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_388_fu_668_p2),27));

        sext_ln58_387_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_912_p3),25));

        sext_ln58_389_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_921_p3),25));

        sext_ln58_391_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_930_p3),25));

        sext_ln58_393_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_939_p3),25));

        sext_ln58_395_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_948_p3),24));

        sext_ln73_389_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_70_fu_605_p13),22));

        sext_ln73_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_fu_565_p13),22));

    tmp_fu_835_p4 <= w20_q0(58 downto 54);
    w20_address0 <= zext_ln46_fu_548_p1(3 - 1 downto 0);

    w20_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w20_ce0_local <= ap_const_logic_1;
        else 
            w20_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_382_fu_633_p4 <= w20_q0(11 downto 6);
    w_383_fu_674_p4 <= w20_q0(17 downto 12);
    w_384_fu_688_p4 <= w20_q0(23 downto 18);
    w_385_fu_721_p4 <= w20_q0(29 downto 24);
    w_386_fu_735_p4 <= w20_q0(35 downto 30);
    w_387_fu_768_p4 <= w20_q0(41 downto 36);
    w_388_fu_782_p4 <= w20_q0(47 downto 42);
    w_389_fu_815_p4 <= w20_q0(53 downto 48);
    w_fu_593_p1 <= w20_q0(6 - 1 downto 0);
    w_index_fu_553_p2 <= std_logic_vector(unsigned(ap_phi_mux_w_index3_phi_fu_207_p6) + unsigned(ap_const_lv3_1));
    zext_ln46_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_w_index3_phi_fu_207_p6),64));
end behav;
