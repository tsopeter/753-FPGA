-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_6u_array_ap_ufixed_6_0_4_0_0_6u_relu_config13_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer11_out_dout : IN STD_LOGIC_VECTOR (113 downto 0);
    layer11_out_empty_n : IN STD_LOGIC;
    layer11_out_read : OUT STD_LOGIC;
    layer11_out_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    layer11_out_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    layer13_out_din : OUT STD_LOGIC_VECTOR (35 downto 0);
    layer13_out_full_n : IN STD_LOGIC;
    layer13_out_write : OUT STD_LOGIC;
    layer13_out_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
    layer13_out_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0);
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_6u_array_ap_ufixed_6_0_4_0_0_6u_relu_config13_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln41_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer11_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal layer13_out_blk_n : STD_LOGIC;
    signal layer11_out_read_reg_1230 : STD_LOGIC_VECTOR (113 downto 0);
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal trunc_ln44_fu_169_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln44_reg_1258 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln44_s_reg_1263 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln44_1_reg_1268 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln44_2_reg_1273 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln44_3_reg_1278 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln44_4_reg_1283 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_reg_1288 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1288_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1295 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1300 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_44_reg_1305 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_reg_1305_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_13_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_13_reg_1312 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_reg_1317 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_50_reg_1322 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_reg_1322_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_15_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_15_reg_1329 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_reg_1334 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_57_reg_1339 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_reg_1339_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_17_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_17_reg_1346 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_reg_1351 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_64_reg_1356 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_reg_1356_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_19_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_19_reg_1363 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_reg_1368 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_71_reg_1373 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_reg_1373_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_21_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_21_reg_1380 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_reg_1385 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln51_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_1394 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_fu_488_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_reg_1399 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_1405 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_6_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_6_reg_1411 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_6_fu_575_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_6_reg_1416 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_49_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_49_reg_1422 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_7_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_7_reg_1428 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_7_fu_662_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_7_reg_1433 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_50_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_50_reg_1439 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_8_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_8_reg_1445 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_8_fu_749_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_8_reg_1450 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_51_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_51_reg_1456 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_9_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_9_reg_1462 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_9_fu_836_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_9_reg_1467 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_52_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_52_reg_1473 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_10_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_10_reg_1479 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_10_fu_923_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_10_reg_1484 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_53_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_53_reg_1490 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_fu_995_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_reg_1496 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_1_fu_1037_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_1_reg_1501 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_2_fu_1079_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_2_reg_1506 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_3_fu_1121_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_3_reg_1511 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_4_fu_1163_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_4_reg_1516 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_5_fu_1205_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_5_reg_1521 : STD_LOGIC_VECTOR (5 downto 0);
    signal i1_fu_144 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_fu_421_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal trunc_ln52_fu_231_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_39_fu_259_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_52_fu_293_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_59_fu_327_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_66_fu_361_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_73_fu_395_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_42_fu_466_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_452_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln2_fu_443_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_fu_484_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_41_fu_459_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_499_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_78_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_12_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_25_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_553_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_20_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_539_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_6_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_s_fu_530_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_6_fu_571_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_46_fu_546_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_586_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_85_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_14_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_27_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_640_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_23_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_626_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_7_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_1_fu_617_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_7_fu_658_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_53_fu_633_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_673_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_92_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_16_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_29_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_727_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_26_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_713_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_8_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_2_fu_704_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_8_fu_745_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_60_fu_720_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_760_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_99_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_18_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_31_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_fu_814_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_29_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_800_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_9_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_3_fu_791_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_9_fu_832_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_67_fu_807_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_847_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_106_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_20_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_33_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_fu_901_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_32_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_fu_887_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_10_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_4_fu_878_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_10_fu_919_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_74_fu_894_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_934_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_113_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_22_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_34_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_18_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_974_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_19_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_18_fu_980_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_19_fu_988_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln52_6_fu_1006_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_21_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_20_fu_1016_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_22_fu_1011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_21_fu_1022_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_22_fu_1030_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln52_7_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_24_fu_1044_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_23_fu_1058_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_25_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_24_fu_1064_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_25_fu_1072_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln52_8_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_27_fu_1086_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_26_fu_1100_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_28_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_27_fu_1106_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_28_fu_1114_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln52_9_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_30_fu_1128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_29_fu_1142_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_31_fu_1137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_30_fu_1148_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_31_fu_1156_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln52_10_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_33_fu_1170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_32_fu_1184_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_34_fu_1179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_33_fu_1190_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_34_fu_1198_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component myproject_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    i1_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    i1_fu_144 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i1_fu_144 <= i_fu_421_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                add_ln52_10_reg_1484 <= add_ln52_10_fu_923_p2;
                add_ln52_6_reg_1416 <= add_ln52_6_fu_575_p2;
                add_ln52_7_reg_1433 <= add_ln52_7_fu_662_p2;
                add_ln52_8_reg_1450 <= add_ln52_8_fu_749_p2;
                add_ln52_9_reg_1467 <= add_ln52_9_fu_836_p2;
                add_ln52_reg_1399 <= add_ln52_fu_488_p2;
                empty_49_reg_1422 <= empty_49_fu_606_p2;
                empty_50_reg_1439 <= empty_50_fu_693_p2;
                empty_51_reg_1456 <= empty_51_fu_780_p2;
                empty_52_reg_1473 <= empty_52_fu_867_p2;
                empty_53_reg_1490 <= empty_53_fu_954_p2;
                empty_reg_1405 <= empty_fu_519_p2;
                icmp_ln51_10_reg_1479 <= icmp_ln51_10_fu_873_p2;
                icmp_ln51_6_reg_1411 <= icmp_ln51_6_fu_525_p2;
                icmp_ln51_7_reg_1428 <= icmp_ln51_7_fu_612_p2;
                icmp_ln51_8_reg_1445 <= icmp_ln51_8_fu_699_p2;
                icmp_ln51_9_reg_1462 <= icmp_ln51_9_fu_786_p2;
                icmp_ln51_reg_1394 <= icmp_ln51_fu_438_p2;
                out_data_1_reg_1501 <= out_data_1_fu_1037_p3;
                out_data_2_reg_1506 <= out_data_2_fu_1079_p3;
                out_data_3_reg_1511 <= out_data_3_fu_1121_p3;
                out_data_4_reg_1516 <= out_data_4_fu_1163_p3;
                out_data_5_reg_1521 <= out_data_5_fu_1205_p3;
                out_data_reg_1496 <= out_data_fu_995_p3;
                tmp_44_reg_1305_pp0_iter2_reg <= tmp_44_reg_1305;
                tmp_50_reg_1322_pp0_iter2_reg <= tmp_50_reg_1322;
                tmp_57_reg_1339_pp0_iter2_reg <= tmp_57_reg_1339;
                tmp_64_reg_1356_pp0_iter2_reg <= tmp_64_reg_1356;
                tmp_71_reg_1373_pp0_iter2_reg <= tmp_71_reg_1373;
                tmp_reg_1288_pp0_iter2_reg <= tmp_reg_1288;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln52_13_reg_1312 <= icmp_ln52_13_fu_269_p2;
                icmp_ln52_15_reg_1329 <= icmp_ln52_15_fu_303_p2;
                icmp_ln52_17_reg_1346 <= icmp_ln52_17_fu_337_p2;
                icmp_ln52_19_reg_1363 <= icmp_ln52_19_fu_371_p2;
                icmp_ln52_21_reg_1380 <= icmp_ln52_21_fu_405_p2;
                icmp_ln52_reg_1295 <= icmp_ln52_fu_235_p2;
                layer11_out_read_reg_1230 <= layer11_out_dout;
                tmp_44_reg_1305 <= layer11_out_dout(37 downto 37);
                tmp_48_reg_1317 <= layer11_out_dout(37 downto 29);
                tmp_50_reg_1322 <= layer11_out_dout(56 downto 56);
                tmp_55_reg_1334 <= layer11_out_dout(56 downto 48);
                tmp_57_reg_1339 <= layer11_out_dout(75 downto 75);
                tmp_62_reg_1351 <= layer11_out_dout(75 downto 67);
                tmp_64_reg_1356 <= layer11_out_dout(94 downto 94);
                tmp_69_reg_1368 <= layer11_out_dout(94 downto 86);
                tmp_71_reg_1373 <= layer11_out_dout(113 downto 113);
                tmp_76_reg_1385 <= layer11_out_dout(113 downto 105);
                tmp_reg_1288 <= layer11_out_dout(18 downto 18);
                tmp_s_reg_1300 <= layer11_out_dout(18 downto 10);
                trunc_ln44_1_reg_1268 <= layer11_out_dout(56 downto 38);
                trunc_ln44_2_reg_1273 <= layer11_out_dout(75 downto 57);
                trunc_ln44_3_reg_1278 <= layer11_out_dout(94 downto 76);
                trunc_ln44_4_reg_1283 <= layer11_out_dout(113 downto 95);
                trunc_ln44_reg_1258 <= trunc_ln44_fu_169_p1;
                trunc_ln44_s_reg_1263 <= layer11_out_dout(37 downto 19);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln52_10_fu_923_p2 <= std_logic_vector(unsigned(trunc_ln52_4_fu_878_p4) + unsigned(zext_ln52_10_fu_919_p1));
    add_ln52_6_fu_575_p2 <= std_logic_vector(unsigned(trunc_ln52_s_fu_530_p4) + unsigned(zext_ln52_6_fu_571_p1));
    add_ln52_7_fu_662_p2 <= std_logic_vector(unsigned(trunc_ln52_1_fu_617_p4) + unsigned(zext_ln52_7_fu_658_p1));
    add_ln52_8_fu_749_p2 <= std_logic_vector(unsigned(trunc_ln52_2_fu_704_p4) + unsigned(zext_ln52_8_fu_745_p1));
    add_ln52_9_fu_836_p2 <= std_logic_vector(unsigned(trunc_ln52_3_fu_791_p4) + unsigned(zext_ln52_9_fu_832_p1));
    add_ln52_fu_488_p2 <= std_logic_vector(unsigned(trunc_ln2_fu_443_p4) + unsigned(zext_ln52_fu_484_p1));
    and_ln52_10_fu_913_p2 <= (tmp_72_fu_887_p3 and or_ln52_32_fu_908_p2);
    and_ln52_25_fu_513_p2 <= (tmp_43_fu_499_p3 or not_tmp_78_fu_507_p2);
    and_ln52_27_fu_600_p2 <= (tmp_49_fu_586_p3 or not_tmp_85_fu_594_p2);
    and_ln52_29_fu_687_p2 <= (tmp_56_fu_673_p3 or not_tmp_92_fu_681_p2);
    and_ln52_31_fu_774_p2 <= (tmp_63_fu_760_p3 or not_tmp_99_fu_768_p2);
    and_ln52_33_fu_861_p2 <= (tmp_70_fu_847_p3 or not_tmp_106_fu_855_p2);
    and_ln52_34_fu_948_p2 <= (tmp_77_fu_934_p3 or not_tmp_113_fu_942_p2);
    and_ln52_6_fu_565_p2 <= (tmp_45_fu_539_p3 and or_ln52_20_fu_560_p2);
    and_ln52_7_fu_652_p2 <= (tmp_51_fu_626_p3 and or_ln52_23_fu_647_p2);
    and_ln52_8_fu_739_p2 <= (tmp_58_fu_713_p3 and or_ln52_26_fu_734_p2);
    and_ln52_9_fu_826_p2 <= (tmp_65_fu_800_p3 and or_ln52_29_fu_821_p2);
    and_ln52_fu_478_p2 <= (tmp_40_fu_452_p3 and or_ln52_fu_473_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, layer11_out_empty_n, layer13_out_full_n, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_01001_grp1 <= ((ap_done_reg = ap_const_logic_1) or ((layer13_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((layer11_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, layer11_out_empty_n, layer13_out_full_n, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((layer13_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((layer11_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, layer11_out_empty_n, layer13_out_full_n, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((ap_done_reg = ap_const_logic_1) or ((layer13_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((layer11_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, layer11_out_empty_n, layer13_out_full_n, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((layer13_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((layer11_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln41_fu_427_p2)
    begin
        if (((icmp_ln41_fu_427_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_49_fu_606_p2 <= (icmp_ln52_14_fu_581_p2 and and_ln52_27_fu_600_p2);
    empty_50_fu_693_p2 <= (icmp_ln52_16_fu_668_p2 and and_ln52_29_fu_687_p2);
    empty_51_fu_780_p2 <= (icmp_ln52_18_fu_755_p2 and and_ln52_31_fu_774_p2);
    empty_52_fu_867_p2 <= (icmp_ln52_20_fu_842_p2 and and_ln52_33_fu_861_p2);
    empty_53_fu_954_p2 <= (icmp_ln52_22_fu_929_p2 and and_ln52_34_fu_948_p2);
    empty_fu_519_p2 <= (icmp_ln52_12_fu_494_p2 and and_ln52_25_fu_513_p2);
    i_fu_421_p2 <= std_logic_vector(unsigned(i1_fu_144) + unsigned(ap_const_lv4_1));
    icmp_ln41_fu_427_p2 <= "1" when (i1_fu_144 = ap_const_lv4_8) else "0";
    icmp_ln51_10_fu_873_p2 <= "1" when (signed(trunc_ln44_4_reg_1283) > signed(ap_const_lv19_0)) else "0";
    icmp_ln51_6_fu_525_p2 <= "1" when (signed(trunc_ln44_s_reg_1263) > signed(ap_const_lv19_0)) else "0";
    icmp_ln51_7_fu_612_p2 <= "1" when (signed(trunc_ln44_1_reg_1268) > signed(ap_const_lv19_0)) else "0";
    icmp_ln51_8_fu_699_p2 <= "1" when (signed(trunc_ln44_2_reg_1273) > signed(ap_const_lv19_0)) else "0";
    icmp_ln51_9_fu_786_p2 <= "1" when (signed(trunc_ln44_3_reg_1278) > signed(ap_const_lv19_0)) else "0";
    icmp_ln51_fu_438_p2 <= "1" when (signed(trunc_ln44_reg_1258) > signed(ap_const_lv19_0)) else "0";
    icmp_ln52_12_fu_494_p2 <= "1" when (tmp_s_reg_1300 = ap_const_lv9_0) else "0";
    icmp_ln52_13_fu_269_p2 <= "0" when (tmp_39_fu_259_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_14_fu_581_p2 <= "1" when (tmp_48_reg_1317 = ap_const_lv9_0) else "0";
    icmp_ln52_15_fu_303_p2 <= "0" when (tmp_52_fu_293_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_16_fu_668_p2 <= "1" when (tmp_55_reg_1334 = ap_const_lv9_0) else "0";
    icmp_ln52_17_fu_337_p2 <= "0" when (tmp_59_fu_327_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_18_fu_755_p2 <= "1" when (tmp_62_reg_1351 = ap_const_lv9_0) else "0";
    icmp_ln52_19_fu_371_p2 <= "0" when (tmp_66_fu_361_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_20_fu_842_p2 <= "1" when (tmp_69_reg_1368 = ap_const_lv9_0) else "0";
    icmp_ln52_21_fu_405_p2 <= "0" when (tmp_73_fu_395_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_22_fu_929_p2 <= "1" when (tmp_76_reg_1385 = ap_const_lv9_0) else "0";
    icmp_ln52_fu_235_p2 <= "0" when (trunc_ln52_fu_231_p1 = ap_const_lv3_0) else "1";

    layer11_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer11_out_empty_n, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer11_out_blk_n <= layer11_out_empty_n;
        else 
            layer11_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer11_out_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer11_out_read <= ap_const_logic_1;
        else 
            layer11_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer13_out_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, layer13_out_full_n, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer13_out_blk_n <= layer13_out_full_n;
        else 
            layer13_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer13_out_din <= (((((out_data_5_reg_1521 & out_data_4_reg_1516) & out_data_3_reg_1511) & out_data_2_reg_1506) & out_data_1_reg_1501) & out_data_reg_1496);

    layer13_out_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer13_out_write <= ap_const_logic_1;
        else 
            layer13_out_write <= ap_const_logic_0;
        end if; 
    end process;

    not_tmp_106_fu_855_p2 <= (tmp_67_fu_807_p3 xor ap_const_lv1_1);
    not_tmp_113_fu_942_p2 <= (tmp_74_fu_894_p3 xor ap_const_lv1_1);
    not_tmp_78_fu_507_p2 <= (tmp_41_fu_459_p3 xor ap_const_lv1_1);
    not_tmp_85_fu_594_p2 <= (tmp_46_fu_546_p3 xor ap_const_lv1_1);
    not_tmp_92_fu_681_p2 <= (tmp_53_fu_633_p3 xor ap_const_lv1_1);
    not_tmp_99_fu_768_p2 <= (tmp_60_fu_720_p3 xor ap_const_lv1_1);
    or_ln52_18_fu_960_p2 <= (tmp_reg_1288_pp0_iter2_reg or empty_reg_1405);
    or_ln52_19_fu_969_p2 <= (xor_ln52_fu_964_p2 or tmp_reg_1288_pp0_iter2_reg);
    or_ln52_20_fu_560_p2 <= (tmp_47_fu_553_p3 or icmp_ln52_13_reg_1312);
    or_ln52_21_fu_1002_p2 <= (tmp_44_reg_1305_pp0_iter2_reg or empty_49_reg_1422);
    or_ln52_22_fu_1011_p2 <= (xor_ln52_6_fu_1006_p2 or tmp_44_reg_1305_pp0_iter2_reg);
    or_ln52_23_fu_647_p2 <= (tmp_54_fu_640_p3 or icmp_ln52_15_reg_1329);
    or_ln52_24_fu_1044_p2 <= (tmp_50_reg_1322_pp0_iter2_reg or empty_50_reg_1439);
    or_ln52_25_fu_1053_p2 <= (xor_ln52_7_fu_1048_p2 or tmp_50_reg_1322_pp0_iter2_reg);
    or_ln52_26_fu_734_p2 <= (tmp_61_fu_727_p3 or icmp_ln52_17_reg_1346);
    or_ln52_27_fu_1086_p2 <= (tmp_57_reg_1339_pp0_iter2_reg or empty_51_reg_1456);
    or_ln52_28_fu_1095_p2 <= (xor_ln52_8_fu_1090_p2 or tmp_57_reg_1339_pp0_iter2_reg);
    or_ln52_29_fu_821_p2 <= (tmp_68_fu_814_p3 or icmp_ln52_19_reg_1363);
    or_ln52_30_fu_1128_p2 <= (tmp_64_reg_1356_pp0_iter2_reg or empty_52_reg_1473);
    or_ln52_31_fu_1137_p2 <= (xor_ln52_9_fu_1132_p2 or tmp_64_reg_1356_pp0_iter2_reg);
    or_ln52_32_fu_908_p2 <= (tmp_75_fu_901_p3 or icmp_ln52_21_reg_1380);
    or_ln52_33_fu_1170_p2 <= (tmp_71_reg_1373_pp0_iter2_reg or empty_53_reg_1490);
    or_ln52_34_fu_1179_p2 <= (xor_ln52_10_fu_1174_p2 or tmp_71_reg_1373_pp0_iter2_reg);
    or_ln52_fu_473_p2 <= (tmp_42_fu_466_p3 or icmp_ln52_reg_1295);
    out_data_1_fu_1037_p3 <= 
        select_ln52_22_fu_1030_p3 when (icmp_ln51_6_reg_1411(0) = '1') else 
        ap_const_lv6_0;
    out_data_2_fu_1079_p3 <= 
        select_ln52_25_fu_1072_p3 when (icmp_ln51_7_reg_1428(0) = '1') else 
        ap_const_lv6_0;
    out_data_3_fu_1121_p3 <= 
        select_ln52_28_fu_1114_p3 when (icmp_ln51_8_reg_1445(0) = '1') else 
        ap_const_lv6_0;
    out_data_4_fu_1163_p3 <= 
        select_ln52_31_fu_1156_p3 when (icmp_ln51_9_reg_1462(0) = '1') else 
        ap_const_lv6_0;
    out_data_5_fu_1205_p3 <= 
        select_ln52_34_fu_1198_p3 when (icmp_ln51_10_reg_1479(0) = '1') else 
        ap_const_lv6_0;
    out_data_fu_995_p3 <= 
        select_ln52_19_fu_988_p3 when (icmp_ln51_reg_1394(0) = '1') else 
        ap_const_lv6_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln52_18_fu_980_p3 <= 
        select_ln52_fu_974_p3 when (or_ln52_18_fu_960_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_19_fu_988_p3 <= 
        select_ln52_18_fu_980_p3 when (or_ln52_19_fu_969_p2(0) = '1') else 
        add_ln52_reg_1399;
    select_ln52_20_fu_1016_p3 <= 
        ap_const_lv6_0 when (tmp_44_reg_1305_pp0_iter2_reg(0) = '1') else 
        add_ln52_6_reg_1416;
    select_ln52_21_fu_1022_p3 <= 
        select_ln52_20_fu_1016_p3 when (or_ln52_21_fu_1002_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_22_fu_1030_p3 <= 
        select_ln52_21_fu_1022_p3 when (or_ln52_22_fu_1011_p2(0) = '1') else 
        add_ln52_6_reg_1416;
    select_ln52_23_fu_1058_p3 <= 
        ap_const_lv6_0 when (tmp_50_reg_1322_pp0_iter2_reg(0) = '1') else 
        add_ln52_7_reg_1433;
    select_ln52_24_fu_1064_p3 <= 
        select_ln52_23_fu_1058_p3 when (or_ln52_24_fu_1044_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_25_fu_1072_p3 <= 
        select_ln52_24_fu_1064_p3 when (or_ln52_25_fu_1053_p2(0) = '1') else 
        add_ln52_7_reg_1433;
    select_ln52_26_fu_1100_p3 <= 
        ap_const_lv6_0 when (tmp_57_reg_1339_pp0_iter2_reg(0) = '1') else 
        add_ln52_8_reg_1450;
    select_ln52_27_fu_1106_p3 <= 
        select_ln52_26_fu_1100_p3 when (or_ln52_27_fu_1086_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_28_fu_1114_p3 <= 
        select_ln52_27_fu_1106_p3 when (or_ln52_28_fu_1095_p2(0) = '1') else 
        add_ln52_8_reg_1450;
    select_ln52_29_fu_1142_p3 <= 
        ap_const_lv6_0 when (tmp_64_reg_1356_pp0_iter2_reg(0) = '1') else 
        add_ln52_9_reg_1467;
    select_ln52_30_fu_1148_p3 <= 
        select_ln52_29_fu_1142_p3 when (or_ln52_30_fu_1128_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_31_fu_1156_p3 <= 
        select_ln52_30_fu_1148_p3 when (or_ln52_31_fu_1137_p2(0) = '1') else 
        add_ln52_9_reg_1467;
    select_ln52_32_fu_1184_p3 <= 
        ap_const_lv6_0 when (tmp_71_reg_1373_pp0_iter2_reg(0) = '1') else 
        add_ln52_10_reg_1484;
    select_ln52_33_fu_1190_p3 <= 
        select_ln52_32_fu_1184_p3 when (or_ln52_33_fu_1170_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_34_fu_1198_p3 <= 
        select_ln52_33_fu_1190_p3 when (or_ln52_34_fu_1179_p2(0) = '1') else 
        add_ln52_10_reg_1484;
    select_ln52_fu_974_p3 <= 
        ap_const_lv6_0 when (tmp_reg_1288_pp0_iter2_reg(0) = '1') else 
        add_ln52_reg_1399;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_39_fu_259_p4 <= layer11_out_dout(21 downto 19);
    tmp_40_fu_452_p3 <= layer11_out_read_reg_1230(3 downto 3);
    tmp_41_fu_459_p3 <= layer11_out_read_reg_1230(9 downto 9);
    tmp_42_fu_466_p3 <= layer11_out_read_reg_1230(4 downto 4);
    tmp_43_fu_499_p3 <= add_ln52_fu_488_p2(5 downto 5);
    tmp_45_fu_539_p3 <= layer11_out_read_reg_1230(22 downto 22);
    tmp_46_fu_546_p3 <= layer11_out_read_reg_1230(28 downto 28);
    tmp_47_fu_553_p3 <= layer11_out_read_reg_1230(23 downto 23);
    tmp_49_fu_586_p3 <= add_ln52_6_fu_575_p2(5 downto 5);
    tmp_51_fu_626_p3 <= layer11_out_read_reg_1230(41 downto 41);
    tmp_52_fu_293_p4 <= layer11_out_dout(40 downto 38);
    tmp_53_fu_633_p3 <= layer11_out_read_reg_1230(47 downto 47);
    tmp_54_fu_640_p3 <= layer11_out_read_reg_1230(42 downto 42);
    tmp_56_fu_673_p3 <= add_ln52_7_fu_662_p2(5 downto 5);
    tmp_58_fu_713_p3 <= layer11_out_read_reg_1230(60 downto 60);
    tmp_59_fu_327_p4 <= layer11_out_dout(59 downto 57);
    tmp_60_fu_720_p3 <= layer11_out_read_reg_1230(66 downto 66);
    tmp_61_fu_727_p3 <= layer11_out_read_reg_1230(61 downto 61);
    tmp_63_fu_760_p3 <= add_ln52_8_fu_749_p2(5 downto 5);
    tmp_65_fu_800_p3 <= layer11_out_read_reg_1230(79 downto 79);
    tmp_66_fu_361_p4 <= layer11_out_dout(78 downto 76);
    tmp_67_fu_807_p3 <= layer11_out_read_reg_1230(85 downto 85);
    tmp_68_fu_814_p3 <= layer11_out_read_reg_1230(80 downto 80);
    tmp_70_fu_847_p3 <= add_ln52_9_fu_836_p2(5 downto 5);
    tmp_72_fu_887_p3 <= layer11_out_read_reg_1230(98 downto 98);
    tmp_73_fu_395_p4 <= layer11_out_dout(97 downto 95);
    tmp_74_fu_894_p3 <= layer11_out_read_reg_1230(104 downto 104);
    tmp_75_fu_901_p3 <= layer11_out_read_reg_1230(99 downto 99);
    tmp_77_fu_934_p3 <= add_ln52_10_fu_923_p2(5 downto 5);
    trunc_ln2_fu_443_p4 <= layer11_out_read_reg_1230(9 downto 4);
    trunc_ln44_fu_169_p1 <= layer11_out_dout(19 - 1 downto 0);
    trunc_ln52_1_fu_617_p4 <= layer11_out_read_reg_1230(47 downto 42);
    trunc_ln52_2_fu_704_p4 <= layer11_out_read_reg_1230(66 downto 61);
    trunc_ln52_3_fu_791_p4 <= layer11_out_read_reg_1230(85 downto 80);
    trunc_ln52_4_fu_878_p4 <= layer11_out_read_reg_1230(104 downto 99);
    trunc_ln52_fu_231_p1 <= layer11_out_dout(3 - 1 downto 0);
    trunc_ln52_s_fu_530_p4 <= layer11_out_read_reg_1230(28 downto 23);
    xor_ln52_10_fu_1174_p2 <= (empty_53_reg_1490 xor ap_const_lv1_1);
    xor_ln52_6_fu_1006_p2 <= (empty_49_reg_1422 xor ap_const_lv1_1);
    xor_ln52_7_fu_1048_p2 <= (empty_50_reg_1439 xor ap_const_lv1_1);
    xor_ln52_8_fu_1090_p2 <= (empty_51_reg_1456 xor ap_const_lv1_1);
    xor_ln52_9_fu_1132_p2 <= (empty_52_reg_1473 xor ap_const_lv1_1);
    xor_ln52_fu_964_p2 <= (empty_reg_1405 xor ap_const_lv1_1);
    zext_ln52_10_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_10_fu_913_p2),6));
    zext_ln52_6_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_6_fu_565_p2),6));
    zext_ln52_7_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_7_fu_652_p2),6));
    zext_ln52_8_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_8_fu_739_p2),6));
    zext_ln52_9_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_9_fu_826_p2),6));
    zext_ln52_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_fu_478_p2),6));
end behav;
