// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_1u_array_ap_ufixed_6_0_4_0_0_1u_relu_config19_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer18_out_dout,
        layer18_out_empty_n,
        layer18_out_read,
        layer18_out_num_data_valid,
        layer18_out_fifo_cap,
        layer19_out_din,
        layer19_out_full_n,
        layer19_out_write,
        layer19_out_num_data_valid,
        layer19_out_fifo_cap
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] layer18_out_dout;
input   layer18_out_empty_n;
output   layer18_out_read;
input  [1:0] layer18_out_num_data_valid;
input  [1:0] layer18_out_fifo_cap;
output  [5:0] layer19_out_din;
input   layer19_out_full_n;
output   layer19_out_write;
input  [1:0] layer19_out_num_data_valid;
input  [1:0] layer19_out_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer18_out_read;
reg layer19_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer18_out_blk_n;
reg    layer19_out_blk_n;
reg    ap_block_state1;
wire   [2:0] trunc_ln52_fu_93_p1;
wire   [0:0] tmp_126_fu_111_p3;
wire   [0:0] icmp_ln52_fu_97_p2;
wire   [0:0] or_ln52_fu_119_p2;
wire   [0:0] tmp_124_fu_85_p3;
wire   [0:0] and_ln52_fu_125_p2;
wire   [5:0] trunc_ln_fu_75_p4;
wire   [5:0] zext_ln52_fu_131_p1;
wire   [5:0] tmp_s_fu_141_p3;
wire   [5:0] add_ln52_fu_135_p2;
wire   [0:0] tmp_125_fu_103_p3;
wire   [0:0] tmp_127_fu_155_p3;
wire   [0:0] not_tmp_145_fu_163_p2;
wire   [0:0] icmp_ln52_30_fu_149_p2;
wire   [0:0] and_ln52_41_fu_169_p2;
wire   [0:0] empty_fu_175_p2;
wire   [0:0] tmp_fu_67_p3;
wire   [0:0] xor_ln52_fu_187_p2;
wire   [0:0] or_ln52_46_fu_181_p2;
wire   [5:0] select_ln52_fu_199_p3;
wire   [0:0] or_ln52_47_fu_193_p2;
wire   [5:0] select_ln52_46_fu_207_p3;
wire   [0:0] icmp_ln51_fu_61_p2;
wire   [5:0] select_ln52_47_fu_215_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer18_out_blk_n = layer18_out_empty_n;
    end else begin
        layer18_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer18_out_read = 1'b1;
    end else begin
        layer18_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer19_out_blk_n = layer19_out_full_n;
    end else begin
        layer19_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer19_out_write = 1'b1;
    end else begin
        layer19_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_fu_135_p2 = (trunc_ln_fu_75_p4 + zext_ln52_fu_131_p1);

assign and_ln52_41_fu_169_p2 = (tmp_127_fu_155_p3 | not_tmp_145_fu_163_p2);

assign and_ln52_fu_125_p2 = (tmp_124_fu_85_p3 & or_ln52_fu_119_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (layer19_out_full_n == 1'b0) | (layer18_out_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign empty_fu_175_p2 = (icmp_ln52_30_fu_149_p2 & and_ln52_41_fu_169_p2);

assign icmp_ln51_fu_61_p2 = (($signed(layer18_out_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln52_30_fu_149_p2 = ((tmp_s_fu_141_p3 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_97_p2 = ((trunc_ln52_fu_93_p1 != 3'd0) ? 1'b1 : 1'b0);

assign layer19_out_din = ((icmp_ln51_fu_61_p2[0:0] == 1'b1) ? select_ln52_47_fu_215_p3 : 6'd0);

assign not_tmp_145_fu_163_p2 = (tmp_125_fu_103_p3 ^ 1'd1);

assign or_ln52_46_fu_181_p2 = (tmp_fu_67_p3 | empty_fu_175_p2);

assign or_ln52_47_fu_193_p2 = (xor_ln52_fu_187_p2 | tmp_fu_67_p3);

assign or_ln52_fu_119_p2 = (tmp_126_fu_111_p3 | icmp_ln52_fu_97_p2);

assign select_ln52_46_fu_207_p3 = ((or_ln52_46_fu_181_p2[0:0] == 1'b1) ? select_ln52_fu_199_p3 : 6'd63);

assign select_ln52_47_fu_215_p3 = ((or_ln52_47_fu_193_p2[0:0] == 1'b1) ? select_ln52_46_fu_207_p3 : add_ln52_fu_135_p2);

assign select_ln52_fu_199_p3 = ((tmp_fu_67_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_fu_135_p2);

assign start_out = real_start;

assign tmp_124_fu_85_p3 = layer18_out_dout[32'd3];

assign tmp_125_fu_103_p3 = layer18_out_dout[32'd9];

assign tmp_126_fu_111_p3 = layer18_out_dout[32'd4];

assign tmp_127_fu_155_p3 = add_ln52_fu_135_p2[32'd5];

assign tmp_fu_67_p3 = layer18_out_dout[32'd15];

assign tmp_s_fu_141_p3 = {{layer18_out_dout[15:10]}};

assign trunc_ln52_fu_93_p1 = layer18_out_dout[2:0];

assign trunc_ln_fu_75_p4 = {{layer18_out_dout[9:4]}};

assign xor_ln52_fu_187_p2 = (empty_fu_175_p2 ^ 1'd1);

assign zext_ln52_fu_131_p1 = and_ln52_fu_125_p2;

endmodule //myproject_relu_array_ap_fixed_1u_array_ap_ufixed_6_0_4_0_0_1u_relu_config19_s
