// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_5u_array_ap_ufixed_6_0_4_0_0_5u_relu_config19_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer18_out_dout,
        layer18_out_empty_n,
        layer18_out_read,
        layer18_out_num_data_valid,
        layer18_out_fifo_cap,
        layer19_out_din,
        layer19_out_full_n,
        layer19_out_write,
        layer19_out_num_data_valid,
        layer19_out_fifo_cap
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [79:0] layer18_out_dout;
input   layer18_out_empty_n;
output   layer18_out_read;
input  [1:0] layer18_out_num_data_valid;
input  [1:0] layer18_out_fifo_cap;
output  [29:0] layer19_out_din;
input   layer19_out_full_n;
output   layer19_out_write;
input  [1:0] layer19_out_num_data_valid;
input  [1:0] layer19_out_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer18_out_read;
reg layer19_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer18_out_blk_n;
reg    layer19_out_blk_n;
reg    ap_block_state1;
wire   [15:0] trunc_ln44_fu_121_p1;
wire   [2:0] trunc_ln52_fu_197_p1;
wire   [0:0] tmp_80_fu_215_p3;
wire   [0:0] icmp_ln52_fu_201_p2;
wire   [0:0] or_ln52_fu_223_p2;
wire   [0:0] tmp_78_fu_189_p3;
wire   [0:0] and_ln52_fu_229_p2;
wire   [5:0] trunc_ln3_fu_179_p4;
wire   [5:0] zext_ln52_fu_235_p1;
wire   [5:0] tmp_s_fu_245_p4;
wire   [5:0] add_ln52_fu_239_p2;
wire   [0:0] tmp_79_fu_207_p3;
wire   [0:0] tmp_81_fu_261_p3;
wire   [0:0] not_tmp_146_fu_269_p2;
wire   [0:0] icmp_ln52_23_fu_255_p2;
wire   [0:0] and_ln52_42_fu_275_p2;
wire   [0:0] empty_fu_281_p2;
wire   [0:0] tmp_fu_171_p3;
wire   [0:0] xor_ln52_fu_293_p2;
wire   [0:0] or_ln52_35_fu_287_p2;
wire   [5:0] select_ln52_fu_305_p3;
wire   [0:0] or_ln52_36_fu_299_p2;
wire   [5:0] select_ln52_35_fu_313_p3;
wire   [0:0] icmp_ln51_fu_165_p2;
wire   [5:0] select_ln52_36_fu_321_p3;
wire   [15:0] trunc_ln44_s_fu_125_p4;
wire   [2:0] tmp_77_fu_369_p4;
wire   [0:0] tmp_85_fu_393_p3;
wire   [0:0] icmp_ln52_24_fu_379_p2;
wire   [0:0] or_ln52_37_fu_401_p2;
wire   [0:0] tmp_83_fu_361_p3;
wire   [0:0] and_ln52_11_fu_407_p2;
wire   [5:0] trunc_ln52_s_fu_351_p4;
wire   [5:0] zext_ln52_11_fu_413_p1;
wire   [5:0] tmp_86_fu_423_p4;
wire   [5:0] add_ln52_11_fu_417_p2;
wire   [0:0] tmp_84_fu_385_p3;
wire   [0:0] tmp_87_fu_439_p3;
wire   [0:0] not_tmp_153_fu_447_p2;
wire   [0:0] icmp_ln52_25_fu_433_p2;
wire   [0:0] and_ln52_44_fu_453_p2;
wire   [0:0] empty_56_fu_459_p2;
wire   [0:0] tmp_82_fu_343_p3;
wire   [0:0] xor_ln52_11_fu_471_p2;
wire   [0:0] or_ln52_38_fu_465_p2;
wire   [5:0] select_ln52_37_fu_483_p3;
wire   [0:0] or_ln52_39_fu_477_p2;
wire   [5:0] select_ln52_38_fu_491_p3;
wire   [0:0] icmp_ln51_11_fu_337_p2;
wire   [5:0] select_ln52_39_fu_499_p3;
wire   [15:0] trunc_ln44_5_fu_135_p4;
wire   [2:0] tmp_90_fu_547_p4;
wire   [0:0] tmp_92_fu_571_p3;
wire   [0:0] icmp_ln52_26_fu_557_p2;
wire   [0:0] or_ln52_40_fu_579_p2;
wire   [0:0] tmp_89_fu_539_p3;
wire   [0:0] and_ln52_12_fu_585_p2;
wire   [5:0] trunc_ln52_5_fu_529_p4;
wire   [5:0] zext_ln52_12_fu_591_p1;
wire   [5:0] tmp_93_fu_601_p4;
wire   [5:0] add_ln52_12_fu_595_p2;
wire   [0:0] tmp_91_fu_563_p3;
wire   [0:0] tmp_94_fu_617_p3;
wire   [0:0] not_tmp_160_fu_625_p2;
wire   [0:0] icmp_ln52_27_fu_611_p2;
wire   [0:0] and_ln52_46_fu_631_p2;
wire   [0:0] empty_57_fu_637_p2;
wire   [0:0] tmp_88_fu_521_p3;
wire   [0:0] xor_ln52_12_fu_649_p2;
wire   [0:0] or_ln52_41_fu_643_p2;
wire   [5:0] select_ln52_40_fu_661_p3;
wire   [0:0] or_ln52_42_fu_655_p2;
wire   [5:0] select_ln52_41_fu_669_p3;
wire   [0:0] icmp_ln51_12_fu_515_p2;
wire   [5:0] select_ln52_42_fu_677_p3;
wire   [15:0] trunc_ln44_6_fu_145_p4;
wire   [2:0] tmp_97_fu_725_p4;
wire   [0:0] tmp_99_fu_749_p3;
wire   [0:0] icmp_ln52_28_fu_735_p2;
wire   [0:0] or_ln52_43_fu_757_p2;
wire   [0:0] tmp_96_fu_717_p3;
wire   [0:0] and_ln52_13_fu_763_p2;
wire   [5:0] trunc_ln52_6_fu_707_p4;
wire   [5:0] zext_ln52_13_fu_769_p1;
wire   [5:0] tmp_100_fu_779_p4;
wire   [5:0] add_ln52_13_fu_773_p2;
wire   [0:0] tmp_98_fu_741_p3;
wire   [0:0] tmp_101_fu_795_p3;
wire   [0:0] not_tmp_167_fu_803_p2;
wire   [0:0] icmp_ln52_29_fu_789_p2;
wire   [0:0] and_ln52_48_fu_809_p2;
wire   [0:0] empty_58_fu_815_p2;
wire   [0:0] tmp_95_fu_699_p3;
wire   [0:0] xor_ln52_13_fu_827_p2;
wire   [0:0] or_ln52_44_fu_821_p2;
wire   [5:0] select_ln52_43_fu_839_p3;
wire   [0:0] or_ln52_45_fu_833_p2;
wire   [5:0] select_ln52_44_fu_847_p3;
wire   [0:0] icmp_ln51_13_fu_693_p2;
wire   [5:0] select_ln52_45_fu_855_p3;
wire   [15:0] trunc_ln44_7_fu_155_p4;
wire   [2:0] tmp_104_fu_903_p4;
wire   [0:0] tmp_106_fu_927_p3;
wire   [0:0] icmp_ln52_30_fu_913_p2;
wire   [0:0] or_ln52_46_fu_935_p2;
wire   [0:0] tmp_103_fu_895_p3;
wire   [0:0] and_ln52_14_fu_941_p2;
wire   [5:0] trunc_ln52_7_fu_885_p4;
wire   [5:0] zext_ln52_14_fu_947_p1;
wire   [5:0] tmp_107_fu_957_p4;
wire   [5:0] add_ln52_14_fu_951_p2;
wire   [0:0] tmp_105_fu_919_p3;
wire   [0:0] tmp_108_fu_973_p3;
wire   [0:0] not_tmp_174_fu_981_p2;
wire   [0:0] icmp_ln52_31_fu_967_p2;
wire   [0:0] and_ln52_49_fu_987_p2;
wire   [0:0] empty_59_fu_993_p2;
wire   [0:0] tmp_102_fu_877_p3;
wire   [0:0] xor_ln52_14_fu_1005_p2;
wire   [0:0] or_ln52_47_fu_999_p2;
wire   [5:0] select_ln52_46_fu_1017_p3;
wire   [0:0] or_ln52_48_fu_1011_p2;
wire   [5:0] select_ln52_47_fu_1025_p3;
wire   [0:0] icmp_ln51_14_fu_871_p2;
wire   [5:0] select_ln52_48_fu_1033_p3;
wire   [5:0] out_data_0_4_0_0_0_load_fu_1041_p3;
wire   [5:0] out_data_0_3_0_0_0_load_fu_863_p3;
wire   [5:0] out_data_0_2_0_0_0_load_fu_685_p3;
wire   [5:0] out_data_0_1_0_0_0_load_fu_507_p3;
wire   [5:0] out_data_0_0_0_0_0_load_fu_329_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer18_out_blk_n = layer18_out_empty_n;
    end else begin
        layer18_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer18_out_read = 1'b1;
    end else begin
        layer18_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer19_out_blk_n = layer19_out_full_n;
    end else begin
        layer19_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer19_out_write = 1'b1;
    end else begin
        layer19_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_11_fu_417_p2 = (trunc_ln52_s_fu_351_p4 + zext_ln52_11_fu_413_p1);

assign add_ln52_12_fu_595_p2 = (trunc_ln52_5_fu_529_p4 + zext_ln52_12_fu_591_p1);

assign add_ln52_13_fu_773_p2 = (trunc_ln52_6_fu_707_p4 + zext_ln52_13_fu_769_p1);

assign add_ln52_14_fu_951_p2 = (trunc_ln52_7_fu_885_p4 + zext_ln52_14_fu_947_p1);

assign add_ln52_fu_239_p2 = (trunc_ln3_fu_179_p4 + zext_ln52_fu_235_p1);

assign and_ln52_11_fu_407_p2 = (tmp_83_fu_361_p3 & or_ln52_37_fu_401_p2);

assign and_ln52_12_fu_585_p2 = (tmp_89_fu_539_p3 & or_ln52_40_fu_579_p2);

assign and_ln52_13_fu_763_p2 = (tmp_96_fu_717_p3 & or_ln52_43_fu_757_p2);

assign and_ln52_14_fu_941_p2 = (tmp_103_fu_895_p3 & or_ln52_46_fu_935_p2);

assign and_ln52_42_fu_275_p2 = (tmp_81_fu_261_p3 | not_tmp_146_fu_269_p2);

assign and_ln52_44_fu_453_p2 = (tmp_87_fu_439_p3 | not_tmp_153_fu_447_p2);

assign and_ln52_46_fu_631_p2 = (tmp_94_fu_617_p3 | not_tmp_160_fu_625_p2);

assign and_ln52_48_fu_809_p2 = (tmp_101_fu_795_p3 | not_tmp_167_fu_803_p2);

assign and_ln52_49_fu_987_p2 = (tmp_108_fu_973_p3 | not_tmp_174_fu_981_p2);

assign and_ln52_fu_229_p2 = (tmp_78_fu_189_p3 & or_ln52_fu_223_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (layer19_out_full_n == 1'b0) | (layer18_out_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign empty_56_fu_459_p2 = (icmp_ln52_25_fu_433_p2 & and_ln52_44_fu_453_p2);

assign empty_57_fu_637_p2 = (icmp_ln52_27_fu_611_p2 & and_ln52_46_fu_631_p2);

assign empty_58_fu_815_p2 = (icmp_ln52_29_fu_789_p2 & and_ln52_48_fu_809_p2);

assign empty_59_fu_993_p2 = (icmp_ln52_31_fu_967_p2 & and_ln52_49_fu_987_p2);

assign empty_fu_281_p2 = (icmp_ln52_23_fu_255_p2 & and_ln52_42_fu_275_p2);

assign icmp_ln51_11_fu_337_p2 = (($signed(trunc_ln44_s_fu_125_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_12_fu_515_p2 = (($signed(trunc_ln44_5_fu_135_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_13_fu_693_p2 = (($signed(trunc_ln44_6_fu_145_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_14_fu_871_p2 = (($signed(trunc_ln44_7_fu_155_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_165_p2 = (($signed(trunc_ln44_fu_121_p1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln52_23_fu_255_p2 = ((tmp_s_fu_245_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_24_fu_379_p2 = ((tmp_77_fu_369_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_25_fu_433_p2 = ((tmp_86_fu_423_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_26_fu_557_p2 = ((tmp_90_fu_547_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_27_fu_611_p2 = ((tmp_93_fu_601_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_28_fu_735_p2 = ((tmp_97_fu_725_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_29_fu_789_p2 = ((tmp_100_fu_779_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_30_fu_913_p2 = ((tmp_104_fu_903_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_31_fu_967_p2 = ((tmp_107_fu_957_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_201_p2 = ((trunc_ln52_fu_197_p1 != 3'd0) ? 1'b1 : 1'b0);

assign layer19_out_din = {{{{{out_data_0_4_0_0_0_load_fu_1041_p3}, {out_data_0_3_0_0_0_load_fu_863_p3}}, {out_data_0_2_0_0_0_load_fu_685_p3}}, {out_data_0_1_0_0_0_load_fu_507_p3}}, {out_data_0_0_0_0_0_load_fu_329_p3}};

assign not_tmp_146_fu_269_p2 = (tmp_79_fu_207_p3 ^ 1'd1);

assign not_tmp_153_fu_447_p2 = (tmp_84_fu_385_p3 ^ 1'd1);

assign not_tmp_160_fu_625_p2 = (tmp_91_fu_563_p3 ^ 1'd1);

assign not_tmp_167_fu_803_p2 = (tmp_98_fu_741_p3 ^ 1'd1);

assign not_tmp_174_fu_981_p2 = (tmp_105_fu_919_p3 ^ 1'd1);

assign or_ln52_35_fu_287_p2 = (tmp_fu_171_p3 | empty_fu_281_p2);

assign or_ln52_36_fu_299_p2 = (xor_ln52_fu_293_p2 | tmp_fu_171_p3);

assign or_ln52_37_fu_401_p2 = (tmp_85_fu_393_p3 | icmp_ln52_24_fu_379_p2);

assign or_ln52_38_fu_465_p2 = (tmp_82_fu_343_p3 | empty_56_fu_459_p2);

assign or_ln52_39_fu_477_p2 = (xor_ln52_11_fu_471_p2 | tmp_82_fu_343_p3);

assign or_ln52_40_fu_579_p2 = (tmp_92_fu_571_p3 | icmp_ln52_26_fu_557_p2);

assign or_ln52_41_fu_643_p2 = (tmp_88_fu_521_p3 | empty_57_fu_637_p2);

assign or_ln52_42_fu_655_p2 = (xor_ln52_12_fu_649_p2 | tmp_88_fu_521_p3);

assign or_ln52_43_fu_757_p2 = (tmp_99_fu_749_p3 | icmp_ln52_28_fu_735_p2);

assign or_ln52_44_fu_821_p2 = (tmp_95_fu_699_p3 | empty_58_fu_815_p2);

assign or_ln52_45_fu_833_p2 = (xor_ln52_13_fu_827_p2 | tmp_95_fu_699_p3);

assign or_ln52_46_fu_935_p2 = (tmp_106_fu_927_p3 | icmp_ln52_30_fu_913_p2);

assign or_ln52_47_fu_999_p2 = (tmp_102_fu_877_p3 | empty_59_fu_993_p2);

assign or_ln52_48_fu_1011_p2 = (xor_ln52_14_fu_1005_p2 | tmp_102_fu_877_p3);

assign or_ln52_fu_223_p2 = (tmp_80_fu_215_p3 | icmp_ln52_fu_201_p2);

assign out_data_0_0_0_0_0_load_fu_329_p3 = ((icmp_ln51_fu_165_p2[0:0] == 1'b1) ? select_ln52_36_fu_321_p3 : 6'd0);

assign out_data_0_1_0_0_0_load_fu_507_p3 = ((icmp_ln51_11_fu_337_p2[0:0] == 1'b1) ? select_ln52_39_fu_499_p3 : 6'd0);

assign out_data_0_2_0_0_0_load_fu_685_p3 = ((icmp_ln51_12_fu_515_p2[0:0] == 1'b1) ? select_ln52_42_fu_677_p3 : 6'd0);

assign out_data_0_3_0_0_0_load_fu_863_p3 = ((icmp_ln51_13_fu_693_p2[0:0] == 1'b1) ? select_ln52_45_fu_855_p3 : 6'd0);

assign out_data_0_4_0_0_0_load_fu_1041_p3 = ((icmp_ln51_14_fu_871_p2[0:0] == 1'b1) ? select_ln52_48_fu_1033_p3 : 6'd0);

assign select_ln52_35_fu_313_p3 = ((or_ln52_35_fu_287_p2[0:0] == 1'b1) ? select_ln52_fu_305_p3 : 6'd63);

assign select_ln52_36_fu_321_p3 = ((or_ln52_36_fu_299_p2[0:0] == 1'b1) ? select_ln52_35_fu_313_p3 : add_ln52_fu_239_p2);

assign select_ln52_37_fu_483_p3 = ((tmp_82_fu_343_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_11_fu_417_p2);

assign select_ln52_38_fu_491_p3 = ((or_ln52_38_fu_465_p2[0:0] == 1'b1) ? select_ln52_37_fu_483_p3 : 6'd63);

assign select_ln52_39_fu_499_p3 = ((or_ln52_39_fu_477_p2[0:0] == 1'b1) ? select_ln52_38_fu_491_p3 : add_ln52_11_fu_417_p2);

assign select_ln52_40_fu_661_p3 = ((tmp_88_fu_521_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_12_fu_595_p2);

assign select_ln52_41_fu_669_p3 = ((or_ln52_41_fu_643_p2[0:0] == 1'b1) ? select_ln52_40_fu_661_p3 : 6'd63);

assign select_ln52_42_fu_677_p3 = ((or_ln52_42_fu_655_p2[0:0] == 1'b1) ? select_ln52_41_fu_669_p3 : add_ln52_12_fu_595_p2);

assign select_ln52_43_fu_839_p3 = ((tmp_95_fu_699_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_13_fu_773_p2);

assign select_ln52_44_fu_847_p3 = ((or_ln52_44_fu_821_p2[0:0] == 1'b1) ? select_ln52_43_fu_839_p3 : 6'd63);

assign select_ln52_45_fu_855_p3 = ((or_ln52_45_fu_833_p2[0:0] == 1'b1) ? select_ln52_44_fu_847_p3 : add_ln52_13_fu_773_p2);

assign select_ln52_46_fu_1017_p3 = ((tmp_102_fu_877_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_14_fu_951_p2);

assign select_ln52_47_fu_1025_p3 = ((or_ln52_47_fu_999_p2[0:0] == 1'b1) ? select_ln52_46_fu_1017_p3 : 6'd63);

assign select_ln52_48_fu_1033_p3 = ((or_ln52_48_fu_1011_p2[0:0] == 1'b1) ? select_ln52_47_fu_1025_p3 : add_ln52_14_fu_951_p2);

assign select_ln52_fu_305_p3 = ((tmp_fu_171_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_fu_239_p2);

assign start_out = real_start;

assign tmp_100_fu_779_p4 = {{layer18_out_dout[63:58]}};

assign tmp_101_fu_795_p3 = add_ln52_13_fu_773_p2[32'd5];

assign tmp_102_fu_877_p3 = layer18_out_dout[32'd79];

assign tmp_103_fu_895_p3 = layer18_out_dout[32'd67];

assign tmp_104_fu_903_p4 = {{layer18_out_dout[66:64]}};

assign tmp_105_fu_919_p3 = layer18_out_dout[32'd73];

assign tmp_106_fu_927_p3 = layer18_out_dout[32'd68];

assign tmp_107_fu_957_p4 = {{layer18_out_dout[79:74]}};

assign tmp_108_fu_973_p3 = add_ln52_14_fu_951_p2[32'd5];

assign tmp_77_fu_369_p4 = {{layer18_out_dout[18:16]}};

assign tmp_78_fu_189_p3 = layer18_out_dout[32'd3];

assign tmp_79_fu_207_p3 = layer18_out_dout[32'd9];

assign tmp_80_fu_215_p3 = layer18_out_dout[32'd4];

assign tmp_81_fu_261_p3 = add_ln52_fu_239_p2[32'd5];

assign tmp_82_fu_343_p3 = layer18_out_dout[32'd31];

assign tmp_83_fu_361_p3 = layer18_out_dout[32'd19];

assign tmp_84_fu_385_p3 = layer18_out_dout[32'd25];

assign tmp_85_fu_393_p3 = layer18_out_dout[32'd20];

assign tmp_86_fu_423_p4 = {{layer18_out_dout[31:26]}};

assign tmp_87_fu_439_p3 = add_ln52_11_fu_417_p2[32'd5];

assign tmp_88_fu_521_p3 = layer18_out_dout[32'd47];

assign tmp_89_fu_539_p3 = layer18_out_dout[32'd35];

assign tmp_90_fu_547_p4 = {{layer18_out_dout[34:32]}};

assign tmp_91_fu_563_p3 = layer18_out_dout[32'd41];

assign tmp_92_fu_571_p3 = layer18_out_dout[32'd36];

assign tmp_93_fu_601_p4 = {{layer18_out_dout[47:42]}};

assign tmp_94_fu_617_p3 = add_ln52_12_fu_595_p2[32'd5];

assign tmp_95_fu_699_p3 = layer18_out_dout[32'd63];

assign tmp_96_fu_717_p3 = layer18_out_dout[32'd51];

assign tmp_97_fu_725_p4 = {{layer18_out_dout[50:48]}};

assign tmp_98_fu_741_p3 = layer18_out_dout[32'd57];

assign tmp_99_fu_749_p3 = layer18_out_dout[32'd52];

assign tmp_fu_171_p3 = layer18_out_dout[32'd15];

assign tmp_s_fu_245_p4 = {{layer18_out_dout[15:10]}};

assign trunc_ln3_fu_179_p4 = {{layer18_out_dout[9:4]}};

assign trunc_ln44_5_fu_135_p4 = {{layer18_out_dout[47:32]}};

assign trunc_ln44_6_fu_145_p4 = {{layer18_out_dout[63:48]}};

assign trunc_ln44_7_fu_155_p4 = {{layer18_out_dout[79:64]}};

assign trunc_ln44_fu_121_p1 = layer18_out_dout[15:0];

assign trunc_ln44_s_fu_125_p4 = {{layer18_out_dout[31:16]}};

assign trunc_ln52_5_fu_529_p4 = {{layer18_out_dout[41:36]}};

assign trunc_ln52_6_fu_707_p4 = {{layer18_out_dout[57:52]}};

assign trunc_ln52_7_fu_885_p4 = {{layer18_out_dout[73:68]}};

assign trunc_ln52_fu_197_p1 = layer18_out_dout[2:0];

assign trunc_ln52_s_fu_351_p4 = {{layer18_out_dout[25:20]}};

assign xor_ln52_11_fu_471_p2 = (empty_56_fu_459_p2 ^ 1'd1);

assign xor_ln52_12_fu_649_p2 = (empty_57_fu_637_p2 ^ 1'd1);

assign xor_ln52_13_fu_827_p2 = (empty_58_fu_815_p2 ^ 1'd1);

assign xor_ln52_14_fu_1005_p2 = (empty_59_fu_993_p2 ^ 1'd1);

assign xor_ln52_fu_293_p2 = (empty_fu_281_p2 ^ 1'd1);

assign zext_ln52_11_fu_413_p1 = and_ln52_11_fu_407_p2;

assign zext_ln52_12_fu_591_p1 = and_ln52_12_fu_585_p2;

assign zext_ln52_13_fu_769_p1 = and_ln52_13_fu_763_p2;

assign zext_ln52_14_fu_947_p1 = and_ln52_14_fu_941_p2;

assign zext_ln52_fu_235_p1 = and_ln52_fu_229_p2;

endmodule //myproject_relu_array_ap_fixed_5u_array_ap_ufixed_6_0_4_0_0_5u_relu_config19_s
