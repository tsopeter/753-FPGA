// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_5u_array_ap_ufixed_6_0_4_0_0_5u_relu_config18_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer17_out_dout,
        layer17_out_empty_n,
        layer17_out_read,
        layer17_out_num_data_valid,
        layer17_out_fifo_cap,
        layer18_out_din,
        layer18_out_full_n,
        layer18_out_write,
        layer18_out_num_data_valid,
        layer18_out_fifo_cap
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [84:0] layer17_out_dout;
input   layer17_out_empty_n;
output   layer17_out_read;
input  [1:0] layer17_out_num_data_valid;
input  [1:0] layer17_out_fifo_cap;
output  [29:0] layer18_out_din;
input   layer18_out_full_n;
output   layer18_out_write;
input  [1:0] layer18_out_num_data_valid;
input  [1:0] layer18_out_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer17_out_read;
reg layer18_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer17_out_blk_n;
reg    layer18_out_blk_n;
reg    ap_block_state1;
wire   [16:0] trunc_ln44_fu_125_p1;
wire   [2:0] trunc_ln52_fu_201_p1;
wire   [0:0] tmp_42_fu_219_p3;
wire   [0:0] icmp_ln52_fu_205_p2;
wire   [0:0] or_ln52_fu_227_p2;
wire   [0:0] tmp_40_fu_193_p3;
wire   [0:0] and_ln52_fu_233_p2;
wire   [5:0] trunc_ln2_fu_183_p4;
wire   [5:0] zext_ln52_fu_239_p1;
wire   [6:0] tmp_s_fu_249_p4;
wire   [5:0] add_ln52_fu_243_p2;
wire   [0:0] tmp_41_fu_211_p3;
wire   [0:0] tmp_43_fu_265_p3;
wire   [0:0] not_tmp_174_fu_273_p2;
wire   [0:0] icmp_ln52_12_fu_259_p2;
wire   [0:0] and_ln52_50_fu_279_p2;
wire   [0:0] empty_fu_285_p2;
wire   [0:0] tmp_fu_175_p3;
wire   [0:0] xor_ln52_fu_297_p2;
wire   [0:0] or_ln52_18_fu_291_p2;
wire   [5:0] select_ln52_fu_309_p3;
wire   [0:0] or_ln52_19_fu_303_p2;
wire   [5:0] select_ln52_18_fu_317_p3;
wire   [0:0] icmp_ln51_fu_169_p2;
wire   [5:0] select_ln52_19_fu_325_p3;
wire   [16:0] trunc_ln44_s_fu_129_p4;
wire   [2:0] tmp_39_fu_373_p4;
wire   [0:0] tmp_47_fu_397_p3;
wire   [0:0] icmp_ln52_13_fu_383_p2;
wire   [0:0] or_ln52_20_fu_405_p2;
wire   [0:0] tmp_45_fu_365_p3;
wire   [0:0] and_ln52_6_fu_411_p2;
wire   [5:0] trunc_ln52_s_fu_355_p4;
wire   [5:0] zext_ln52_6_fu_417_p1;
wire   [6:0] tmp_48_fu_427_p4;
wire   [5:0] add_ln52_6_fu_421_p2;
wire   [0:0] tmp_46_fu_389_p3;
wire   [0:0] tmp_49_fu_443_p3;
wire   [0:0] not_tmp_181_fu_451_p2;
wire   [0:0] icmp_ln52_14_fu_437_p2;
wire   [0:0] and_ln52_52_fu_457_p2;
wire   [0:0] empty_59_fu_463_p2;
wire   [0:0] tmp_44_fu_347_p3;
wire   [0:0] xor_ln52_6_fu_475_p2;
wire   [0:0] or_ln52_21_fu_469_p2;
wire   [5:0] select_ln52_20_fu_487_p3;
wire   [0:0] or_ln52_22_fu_481_p2;
wire   [5:0] select_ln52_21_fu_495_p3;
wire   [0:0] icmp_ln51_6_fu_341_p2;
wire   [5:0] select_ln52_22_fu_503_p3;
wire   [16:0] trunc_ln44_1_fu_139_p4;
wire   [2:0] tmp_52_fu_551_p4;
wire   [0:0] tmp_54_fu_575_p3;
wire   [0:0] icmp_ln52_15_fu_561_p2;
wire   [0:0] or_ln52_23_fu_583_p2;
wire   [0:0] tmp_51_fu_543_p3;
wire   [0:0] and_ln52_7_fu_589_p2;
wire   [5:0] trunc_ln52_1_fu_533_p4;
wire   [5:0] zext_ln52_7_fu_595_p1;
wire   [6:0] tmp_55_fu_605_p4;
wire   [5:0] add_ln52_7_fu_599_p2;
wire   [0:0] tmp_53_fu_567_p3;
wire   [0:0] tmp_56_fu_621_p3;
wire   [0:0] not_tmp_188_fu_629_p2;
wire   [0:0] icmp_ln52_16_fu_615_p2;
wire   [0:0] and_ln52_54_fu_635_p2;
wire   [0:0] empty_60_fu_641_p2;
wire   [0:0] tmp_50_fu_525_p3;
wire   [0:0] xor_ln52_7_fu_653_p2;
wire   [0:0] or_ln52_24_fu_647_p2;
wire   [5:0] select_ln52_23_fu_665_p3;
wire   [0:0] or_ln52_25_fu_659_p2;
wire   [5:0] select_ln52_24_fu_673_p3;
wire   [0:0] icmp_ln51_7_fu_519_p2;
wire   [5:0] select_ln52_25_fu_681_p3;
wire   [16:0] trunc_ln44_2_fu_149_p4;
wire   [2:0] tmp_59_fu_729_p4;
wire   [0:0] tmp_61_fu_753_p3;
wire   [0:0] icmp_ln52_17_fu_739_p2;
wire   [0:0] or_ln52_26_fu_761_p2;
wire   [0:0] tmp_58_fu_721_p3;
wire   [0:0] and_ln52_8_fu_767_p2;
wire   [5:0] trunc_ln52_2_fu_711_p4;
wire   [5:0] zext_ln52_8_fu_773_p1;
wire   [6:0] tmp_62_fu_783_p4;
wire   [5:0] add_ln52_8_fu_777_p2;
wire   [0:0] tmp_60_fu_745_p3;
wire   [0:0] tmp_63_fu_799_p3;
wire   [0:0] not_tmp_195_fu_807_p2;
wire   [0:0] icmp_ln52_18_fu_793_p2;
wire   [0:0] and_ln52_56_fu_813_p2;
wire   [0:0] empty_61_fu_819_p2;
wire   [0:0] tmp_57_fu_703_p3;
wire   [0:0] xor_ln52_8_fu_831_p2;
wire   [0:0] or_ln52_27_fu_825_p2;
wire   [5:0] select_ln52_26_fu_843_p3;
wire   [0:0] or_ln52_28_fu_837_p2;
wire   [5:0] select_ln52_27_fu_851_p3;
wire   [0:0] icmp_ln51_8_fu_697_p2;
wire   [5:0] select_ln52_28_fu_859_p3;
wire   [16:0] trunc_ln44_3_fu_159_p4;
wire   [2:0] tmp_66_fu_907_p4;
wire   [0:0] tmp_68_fu_931_p3;
wire   [0:0] icmp_ln52_19_fu_917_p2;
wire   [0:0] or_ln52_29_fu_939_p2;
wire   [0:0] tmp_65_fu_899_p3;
wire   [0:0] and_ln52_9_fu_945_p2;
wire   [5:0] trunc_ln52_3_fu_889_p4;
wire   [5:0] zext_ln52_9_fu_951_p1;
wire   [6:0] tmp_69_fu_961_p4;
wire   [5:0] add_ln52_9_fu_955_p2;
wire   [0:0] tmp_67_fu_923_p3;
wire   [0:0] tmp_70_fu_977_p3;
wire   [0:0] not_tmp_202_fu_985_p2;
wire   [0:0] icmp_ln52_20_fu_971_p2;
wire   [0:0] and_ln52_57_fu_991_p2;
wire   [0:0] empty_62_fu_997_p2;
wire   [0:0] tmp_64_fu_881_p3;
wire   [0:0] xor_ln52_9_fu_1009_p2;
wire   [0:0] or_ln52_30_fu_1003_p2;
wire   [5:0] select_ln52_29_fu_1021_p3;
wire   [0:0] or_ln52_31_fu_1015_p2;
wire   [5:0] select_ln52_30_fu_1029_p3;
wire   [0:0] icmp_ln51_9_fu_875_p2;
wire   [5:0] select_ln52_31_fu_1037_p3;
wire   [5:0] out_data_0_4_0_0_0_load_fu_1045_p3;
wire   [5:0] out_data_0_3_0_0_0_load_fu_867_p3;
wire   [5:0] out_data_0_2_0_0_0_load_fu_689_p3;
wire   [5:0] out_data_0_1_0_0_0_load_fu_511_p3;
wire   [5:0] out_data_0_0_0_0_0_load_fu_333_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer17_out_blk_n = layer17_out_empty_n;
    end else begin
        layer17_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer17_out_read = 1'b1;
    end else begin
        layer17_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer18_out_blk_n = layer18_out_full_n;
    end else begin
        layer18_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer18_out_write = 1'b1;
    end else begin
        layer18_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_6_fu_421_p2 = (trunc_ln52_s_fu_355_p4 + zext_ln52_6_fu_417_p1);

assign add_ln52_7_fu_599_p2 = (trunc_ln52_1_fu_533_p4 + zext_ln52_7_fu_595_p1);

assign add_ln52_8_fu_777_p2 = (trunc_ln52_2_fu_711_p4 + zext_ln52_8_fu_773_p1);

assign add_ln52_9_fu_955_p2 = (trunc_ln52_3_fu_889_p4 + zext_ln52_9_fu_951_p1);

assign add_ln52_fu_243_p2 = (trunc_ln2_fu_183_p4 + zext_ln52_fu_239_p1);

assign and_ln52_50_fu_279_p2 = (tmp_43_fu_265_p3 | not_tmp_174_fu_273_p2);

assign and_ln52_52_fu_457_p2 = (tmp_49_fu_443_p3 | not_tmp_181_fu_451_p2);

assign and_ln52_54_fu_635_p2 = (tmp_56_fu_621_p3 | not_tmp_188_fu_629_p2);

assign and_ln52_56_fu_813_p2 = (tmp_63_fu_799_p3 | not_tmp_195_fu_807_p2);

assign and_ln52_57_fu_991_p2 = (tmp_70_fu_977_p3 | not_tmp_202_fu_985_p2);

assign and_ln52_6_fu_411_p2 = (tmp_45_fu_365_p3 & or_ln52_20_fu_405_p2);

assign and_ln52_7_fu_589_p2 = (tmp_51_fu_543_p3 & or_ln52_23_fu_583_p2);

assign and_ln52_8_fu_767_p2 = (tmp_58_fu_721_p3 & or_ln52_26_fu_761_p2);

assign and_ln52_9_fu_945_p2 = (tmp_65_fu_899_p3 & or_ln52_29_fu_939_p2);

assign and_ln52_fu_233_p2 = (tmp_40_fu_193_p3 & or_ln52_fu_227_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (layer18_out_full_n == 1'b0) | (layer17_out_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign empty_59_fu_463_p2 = (icmp_ln52_14_fu_437_p2 & and_ln52_52_fu_457_p2);

assign empty_60_fu_641_p2 = (icmp_ln52_16_fu_615_p2 & and_ln52_54_fu_635_p2);

assign empty_61_fu_819_p2 = (icmp_ln52_18_fu_793_p2 & and_ln52_56_fu_813_p2);

assign empty_62_fu_997_p2 = (icmp_ln52_20_fu_971_p2 & and_ln52_57_fu_991_p2);

assign empty_fu_285_p2 = (icmp_ln52_12_fu_259_p2 & and_ln52_50_fu_279_p2);

assign icmp_ln51_6_fu_341_p2 = (($signed(trunc_ln44_s_fu_129_p4) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_7_fu_519_p2 = (($signed(trunc_ln44_1_fu_139_p4) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_8_fu_697_p2 = (($signed(trunc_ln44_2_fu_149_p4) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_9_fu_875_p2 = (($signed(trunc_ln44_3_fu_159_p4) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_169_p2 = (($signed(trunc_ln44_fu_125_p1) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign icmp_ln52_12_fu_259_p2 = ((tmp_s_fu_249_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_13_fu_383_p2 = ((tmp_39_fu_373_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_14_fu_437_p2 = ((tmp_48_fu_427_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_15_fu_561_p2 = ((tmp_52_fu_551_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_16_fu_615_p2 = ((tmp_55_fu_605_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_17_fu_739_p2 = ((tmp_59_fu_729_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_18_fu_793_p2 = ((tmp_62_fu_783_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_19_fu_917_p2 = ((tmp_66_fu_907_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_20_fu_971_p2 = ((tmp_69_fu_961_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_205_p2 = ((trunc_ln52_fu_201_p1 != 3'd0) ? 1'b1 : 1'b0);

assign layer18_out_din = {{{{{out_data_0_4_0_0_0_load_fu_1045_p3}, {out_data_0_3_0_0_0_load_fu_867_p3}}, {out_data_0_2_0_0_0_load_fu_689_p3}}, {out_data_0_1_0_0_0_load_fu_511_p3}}, {out_data_0_0_0_0_0_load_fu_333_p3}};

assign not_tmp_174_fu_273_p2 = (tmp_41_fu_211_p3 ^ 1'd1);

assign not_tmp_181_fu_451_p2 = (tmp_46_fu_389_p3 ^ 1'd1);

assign not_tmp_188_fu_629_p2 = (tmp_53_fu_567_p3 ^ 1'd1);

assign not_tmp_195_fu_807_p2 = (tmp_60_fu_745_p3 ^ 1'd1);

assign not_tmp_202_fu_985_p2 = (tmp_67_fu_923_p3 ^ 1'd1);

assign or_ln52_18_fu_291_p2 = (tmp_fu_175_p3 | empty_fu_285_p2);

assign or_ln52_19_fu_303_p2 = (xor_ln52_fu_297_p2 | tmp_fu_175_p3);

assign or_ln52_20_fu_405_p2 = (tmp_47_fu_397_p3 | icmp_ln52_13_fu_383_p2);

assign or_ln52_21_fu_469_p2 = (tmp_44_fu_347_p3 | empty_59_fu_463_p2);

assign or_ln52_22_fu_481_p2 = (xor_ln52_6_fu_475_p2 | tmp_44_fu_347_p3);

assign or_ln52_23_fu_583_p2 = (tmp_54_fu_575_p3 | icmp_ln52_15_fu_561_p2);

assign or_ln52_24_fu_647_p2 = (tmp_50_fu_525_p3 | empty_60_fu_641_p2);

assign or_ln52_25_fu_659_p2 = (xor_ln52_7_fu_653_p2 | tmp_50_fu_525_p3);

assign or_ln52_26_fu_761_p2 = (tmp_61_fu_753_p3 | icmp_ln52_17_fu_739_p2);

assign or_ln52_27_fu_825_p2 = (tmp_57_fu_703_p3 | empty_61_fu_819_p2);

assign or_ln52_28_fu_837_p2 = (xor_ln52_8_fu_831_p2 | tmp_57_fu_703_p3);

assign or_ln52_29_fu_939_p2 = (tmp_68_fu_931_p3 | icmp_ln52_19_fu_917_p2);

assign or_ln52_30_fu_1003_p2 = (tmp_64_fu_881_p3 | empty_62_fu_997_p2);

assign or_ln52_31_fu_1015_p2 = (xor_ln52_9_fu_1009_p2 | tmp_64_fu_881_p3);

assign or_ln52_fu_227_p2 = (tmp_42_fu_219_p3 | icmp_ln52_fu_205_p2);

assign out_data_0_0_0_0_0_load_fu_333_p3 = ((icmp_ln51_fu_169_p2[0:0] == 1'b1) ? select_ln52_19_fu_325_p3 : 6'd0);

assign out_data_0_1_0_0_0_load_fu_511_p3 = ((icmp_ln51_6_fu_341_p2[0:0] == 1'b1) ? select_ln52_22_fu_503_p3 : 6'd0);

assign out_data_0_2_0_0_0_load_fu_689_p3 = ((icmp_ln51_7_fu_519_p2[0:0] == 1'b1) ? select_ln52_25_fu_681_p3 : 6'd0);

assign out_data_0_3_0_0_0_load_fu_867_p3 = ((icmp_ln51_8_fu_697_p2[0:0] == 1'b1) ? select_ln52_28_fu_859_p3 : 6'd0);

assign out_data_0_4_0_0_0_load_fu_1045_p3 = ((icmp_ln51_9_fu_875_p2[0:0] == 1'b1) ? select_ln52_31_fu_1037_p3 : 6'd0);

assign select_ln52_18_fu_317_p3 = ((or_ln52_18_fu_291_p2[0:0] == 1'b1) ? select_ln52_fu_309_p3 : 6'd63);

assign select_ln52_19_fu_325_p3 = ((or_ln52_19_fu_303_p2[0:0] == 1'b1) ? select_ln52_18_fu_317_p3 : add_ln52_fu_243_p2);

assign select_ln52_20_fu_487_p3 = ((tmp_44_fu_347_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_6_fu_421_p2);

assign select_ln52_21_fu_495_p3 = ((or_ln52_21_fu_469_p2[0:0] == 1'b1) ? select_ln52_20_fu_487_p3 : 6'd63);

assign select_ln52_22_fu_503_p3 = ((or_ln52_22_fu_481_p2[0:0] == 1'b1) ? select_ln52_21_fu_495_p3 : add_ln52_6_fu_421_p2);

assign select_ln52_23_fu_665_p3 = ((tmp_50_fu_525_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_7_fu_599_p2);

assign select_ln52_24_fu_673_p3 = ((or_ln52_24_fu_647_p2[0:0] == 1'b1) ? select_ln52_23_fu_665_p3 : 6'd63);

assign select_ln52_25_fu_681_p3 = ((or_ln52_25_fu_659_p2[0:0] == 1'b1) ? select_ln52_24_fu_673_p3 : add_ln52_7_fu_599_p2);

assign select_ln52_26_fu_843_p3 = ((tmp_57_fu_703_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_8_fu_777_p2);

assign select_ln52_27_fu_851_p3 = ((or_ln52_27_fu_825_p2[0:0] == 1'b1) ? select_ln52_26_fu_843_p3 : 6'd63);

assign select_ln52_28_fu_859_p3 = ((or_ln52_28_fu_837_p2[0:0] == 1'b1) ? select_ln52_27_fu_851_p3 : add_ln52_8_fu_777_p2);

assign select_ln52_29_fu_1021_p3 = ((tmp_64_fu_881_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_9_fu_955_p2);

assign select_ln52_30_fu_1029_p3 = ((or_ln52_30_fu_1003_p2[0:0] == 1'b1) ? select_ln52_29_fu_1021_p3 : 6'd63);

assign select_ln52_31_fu_1037_p3 = ((or_ln52_31_fu_1015_p2[0:0] == 1'b1) ? select_ln52_30_fu_1029_p3 : add_ln52_9_fu_955_p2);

assign select_ln52_fu_309_p3 = ((tmp_fu_175_p3[0:0] == 1'b1) ? 6'd0 : add_ln52_fu_243_p2);

assign start_out = real_start;

assign tmp_39_fu_373_p4 = {{layer17_out_dout[19:17]}};

assign tmp_40_fu_193_p3 = layer17_out_dout[32'd3];

assign tmp_41_fu_211_p3 = layer17_out_dout[32'd9];

assign tmp_42_fu_219_p3 = layer17_out_dout[32'd4];

assign tmp_43_fu_265_p3 = add_ln52_fu_243_p2[32'd5];

assign tmp_44_fu_347_p3 = layer17_out_dout[32'd33];

assign tmp_45_fu_365_p3 = layer17_out_dout[32'd20];

assign tmp_46_fu_389_p3 = layer17_out_dout[32'd26];

assign tmp_47_fu_397_p3 = layer17_out_dout[32'd21];

assign tmp_48_fu_427_p4 = {{layer17_out_dout[33:27]}};

assign tmp_49_fu_443_p3 = add_ln52_6_fu_421_p2[32'd5];

assign tmp_50_fu_525_p3 = layer17_out_dout[32'd50];

assign tmp_51_fu_543_p3 = layer17_out_dout[32'd37];

assign tmp_52_fu_551_p4 = {{layer17_out_dout[36:34]}};

assign tmp_53_fu_567_p3 = layer17_out_dout[32'd43];

assign tmp_54_fu_575_p3 = layer17_out_dout[32'd38];

assign tmp_55_fu_605_p4 = {{layer17_out_dout[50:44]}};

assign tmp_56_fu_621_p3 = add_ln52_7_fu_599_p2[32'd5];

assign tmp_57_fu_703_p3 = layer17_out_dout[32'd67];

assign tmp_58_fu_721_p3 = layer17_out_dout[32'd54];

assign tmp_59_fu_729_p4 = {{layer17_out_dout[53:51]}};

assign tmp_60_fu_745_p3 = layer17_out_dout[32'd60];

assign tmp_61_fu_753_p3 = layer17_out_dout[32'd55];

assign tmp_62_fu_783_p4 = {{layer17_out_dout[67:61]}};

assign tmp_63_fu_799_p3 = add_ln52_8_fu_777_p2[32'd5];

assign tmp_64_fu_881_p3 = layer17_out_dout[32'd84];

assign tmp_65_fu_899_p3 = layer17_out_dout[32'd71];

assign tmp_66_fu_907_p4 = {{layer17_out_dout[70:68]}};

assign tmp_67_fu_923_p3 = layer17_out_dout[32'd77];

assign tmp_68_fu_931_p3 = layer17_out_dout[32'd72];

assign tmp_69_fu_961_p4 = {{layer17_out_dout[84:78]}};

assign tmp_70_fu_977_p3 = add_ln52_9_fu_955_p2[32'd5];

assign tmp_fu_175_p3 = layer17_out_dout[32'd16];

assign tmp_s_fu_249_p4 = {{layer17_out_dout[16:10]}};

assign trunc_ln2_fu_183_p4 = {{layer17_out_dout[9:4]}};

assign trunc_ln44_1_fu_139_p4 = {{layer17_out_dout[50:34]}};

assign trunc_ln44_2_fu_149_p4 = {{layer17_out_dout[67:51]}};

assign trunc_ln44_3_fu_159_p4 = {{layer17_out_dout[84:68]}};

assign trunc_ln44_fu_125_p1 = layer17_out_dout[16:0];

assign trunc_ln44_s_fu_129_p4 = {{layer17_out_dout[33:17]}};

assign trunc_ln52_1_fu_533_p4 = {{layer17_out_dout[43:38]}};

assign trunc_ln52_2_fu_711_p4 = {{layer17_out_dout[60:55]}};

assign trunc_ln52_3_fu_889_p4 = {{layer17_out_dout[77:72]}};

assign trunc_ln52_fu_201_p1 = layer17_out_dout[2:0];

assign trunc_ln52_s_fu_355_p4 = {{layer17_out_dout[26:21]}};

assign xor_ln52_6_fu_475_p2 = (empty_59_fu_463_p2 ^ 1'd1);

assign xor_ln52_7_fu_653_p2 = (empty_60_fu_641_p2 ^ 1'd1);

assign xor_ln52_8_fu_831_p2 = (empty_61_fu_819_p2 ^ 1'd1);

assign xor_ln52_9_fu_1009_p2 = (empty_62_fu_997_p2 ^ 1'd1);

assign xor_ln52_fu_297_p2 = (empty_fu_285_p2 ^ 1'd1);

assign zext_ln52_6_fu_417_p1 = and_ln52_6_fu_411_p2;

assign zext_ln52_7_fu_595_p1 = and_ln52_7_fu_589_p2;

assign zext_ln52_8_fu_773_p1 = and_ln52_8_fu_767_p2;

assign zext_ln52_9_fu_951_p1 = and_ln52_9_fu_945_p2;

assign zext_ln52_fu_239_p1 = and_ln52_fu_233_p2;

endmodule //myproject_relu_array_ap_fixed_5u_array_ap_ufixed_6_0_4_0_0_5u_relu_config18_s
