-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_array_ap_ufixed_6u_array_ap_fixed_16_6_5_3_0_10u_config18_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer16_out_dout : IN STD_LOGIC_VECTOR (35 downto 0);
    layer16_out_empty_n : IN STD_LOGIC;
    layer16_out_read : OUT STD_LOGIC;
    layer16_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer16_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer18_out_din : OUT STD_LOGIC_VECTOR (159 downto 0);
    layer18_out_full_n : IN STD_LOGIC;
    layer18_out_write : OUT STD_LOGIC;
    layer18_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer18_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of myproject_dense_array_ap_ufixed_6u_array_ap_fixed_16_6_5_3_0_10u_config18_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer16_out_blk_n : STD_LOGIC;
    signal layer18_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal data_fu_67_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_reg_176 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal data_1_reg_181 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_2_reg_186 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_3_reg_191 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_4_reg_196 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_5_reg_201 : STD_LOGIC_VECTOR (5 downto 0);
    signal res_reg_206 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal res_1_reg_211 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_2_reg_216 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_3_reg_221 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_4_reg_226 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_5_reg_231 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_6_reg_236 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_7_reg_241 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_8_reg_246 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_9_reg_251 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_0_val1 : IN STD_LOGIC_VECTOR (5 downto 0);
        data_1_val2 : IN STD_LOGIC_VECTOR (5 downto 0);
        data_2_val3 : IN STD_LOGIC_VECTOR (5 downto 0);
        data_3_val4 : IN STD_LOGIC_VECTOR (5 downto 0);
        data_4_val5 : IN STD_LOGIC_VECTOR (5 downto 0);
        data_5_val6 : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57 : component myproject_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_0_val1 => data_reg_176,
        data_1_val2 => data_1_reg_181,
        data_2_val3 => data_2_reg_186,
        data_3_val4 => data_3_reg_191,
        data_4_val5 => data_4_reg_196,
        data_5_val6 => data_5_reg_201,
        ap_return_0 => grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_0,
        ap_return_1 => grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_1,
        ap_return_2 => grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_2,
        ap_return_3 => grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_3,
        ap_return_4 => grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_4,
        ap_return_5 => grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_5,
        ap_return_6 => grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_6,
        ap_return_7 => grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_7,
        ap_return_8 => grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_8,
        ap_return_9 => grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_9);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((layer18_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                data_1_reg_181 <= layer16_out_dout(11 downto 6);
                data_2_reg_186 <= layer16_out_dout(17 downto 12);
                data_3_reg_191 <= layer16_out_dout(23 downto 18);
                data_4_reg_196 <= layer16_out_dout(29 downto 24);
                data_5_reg_201 <= layer16_out_dout(35 downto 30);
                data_reg_176 <= data_fu_67_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                res_1_reg_211 <= grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_1;
                res_2_reg_216 <= grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_2;
                res_3_reg_221 <= grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_3;
                res_4_reg_226 <= grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_4;
                res_5_reg_231 <= grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_5;
                res_6_reg_236 <= grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_6;
                res_7_reg_241 <= grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_7;
                res_8_reg_246 <= grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_8;
                res_9_reg_251 <= grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_9;
                res_reg_206 <= grp_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config18_s_fu_57_ap_return_0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, layer18_out_full_n, ap_CS_fsm_state11, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((layer18_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(layer18_out_full_n)
    begin
        if ((layer18_out_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer16_out_empty_n)
    begin
                ap_block_state1 <= ((layer16_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer18_out_full_n, ap_CS_fsm_state11)
    begin
        if (((layer18_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    data_fu_67_p1 <= layer16_out_dout(6 - 1 downto 0);

    internal_ap_ready_assign_proc : process(layer18_out_full_n, ap_CS_fsm_state11)
    begin
        if (((layer18_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer16_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer16_out_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer16_out_blk_n <= layer16_out_empty_n;
        else 
            layer16_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer16_out_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer16_out_read <= ap_const_logic_1;
        else 
            layer16_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer18_out_blk_n_assign_proc : process(layer18_out_full_n, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            layer18_out_blk_n <= layer18_out_full_n;
        else 
            layer18_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer18_out_din <= (((((((((res_9_reg_251 & res_8_reg_246) & res_7_reg_241) & res_6_reg_236) & res_5_reg_231) & res_4_reg_226) & res_3_reg_221) & res_2_reg_216) & res_1_reg_211) & res_reg_206);

    layer18_out_write_assign_proc : process(layer18_out_full_n, ap_CS_fsm_state11)
    begin
        if (((layer18_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            layer18_out_write <= ap_const_logic_1;
        else 
            layer18_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
