// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_6u_array_ap_ufixed_6_0_4_0_0_6u_relu_config13_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer11_out_dout,
        layer11_out_empty_n,
        layer11_out_read,
        layer11_out_num_data_valid,
        layer11_out_fifo_cap,
        layer13_out_din,
        layer13_out_full_n,
        layer13_out_write,
        layer13_out_num_data_valid,
        layer13_out_fifo_cap,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [113:0] layer11_out_dout;
input   layer11_out_empty_n;
output   layer11_out_read;
input  [4:0] layer11_out_num_data_valid;
input  [4:0] layer11_out_fifo_cap;
output  [35:0] layer13_out_din;
input   layer13_out_full_n;
output   layer13_out_write;
input  [31:0] layer13_out_num_data_valid;
input  [31:0] layer13_out_fifo_cap;
output   start_out;
output   start_write;

reg ap_idle;
reg layer11_out_read;
reg layer13_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln41_fu_427_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    layer11_out_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    layer13_out_blk_n;
reg   [113:0] layer11_out_read_reg_1230;
reg    ap_block_pp0_stage0_11001_grp1;
wire   [18:0] trunc_ln44_fu_169_p1;
reg   [18:0] trunc_ln44_reg_1258;
reg   [18:0] trunc_ln44_s_reg_1263;
reg   [18:0] trunc_ln44_1_reg_1268;
reg   [18:0] trunc_ln44_2_reg_1273;
reg   [18:0] trunc_ln44_3_reg_1278;
reg   [18:0] trunc_ln44_4_reg_1283;
reg   [0:0] tmp_reg_1288;
reg   [0:0] tmp_reg_1288_pp0_iter2_reg;
wire   [0:0] icmp_ln52_fu_235_p2;
reg   [0:0] icmp_ln52_reg_1295;
reg   [8:0] tmp_s_reg_1300;
reg   [0:0] tmp_44_reg_1305;
reg   [0:0] tmp_44_reg_1305_pp0_iter2_reg;
wire   [0:0] icmp_ln52_13_fu_269_p2;
reg   [0:0] icmp_ln52_13_reg_1312;
reg   [8:0] tmp_48_reg_1317;
reg   [0:0] tmp_50_reg_1322;
reg   [0:0] tmp_50_reg_1322_pp0_iter2_reg;
wire   [0:0] icmp_ln52_15_fu_303_p2;
reg   [0:0] icmp_ln52_15_reg_1329;
reg   [8:0] tmp_55_reg_1334;
reg   [0:0] tmp_57_reg_1339;
reg   [0:0] tmp_57_reg_1339_pp0_iter2_reg;
wire   [0:0] icmp_ln52_17_fu_337_p2;
reg   [0:0] icmp_ln52_17_reg_1346;
reg   [8:0] tmp_62_reg_1351;
reg   [0:0] tmp_64_reg_1356;
reg   [0:0] tmp_64_reg_1356_pp0_iter2_reg;
wire   [0:0] icmp_ln52_19_fu_371_p2;
reg   [0:0] icmp_ln52_19_reg_1363;
reg   [8:0] tmp_69_reg_1368;
reg   [0:0] tmp_71_reg_1373;
reg   [0:0] tmp_71_reg_1373_pp0_iter2_reg;
wire   [0:0] icmp_ln52_21_fu_405_p2;
reg   [0:0] icmp_ln52_21_reg_1380;
reg   [8:0] tmp_76_reg_1385;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln51_fu_438_p2;
reg   [0:0] icmp_ln51_reg_1394;
wire   [5:0] add_ln52_fu_488_p2;
reg   [5:0] add_ln52_reg_1399;
wire   [0:0] empty_fu_519_p2;
reg   [0:0] empty_reg_1405;
wire   [0:0] icmp_ln51_6_fu_525_p2;
reg   [0:0] icmp_ln51_6_reg_1411;
wire   [5:0] add_ln52_6_fu_575_p2;
reg   [5:0] add_ln52_6_reg_1416;
wire   [0:0] empty_49_fu_606_p2;
reg   [0:0] empty_49_reg_1422;
wire   [0:0] icmp_ln51_7_fu_612_p2;
reg   [0:0] icmp_ln51_7_reg_1428;
wire   [5:0] add_ln52_7_fu_662_p2;
reg   [5:0] add_ln52_7_reg_1433;
wire   [0:0] empty_50_fu_693_p2;
reg   [0:0] empty_50_reg_1439;
wire   [0:0] icmp_ln51_8_fu_699_p2;
reg   [0:0] icmp_ln51_8_reg_1445;
wire   [5:0] add_ln52_8_fu_749_p2;
reg   [5:0] add_ln52_8_reg_1450;
wire   [0:0] empty_51_fu_780_p2;
reg   [0:0] empty_51_reg_1456;
wire   [0:0] icmp_ln51_9_fu_786_p2;
reg   [0:0] icmp_ln51_9_reg_1462;
wire   [5:0] add_ln52_9_fu_836_p2;
reg   [5:0] add_ln52_9_reg_1467;
wire   [0:0] empty_52_fu_867_p2;
reg   [0:0] empty_52_reg_1473;
wire   [0:0] icmp_ln51_10_fu_873_p2;
reg   [0:0] icmp_ln51_10_reg_1479;
wire   [5:0] add_ln52_10_fu_923_p2;
reg   [5:0] add_ln52_10_reg_1484;
wire   [0:0] empty_53_fu_954_p2;
reg   [0:0] empty_53_reg_1490;
wire   [5:0] out_data_fu_995_p3;
reg   [5:0] out_data_reg_1496;
wire   [5:0] out_data_1_fu_1037_p3;
reg   [5:0] out_data_1_reg_1501;
wire   [5:0] out_data_2_fu_1079_p3;
reg   [5:0] out_data_2_reg_1506;
wire   [5:0] out_data_3_fu_1121_p3;
reg   [5:0] out_data_3_reg_1511;
wire   [5:0] out_data_4_fu_1163_p3;
reg   [5:0] out_data_4_reg_1516;
wire   [5:0] out_data_5_fu_1205_p3;
reg   [5:0] out_data_5_reg_1521;
reg   [3:0] i1_fu_144;
wire   [3:0] i_fu_421_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_01001_grp1;
wire   [2:0] trunc_ln52_fu_231_p1;
wire   [2:0] tmp_39_fu_259_p4;
wire   [2:0] tmp_52_fu_293_p4;
wire   [2:0] tmp_59_fu_327_p4;
wire   [2:0] tmp_66_fu_361_p4;
wire   [2:0] tmp_73_fu_395_p4;
wire   [0:0] tmp_42_fu_466_p3;
wire   [0:0] or_ln52_fu_473_p2;
wire   [0:0] tmp_40_fu_452_p3;
wire   [0:0] and_ln52_fu_478_p2;
wire   [5:0] trunc_ln2_fu_443_p4;
wire   [5:0] zext_ln52_fu_484_p1;
wire   [0:0] tmp_41_fu_459_p3;
wire   [0:0] tmp_43_fu_499_p3;
wire   [0:0] not_tmp_78_fu_507_p2;
wire   [0:0] icmp_ln52_12_fu_494_p2;
wire   [0:0] and_ln52_25_fu_513_p2;
wire   [0:0] tmp_47_fu_553_p3;
wire   [0:0] or_ln52_20_fu_560_p2;
wire   [0:0] tmp_45_fu_539_p3;
wire   [0:0] and_ln52_6_fu_565_p2;
wire   [5:0] trunc_ln52_s_fu_530_p4;
wire   [5:0] zext_ln52_6_fu_571_p1;
wire   [0:0] tmp_46_fu_546_p3;
wire   [0:0] tmp_49_fu_586_p3;
wire   [0:0] not_tmp_85_fu_594_p2;
wire   [0:0] icmp_ln52_14_fu_581_p2;
wire   [0:0] and_ln52_27_fu_600_p2;
wire   [0:0] tmp_54_fu_640_p3;
wire   [0:0] or_ln52_23_fu_647_p2;
wire   [0:0] tmp_51_fu_626_p3;
wire   [0:0] and_ln52_7_fu_652_p2;
wire   [5:0] trunc_ln52_1_fu_617_p4;
wire   [5:0] zext_ln52_7_fu_658_p1;
wire   [0:0] tmp_53_fu_633_p3;
wire   [0:0] tmp_56_fu_673_p3;
wire   [0:0] not_tmp_92_fu_681_p2;
wire   [0:0] icmp_ln52_16_fu_668_p2;
wire   [0:0] and_ln52_29_fu_687_p2;
wire   [0:0] tmp_61_fu_727_p3;
wire   [0:0] or_ln52_26_fu_734_p2;
wire   [0:0] tmp_58_fu_713_p3;
wire   [0:0] and_ln52_8_fu_739_p2;
wire   [5:0] trunc_ln52_2_fu_704_p4;
wire   [5:0] zext_ln52_8_fu_745_p1;
wire   [0:0] tmp_60_fu_720_p3;
wire   [0:0] tmp_63_fu_760_p3;
wire   [0:0] not_tmp_99_fu_768_p2;
wire   [0:0] icmp_ln52_18_fu_755_p2;
wire   [0:0] and_ln52_31_fu_774_p2;
wire   [0:0] tmp_68_fu_814_p3;
wire   [0:0] or_ln52_29_fu_821_p2;
wire   [0:0] tmp_65_fu_800_p3;
wire   [0:0] and_ln52_9_fu_826_p2;
wire   [5:0] trunc_ln52_3_fu_791_p4;
wire   [5:0] zext_ln52_9_fu_832_p1;
wire   [0:0] tmp_67_fu_807_p3;
wire   [0:0] tmp_70_fu_847_p3;
wire   [0:0] not_tmp_106_fu_855_p2;
wire   [0:0] icmp_ln52_20_fu_842_p2;
wire   [0:0] and_ln52_33_fu_861_p2;
wire   [0:0] tmp_75_fu_901_p3;
wire   [0:0] or_ln52_32_fu_908_p2;
wire   [0:0] tmp_72_fu_887_p3;
wire   [0:0] and_ln52_10_fu_913_p2;
wire   [5:0] trunc_ln52_4_fu_878_p4;
wire   [5:0] zext_ln52_10_fu_919_p1;
wire   [0:0] tmp_74_fu_894_p3;
wire   [0:0] tmp_77_fu_934_p3;
wire   [0:0] not_tmp_113_fu_942_p2;
wire   [0:0] icmp_ln52_22_fu_929_p2;
wire   [0:0] and_ln52_34_fu_948_p2;
wire   [0:0] xor_ln52_fu_964_p2;
wire   [0:0] or_ln52_18_fu_960_p2;
wire   [5:0] select_ln52_fu_974_p3;
wire   [0:0] or_ln52_19_fu_969_p2;
wire   [5:0] select_ln52_18_fu_980_p3;
wire   [5:0] select_ln52_19_fu_988_p3;
wire   [0:0] xor_ln52_6_fu_1006_p2;
wire   [0:0] or_ln52_21_fu_1002_p2;
wire   [5:0] select_ln52_20_fu_1016_p3;
wire   [0:0] or_ln52_22_fu_1011_p2;
wire   [5:0] select_ln52_21_fu_1022_p3;
wire   [5:0] select_ln52_22_fu_1030_p3;
wire   [0:0] xor_ln52_7_fu_1048_p2;
wire   [0:0] or_ln52_24_fu_1044_p2;
wire   [5:0] select_ln52_23_fu_1058_p3;
wire   [0:0] or_ln52_25_fu_1053_p2;
wire   [5:0] select_ln52_24_fu_1064_p3;
wire   [5:0] select_ln52_25_fu_1072_p3;
wire   [0:0] xor_ln52_8_fu_1090_p2;
wire   [0:0] or_ln52_27_fu_1086_p2;
wire   [5:0] select_ln52_26_fu_1100_p3;
wire   [0:0] or_ln52_28_fu_1095_p2;
wire   [5:0] select_ln52_27_fu_1106_p3;
wire   [5:0] select_ln52_28_fu_1114_p3;
wire   [0:0] xor_ln52_9_fu_1132_p2;
wire   [0:0] or_ln52_30_fu_1128_p2;
wire   [5:0] select_ln52_29_fu_1142_p3;
wire   [0:0] or_ln52_31_fu_1137_p2;
wire   [5:0] select_ln52_30_fu_1148_p3;
wire   [5:0] select_ln52_31_fu_1156_p3;
wire   [0:0] xor_ln52_10_fu_1174_p2;
wire   [0:0] or_ln52_33_fu_1170_p2;
wire   [5:0] select_ln52_32_fu_1184_p3;
wire   [0:0] or_ln52_34_fu_1179_p2;
wire   [5:0] select_ln52_33_fu_1190_p3;
wire   [5:0] select_ln52_34_fu_1198_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 i1_fu_144 = 4'd0;
end

myproject_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1))) begin
            i1_fu_144 <= 4'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i1_fu_144 <= i_fu_421_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        add_ln52_10_reg_1484 <= add_ln52_10_fu_923_p2;
        add_ln52_6_reg_1416 <= add_ln52_6_fu_575_p2;
        add_ln52_7_reg_1433 <= add_ln52_7_fu_662_p2;
        add_ln52_8_reg_1450 <= add_ln52_8_fu_749_p2;
        add_ln52_9_reg_1467 <= add_ln52_9_fu_836_p2;
        add_ln52_reg_1399 <= add_ln52_fu_488_p2;
        empty_49_reg_1422 <= empty_49_fu_606_p2;
        empty_50_reg_1439 <= empty_50_fu_693_p2;
        empty_51_reg_1456 <= empty_51_fu_780_p2;
        empty_52_reg_1473 <= empty_52_fu_867_p2;
        empty_53_reg_1490 <= empty_53_fu_954_p2;
        empty_reg_1405 <= empty_fu_519_p2;
        icmp_ln51_10_reg_1479 <= icmp_ln51_10_fu_873_p2;
        icmp_ln51_6_reg_1411 <= icmp_ln51_6_fu_525_p2;
        icmp_ln51_7_reg_1428 <= icmp_ln51_7_fu_612_p2;
        icmp_ln51_8_reg_1445 <= icmp_ln51_8_fu_699_p2;
        icmp_ln51_9_reg_1462 <= icmp_ln51_9_fu_786_p2;
        icmp_ln51_reg_1394 <= icmp_ln51_fu_438_p2;
        out_data_1_reg_1501 <= out_data_1_fu_1037_p3;
        out_data_2_reg_1506 <= out_data_2_fu_1079_p3;
        out_data_3_reg_1511 <= out_data_3_fu_1121_p3;
        out_data_4_reg_1516 <= out_data_4_fu_1163_p3;
        out_data_5_reg_1521 <= out_data_5_fu_1205_p3;
        out_data_reg_1496 <= out_data_fu_995_p3;
        tmp_44_reg_1305_pp0_iter2_reg <= tmp_44_reg_1305;
        tmp_50_reg_1322_pp0_iter2_reg <= tmp_50_reg_1322;
        tmp_57_reg_1339_pp0_iter2_reg <= tmp_57_reg_1339;
        tmp_64_reg_1356_pp0_iter2_reg <= tmp_64_reg_1356;
        tmp_71_reg_1373_pp0_iter2_reg <= tmp_71_reg_1373;
        tmp_reg_1288_pp0_iter2_reg <= tmp_reg_1288;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln52_13_reg_1312 <= icmp_ln52_13_fu_269_p2;
        icmp_ln52_15_reg_1329 <= icmp_ln52_15_fu_303_p2;
        icmp_ln52_17_reg_1346 <= icmp_ln52_17_fu_337_p2;
        icmp_ln52_19_reg_1363 <= icmp_ln52_19_fu_371_p2;
        icmp_ln52_21_reg_1380 <= icmp_ln52_21_fu_405_p2;
        icmp_ln52_reg_1295 <= icmp_ln52_fu_235_p2;
        layer11_out_read_reg_1230 <= layer11_out_dout;
        tmp_44_reg_1305 <= layer11_out_dout[32'd37];
        tmp_48_reg_1317 <= {{layer11_out_dout[37:29]}};
        tmp_50_reg_1322 <= layer11_out_dout[32'd56];
        tmp_55_reg_1334 <= {{layer11_out_dout[56:48]}};
        tmp_57_reg_1339 <= layer11_out_dout[32'd75];
        tmp_62_reg_1351 <= {{layer11_out_dout[75:67]}};
        tmp_64_reg_1356 <= layer11_out_dout[32'd94];
        tmp_69_reg_1368 <= {{layer11_out_dout[94:86]}};
        tmp_71_reg_1373 <= layer11_out_dout[32'd113];
        tmp_76_reg_1385 <= {{layer11_out_dout[113:105]}};
        tmp_reg_1288 <= layer11_out_dout[32'd18];
        tmp_s_reg_1300 <= {{layer11_out_dout[18:10]}};
        trunc_ln44_1_reg_1268 <= {{layer11_out_dout[56:38]}};
        trunc_ln44_2_reg_1273 <= {{layer11_out_dout[75:57]}};
        trunc_ln44_3_reg_1278 <= {{layer11_out_dout[94:76]}};
        trunc_ln44_4_reg_1283 <= {{layer11_out_dout[113:95]}};
        trunc_ln44_reg_1258 <= trunc_ln44_fu_169_p1;
        trunc_ln44_s_reg_1263 <= {{layer11_out_dout[37:19]}};
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_427_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer11_out_blk_n = layer11_out_empty_n;
    end else begin
        layer11_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer11_out_read = 1'b1;
    end else begin
        layer11_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        layer13_out_blk_n = layer13_out_full_n;
    end else begin
        layer13_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        layer13_out_write = 1'b1;
    end else begin
        layer13_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_10_fu_923_p2 = (trunc_ln52_4_fu_878_p4 + zext_ln52_10_fu_919_p1);

assign add_ln52_6_fu_575_p2 = (trunc_ln52_s_fu_530_p4 + zext_ln52_6_fu_571_p1);

assign add_ln52_7_fu_662_p2 = (trunc_ln52_1_fu_617_p4 + zext_ln52_7_fu_658_p1);

assign add_ln52_8_fu_749_p2 = (trunc_ln52_2_fu_704_p4 + zext_ln52_8_fu_745_p1);

assign add_ln52_9_fu_836_p2 = (trunc_ln52_3_fu_791_p4 + zext_ln52_9_fu_832_p1);

assign add_ln52_fu_488_p2 = (trunc_ln2_fu_443_p4 + zext_ln52_fu_484_p1);

assign and_ln52_10_fu_913_p2 = (tmp_72_fu_887_p3 & or_ln52_32_fu_908_p2);

assign and_ln52_25_fu_513_p2 = (tmp_43_fu_499_p3 | not_tmp_78_fu_507_p2);

assign and_ln52_27_fu_600_p2 = (tmp_49_fu_586_p3 | not_tmp_85_fu_594_p2);

assign and_ln52_29_fu_687_p2 = (tmp_56_fu_673_p3 | not_tmp_92_fu_681_p2);

assign and_ln52_31_fu_774_p2 = (tmp_63_fu_760_p3 | not_tmp_99_fu_768_p2);

assign and_ln52_33_fu_861_p2 = (tmp_70_fu_847_p3 | not_tmp_106_fu_855_p2);

assign and_ln52_34_fu_948_p2 = (tmp_77_fu_934_p3 | not_tmp_113_fu_942_p2);

assign and_ln52_6_fu_565_p2 = (tmp_45_fu_539_p3 & or_ln52_20_fu_560_p2);

assign and_ln52_7_fu_652_p2 = (tmp_51_fu_626_p3 & or_ln52_23_fu_647_p2);

assign and_ln52_8_fu_739_p2 = (tmp_58_fu_713_p3 & or_ln52_26_fu_734_p2);

assign and_ln52_9_fu_826_p2 = (tmp_65_fu_800_p3 & or_ln52_29_fu_821_p2);

assign and_ln52_fu_478_p2 = (tmp_40_fu_452_p3 & or_ln52_fu_473_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((ap_done_reg == 1'b1) | ((layer13_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((layer11_out_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((layer13_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((layer11_out_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((ap_done_reg == 1'b1) | ((layer13_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((layer11_out_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((layer13_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((layer11_out_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = internal_ap_ready;

assign empty_49_fu_606_p2 = (icmp_ln52_14_fu_581_p2 & and_ln52_27_fu_600_p2);

assign empty_50_fu_693_p2 = (icmp_ln52_16_fu_668_p2 & and_ln52_29_fu_687_p2);

assign empty_51_fu_780_p2 = (icmp_ln52_18_fu_755_p2 & and_ln52_31_fu_774_p2);

assign empty_52_fu_867_p2 = (icmp_ln52_20_fu_842_p2 & and_ln52_33_fu_861_p2);

assign empty_53_fu_954_p2 = (icmp_ln52_22_fu_929_p2 & and_ln52_34_fu_948_p2);

assign empty_fu_519_p2 = (icmp_ln52_12_fu_494_p2 & and_ln52_25_fu_513_p2);

assign i_fu_421_p2 = (i1_fu_144 + 4'd1);

assign icmp_ln41_fu_427_p2 = ((i1_fu_144 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln51_10_fu_873_p2 = (($signed(trunc_ln44_4_reg_1283) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_6_fu_525_p2 = (($signed(trunc_ln44_s_reg_1263) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_7_fu_612_p2 = (($signed(trunc_ln44_1_reg_1268) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_8_fu_699_p2 = (($signed(trunc_ln44_2_reg_1273) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_9_fu_786_p2 = (($signed(trunc_ln44_3_reg_1278) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_438_p2 = (($signed(trunc_ln44_reg_1258) > $signed(19'd0)) ? 1'b1 : 1'b0);

assign icmp_ln52_12_fu_494_p2 = ((tmp_s_reg_1300 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_13_fu_269_p2 = ((tmp_39_fu_259_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_14_fu_581_p2 = ((tmp_48_reg_1317 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_15_fu_303_p2 = ((tmp_52_fu_293_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_16_fu_668_p2 = ((tmp_55_reg_1334 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_17_fu_337_p2 = ((tmp_59_fu_327_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_18_fu_755_p2 = ((tmp_62_reg_1351 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_19_fu_371_p2 = ((tmp_66_fu_361_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_20_fu_842_p2 = ((tmp_69_reg_1368 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_21_fu_405_p2 = ((tmp_73_fu_395_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_22_fu_929_p2 = ((tmp_76_reg_1385 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_235_p2 = ((trunc_ln52_fu_231_p1 != 3'd0) ? 1'b1 : 1'b0);

assign layer13_out_din = {{{{{{out_data_5_reg_1521}, {out_data_4_reg_1516}}, {out_data_3_reg_1511}}, {out_data_2_reg_1506}}, {out_data_1_reg_1501}}, {out_data_reg_1496}};

assign not_tmp_106_fu_855_p2 = (tmp_67_fu_807_p3 ^ 1'd1);

assign not_tmp_113_fu_942_p2 = (tmp_74_fu_894_p3 ^ 1'd1);

assign not_tmp_78_fu_507_p2 = (tmp_41_fu_459_p3 ^ 1'd1);

assign not_tmp_85_fu_594_p2 = (tmp_46_fu_546_p3 ^ 1'd1);

assign not_tmp_92_fu_681_p2 = (tmp_53_fu_633_p3 ^ 1'd1);

assign not_tmp_99_fu_768_p2 = (tmp_60_fu_720_p3 ^ 1'd1);

assign or_ln52_18_fu_960_p2 = (tmp_reg_1288_pp0_iter2_reg | empty_reg_1405);

assign or_ln52_19_fu_969_p2 = (xor_ln52_fu_964_p2 | tmp_reg_1288_pp0_iter2_reg);

assign or_ln52_20_fu_560_p2 = (tmp_47_fu_553_p3 | icmp_ln52_13_reg_1312);

assign or_ln52_21_fu_1002_p2 = (tmp_44_reg_1305_pp0_iter2_reg | empty_49_reg_1422);

assign or_ln52_22_fu_1011_p2 = (xor_ln52_6_fu_1006_p2 | tmp_44_reg_1305_pp0_iter2_reg);

assign or_ln52_23_fu_647_p2 = (tmp_54_fu_640_p3 | icmp_ln52_15_reg_1329);

assign or_ln52_24_fu_1044_p2 = (tmp_50_reg_1322_pp0_iter2_reg | empty_50_reg_1439);

assign or_ln52_25_fu_1053_p2 = (xor_ln52_7_fu_1048_p2 | tmp_50_reg_1322_pp0_iter2_reg);

assign or_ln52_26_fu_734_p2 = (tmp_61_fu_727_p3 | icmp_ln52_17_reg_1346);

assign or_ln52_27_fu_1086_p2 = (tmp_57_reg_1339_pp0_iter2_reg | empty_51_reg_1456);

assign or_ln52_28_fu_1095_p2 = (xor_ln52_8_fu_1090_p2 | tmp_57_reg_1339_pp0_iter2_reg);

assign or_ln52_29_fu_821_p2 = (tmp_68_fu_814_p3 | icmp_ln52_19_reg_1363);

assign or_ln52_30_fu_1128_p2 = (tmp_64_reg_1356_pp0_iter2_reg | empty_52_reg_1473);

assign or_ln52_31_fu_1137_p2 = (xor_ln52_9_fu_1132_p2 | tmp_64_reg_1356_pp0_iter2_reg);

assign or_ln52_32_fu_908_p2 = (tmp_75_fu_901_p3 | icmp_ln52_21_reg_1380);

assign or_ln52_33_fu_1170_p2 = (tmp_71_reg_1373_pp0_iter2_reg | empty_53_reg_1490);

assign or_ln52_34_fu_1179_p2 = (xor_ln52_10_fu_1174_p2 | tmp_71_reg_1373_pp0_iter2_reg);

assign or_ln52_fu_473_p2 = (tmp_42_fu_466_p3 | icmp_ln52_reg_1295);

assign out_data_1_fu_1037_p3 = ((icmp_ln51_6_reg_1411[0:0] == 1'b1) ? select_ln52_22_fu_1030_p3 : 6'd0);

assign out_data_2_fu_1079_p3 = ((icmp_ln51_7_reg_1428[0:0] == 1'b1) ? select_ln52_25_fu_1072_p3 : 6'd0);

assign out_data_3_fu_1121_p3 = ((icmp_ln51_8_reg_1445[0:0] == 1'b1) ? select_ln52_28_fu_1114_p3 : 6'd0);

assign out_data_4_fu_1163_p3 = ((icmp_ln51_9_reg_1462[0:0] == 1'b1) ? select_ln52_31_fu_1156_p3 : 6'd0);

assign out_data_5_fu_1205_p3 = ((icmp_ln51_10_reg_1479[0:0] == 1'b1) ? select_ln52_34_fu_1198_p3 : 6'd0);

assign out_data_fu_995_p3 = ((icmp_ln51_reg_1394[0:0] == 1'b1) ? select_ln52_19_fu_988_p3 : 6'd0);

assign select_ln52_18_fu_980_p3 = ((or_ln52_18_fu_960_p2[0:0] == 1'b1) ? select_ln52_fu_974_p3 : 6'd63);

assign select_ln52_19_fu_988_p3 = ((or_ln52_19_fu_969_p2[0:0] == 1'b1) ? select_ln52_18_fu_980_p3 : add_ln52_reg_1399);

assign select_ln52_20_fu_1016_p3 = ((tmp_44_reg_1305_pp0_iter2_reg[0:0] == 1'b1) ? 6'd0 : add_ln52_6_reg_1416);

assign select_ln52_21_fu_1022_p3 = ((or_ln52_21_fu_1002_p2[0:0] == 1'b1) ? select_ln52_20_fu_1016_p3 : 6'd63);

assign select_ln52_22_fu_1030_p3 = ((or_ln52_22_fu_1011_p2[0:0] == 1'b1) ? select_ln52_21_fu_1022_p3 : add_ln52_6_reg_1416);

assign select_ln52_23_fu_1058_p3 = ((tmp_50_reg_1322_pp0_iter2_reg[0:0] == 1'b1) ? 6'd0 : add_ln52_7_reg_1433);

assign select_ln52_24_fu_1064_p3 = ((or_ln52_24_fu_1044_p2[0:0] == 1'b1) ? select_ln52_23_fu_1058_p3 : 6'd63);

assign select_ln52_25_fu_1072_p3 = ((or_ln52_25_fu_1053_p2[0:0] == 1'b1) ? select_ln52_24_fu_1064_p3 : add_ln52_7_reg_1433);

assign select_ln52_26_fu_1100_p3 = ((tmp_57_reg_1339_pp0_iter2_reg[0:0] == 1'b1) ? 6'd0 : add_ln52_8_reg_1450);

assign select_ln52_27_fu_1106_p3 = ((or_ln52_27_fu_1086_p2[0:0] == 1'b1) ? select_ln52_26_fu_1100_p3 : 6'd63);

assign select_ln52_28_fu_1114_p3 = ((or_ln52_28_fu_1095_p2[0:0] == 1'b1) ? select_ln52_27_fu_1106_p3 : add_ln52_8_reg_1450);

assign select_ln52_29_fu_1142_p3 = ((tmp_64_reg_1356_pp0_iter2_reg[0:0] == 1'b1) ? 6'd0 : add_ln52_9_reg_1467);

assign select_ln52_30_fu_1148_p3 = ((or_ln52_30_fu_1128_p2[0:0] == 1'b1) ? select_ln52_29_fu_1142_p3 : 6'd63);

assign select_ln52_31_fu_1156_p3 = ((or_ln52_31_fu_1137_p2[0:0] == 1'b1) ? select_ln52_30_fu_1148_p3 : add_ln52_9_reg_1467);

assign select_ln52_32_fu_1184_p3 = ((tmp_71_reg_1373_pp0_iter2_reg[0:0] == 1'b1) ? 6'd0 : add_ln52_10_reg_1484);

assign select_ln52_33_fu_1190_p3 = ((or_ln52_33_fu_1170_p2[0:0] == 1'b1) ? select_ln52_32_fu_1184_p3 : 6'd63);

assign select_ln52_34_fu_1198_p3 = ((or_ln52_34_fu_1179_p2[0:0] == 1'b1) ? select_ln52_33_fu_1190_p3 : add_ln52_10_reg_1484);

assign select_ln52_fu_974_p3 = ((tmp_reg_1288_pp0_iter2_reg[0:0] == 1'b1) ? 6'd0 : add_ln52_reg_1399);

assign start_out = real_start;

assign tmp_39_fu_259_p4 = {{layer11_out_dout[21:19]}};

assign tmp_40_fu_452_p3 = layer11_out_read_reg_1230[32'd3];

assign tmp_41_fu_459_p3 = layer11_out_read_reg_1230[32'd9];

assign tmp_42_fu_466_p3 = layer11_out_read_reg_1230[32'd4];

assign tmp_43_fu_499_p3 = add_ln52_fu_488_p2[32'd5];

assign tmp_45_fu_539_p3 = layer11_out_read_reg_1230[32'd22];

assign tmp_46_fu_546_p3 = layer11_out_read_reg_1230[32'd28];

assign tmp_47_fu_553_p3 = layer11_out_read_reg_1230[32'd23];

assign tmp_49_fu_586_p3 = add_ln52_6_fu_575_p2[32'd5];

assign tmp_51_fu_626_p3 = layer11_out_read_reg_1230[32'd41];

assign tmp_52_fu_293_p4 = {{layer11_out_dout[40:38]}};

assign tmp_53_fu_633_p3 = layer11_out_read_reg_1230[32'd47];

assign tmp_54_fu_640_p3 = layer11_out_read_reg_1230[32'd42];

assign tmp_56_fu_673_p3 = add_ln52_7_fu_662_p2[32'd5];

assign tmp_58_fu_713_p3 = layer11_out_read_reg_1230[32'd60];

assign tmp_59_fu_327_p4 = {{layer11_out_dout[59:57]}};

assign tmp_60_fu_720_p3 = layer11_out_read_reg_1230[32'd66];

assign tmp_61_fu_727_p3 = layer11_out_read_reg_1230[32'd61];

assign tmp_63_fu_760_p3 = add_ln52_8_fu_749_p2[32'd5];

assign tmp_65_fu_800_p3 = layer11_out_read_reg_1230[32'd79];

assign tmp_66_fu_361_p4 = {{layer11_out_dout[78:76]}};

assign tmp_67_fu_807_p3 = layer11_out_read_reg_1230[32'd85];

assign tmp_68_fu_814_p3 = layer11_out_read_reg_1230[32'd80];

assign tmp_70_fu_847_p3 = add_ln52_9_fu_836_p2[32'd5];

assign tmp_72_fu_887_p3 = layer11_out_read_reg_1230[32'd98];

assign tmp_73_fu_395_p4 = {{layer11_out_dout[97:95]}};

assign tmp_74_fu_894_p3 = layer11_out_read_reg_1230[32'd104];

assign tmp_75_fu_901_p3 = layer11_out_read_reg_1230[32'd99];

assign tmp_77_fu_934_p3 = add_ln52_10_fu_923_p2[32'd5];

assign trunc_ln2_fu_443_p4 = {{layer11_out_read_reg_1230[9:4]}};

assign trunc_ln44_fu_169_p1 = layer11_out_dout[18:0];

assign trunc_ln52_1_fu_617_p4 = {{layer11_out_read_reg_1230[47:42]}};

assign trunc_ln52_2_fu_704_p4 = {{layer11_out_read_reg_1230[66:61]}};

assign trunc_ln52_3_fu_791_p4 = {{layer11_out_read_reg_1230[85:80]}};

assign trunc_ln52_4_fu_878_p4 = {{layer11_out_read_reg_1230[104:99]}};

assign trunc_ln52_fu_231_p1 = layer11_out_dout[2:0];

assign trunc_ln52_s_fu_530_p4 = {{layer11_out_read_reg_1230[28:23]}};

assign xor_ln52_10_fu_1174_p2 = (empty_53_reg_1490 ^ 1'd1);

assign xor_ln52_6_fu_1006_p2 = (empty_49_reg_1422 ^ 1'd1);

assign xor_ln52_7_fu_1048_p2 = (empty_50_reg_1439 ^ 1'd1);

assign xor_ln52_8_fu_1090_p2 = (empty_51_reg_1456 ^ 1'd1);

assign xor_ln52_9_fu_1132_p2 = (empty_52_reg_1473 ^ 1'd1);

assign xor_ln52_fu_964_p2 = (empty_reg_1405 ^ 1'd1);

assign zext_ln52_10_fu_919_p1 = and_ln52_10_fu_913_p2;

assign zext_ln52_6_fu_571_p1 = and_ln52_6_fu_565_p2;

assign zext_ln52_7_fu_658_p1 = and_ln52_7_fu_652_p2;

assign zext_ln52_8_fu_745_p1 = and_ln52_8_fu_739_p2;

assign zext_ln52_9_fu_832_p1 = and_ln52_9_fu_826_p2;

assign zext_ln52_fu_484_p1 = and_ln52_fu_478_p2;

endmodule //myproject_relu_array_ap_fixed_6u_array_ap_ufixed_6_0_4_0_0_6u_relu_config13_s
