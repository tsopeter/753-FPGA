// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_dense_array_ap_ufixed_1u_array_ap_fixed_16_6_5_3_0_1u_config24_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer23_out_dout,
        layer23_out_empty_n,
        layer23_out_read,
        layer23_out_num_data_valid,
        layer23_out_fifo_cap,
        layer24_out_TDATA,
        layer24_out_TVALID,
        layer24_out_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] layer23_out_dout;
input   layer23_out_empty_n;
output   layer23_out_read;
input  [1:0] layer23_out_num_data_valid;
input  [1:0] layer23_out_fifo_cap;
output  [15:0] layer24_out_TDATA;
output   layer24_out_TVALID;
input   layer24_out_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg layer23_out_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    layer23_out_blk_n;
reg    layer24_out_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [5:0] data_reg_48;
reg    ap_block_state1;
wire   [8:0] res_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config24_s_fu_39_ap_return;
reg   [8:0] res_reg_53;
wire    ap_CS_fsm_state2;
wire    res_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config24_s_fu_39_ap_ready;
wire    regslice_both_layer24_out_U_apdone_blk;
reg    ap_block_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire   [15:0] layer24_out_TDATA_int_regslice;
reg    layer24_out_TVALID_int_regslice;
wire    layer24_out_TREADY_int_regslice;
wire    regslice_both_layer24_out_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

myproject_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config24_s res_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config24_s_fu_39(
    .ap_ready(res_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config24_s_fu_39_ap_ready),
    .data_val1(data_reg_48),
    .ap_return(res_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config24_s_fu_39_ap_return),
    .ap_rst(ap_rst)
);

myproject_regslice_both #(
    .DataWidth( 16 ))
regslice_both_layer24_out_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(layer24_out_TDATA_int_regslice),
    .vld_in(layer24_out_TVALID_int_regslice),
    .ack_in(layer24_out_TREADY_int_regslice),
    .data_out(layer24_out_TDATA),
    .vld_out(regslice_both_layer24_out_U_vld_out),
    .ack_out(layer24_out_TREADY),
    .apdone_blk(regslice_both_layer24_out_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_reg_48 <= layer23_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        res_reg_53 <= res_dense_latency_wrapper_ap_ufixed_ap_fixed_16_6_5_3_0_config24_s_fu_39_ap_return;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((layer24_out_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state4)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer23_out_blk_n = layer23_out_empty_n;
    end else begin
        layer23_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer23_out_read = 1'b1;
    end else begin
        layer23_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        layer24_out_TDATA_blk_n = layer24_out_TREADY_int_regslice;
    end else begin
        layer24_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (layer24_out_TREADY_int_regslice == 1'b1))) begin
        layer24_out_TVALID_int_regslice = 1'b1;
    end else begin
        layer24_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (layer24_out_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (layer23_out_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4 = ((regslice_both_layer24_out_U_apdone_blk == 1'b1) | (layer24_out_TREADY_int_regslice == 1'b0));
end

assign layer24_out_TDATA_int_regslice = $signed(res_reg_53);

assign layer24_out_TVALID = regslice_both_layer24_out_U_vld_out;

endmodule //myproject_dense_array_ap_ufixed_1u_array_ap_fixed_16_6_5_3_0_1u_config24_s
