// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_dense_array_ap_fixed_10u_array_ap_fixed_27_13_5_3_0_5u_config20_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer18_out_dout,
        layer18_out_empty_n,
        layer18_out_read,
        layer18_out_num_data_valid,
        layer18_out_fifo_cap,
        layer20_out_din,
        layer20_out_full_n,
        layer20_out_write,
        layer20_out_num_data_valid,
        layer20_out_fifo_cap
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [159:0] layer18_out_dout;
input   layer18_out_empty_n;
output   layer18_out_read;
input  [1:0] layer18_out_num_data_valid;
input  [1:0] layer18_out_fifo_cap;
output  [134:0] layer20_out_din;
input   layer20_out_full_n;
output   layer20_out_write;
input  [1:0] layer20_out_num_data_valid;
input  [1:0] layer20_out_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer18_out_read;
reg layer20_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer18_out_blk_n;
reg    layer20_out_blk_n;
wire    ap_CS_fsm_state10;
wire   [15:0] data_fu_87_p1;
reg   [15:0] data_reg_211;
reg    ap_block_state1;
reg   [15:0] data_10_reg_216;
reg   [15:0] data_1_reg_221;
reg   [15:0] data_2_reg_226;
reg   [15:0] data_3_reg_231;
reg   [15:0] data_4_reg_236;
reg   [15:0] data_5_reg_241;
reg   [15:0] data_6_reg_246;
reg   [15:0] data_7_reg_251;
reg   [15:0] data_8_reg_256;
reg   [26:0] res_reg_261;
wire    ap_CS_fsm_state9;
reg   [26:0] res_1_reg_266;
reg   [26:0] res_2_reg_271;
reg   [26:0] res_3_reg_276;
reg   [26:0] res_4_reg_281;
wire   [26:0] grp_dense_latency_wrapper_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_fu_73_ap_return_0;
wire   [26:0] grp_dense_latency_wrapper_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_fu_73_ap_return_1;
wire   [26:0] grp_dense_latency_wrapper_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_fu_73_ap_return_2;
wire   [26:0] grp_dense_latency_wrapper_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_fu_73_ap_return_3;
wire   [26:0] grp_dense_latency_wrapper_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_fu_73_ap_return_4;
wire    ap_CS_fsm_state2;
reg   [9:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
end

myproject_dense_latency_wrapper_ap_fixed_ap_fixed_27_13_5_3_0_config20_s grp_dense_latency_wrapper_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_fu_73(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_0_val1(data_reg_211),
    .data_1_val2(data_10_reg_216),
    .data_2_val3(data_1_reg_221),
    .data_3_val4(data_2_reg_226),
    .data_4_val5(data_3_reg_231),
    .data_5_val6(data_4_reg_236),
    .data_6_val7(data_5_reg_241),
    .data_7_val8(data_6_reg_246),
    .data_8_val9(data_7_reg_251),
    .data_9_val10(data_8_reg_256),
    .ap_return_0(grp_dense_latency_wrapper_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_fu_73_ap_return_0),
    .ap_return_1(grp_dense_latency_wrapper_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_fu_73_ap_return_1),
    .ap_return_2(grp_dense_latency_wrapper_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_fu_73_ap_return_2),
    .ap_return_3(grp_dense_latency_wrapper_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_fu_73_ap_return_3),
    .ap_return_4(grp_dense_latency_wrapper_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_fu_73_ap_return_4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((layer20_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_10_reg_216 <= {{layer18_out_dout[31:16]}};
        data_1_reg_221 <= {{layer18_out_dout[47:32]}};
        data_2_reg_226 <= {{layer18_out_dout[63:48]}};
        data_3_reg_231 <= {{layer18_out_dout[79:64]}};
        data_4_reg_236 <= {{layer18_out_dout[95:80]}};
        data_5_reg_241 <= {{layer18_out_dout[111:96]}};
        data_6_reg_246 <= {{layer18_out_dout[127:112]}};
        data_7_reg_251 <= {{layer18_out_dout[143:128]}};
        data_8_reg_256 <= {{layer18_out_dout[159:144]}};
        data_reg_211 <= data_fu_87_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_1_reg_266 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_fu_73_ap_return_1;
        res_2_reg_271 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_fu_73_ap_return_2;
        res_3_reg_276 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_fu_73_ap_return_3;
        res_4_reg_281 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_fu_73_ap_return_4;
        res_reg_261 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_27_13_5_3_0_config20_s_fu_73_ap_return_0;
    end
end

always @ (*) begin
    if ((layer20_out_full_n == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((layer20_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((layer20_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer18_out_blk_n = layer18_out_empty_n;
    end else begin
        layer18_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer18_out_read = 1'b1;
    end else begin
        layer18_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        layer20_out_blk_n = layer20_out_full_n;
    end else begin
        layer20_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((layer20_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        layer20_out_write = 1'b1;
    end else begin
        layer20_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((layer20_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((layer18_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign data_fu_87_p1 = layer18_out_dout[15:0];

assign layer20_out_din = {{{{{res_4_reg_281}, {res_3_reg_276}}, {res_2_reg_271}}, {res_1_reg_266}}, {res_reg_261}};

assign start_out = real_start;

endmodule //myproject_dense_array_ap_fixed_10u_array_ap_fixed_27_13_5_3_0_5u_config20_s
