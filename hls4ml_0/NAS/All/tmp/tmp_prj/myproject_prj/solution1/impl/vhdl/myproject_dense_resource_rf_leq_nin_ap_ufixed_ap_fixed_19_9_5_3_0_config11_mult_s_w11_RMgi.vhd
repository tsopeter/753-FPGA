-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config11_mult_s_w11_RMgi is 
    generic(
             DataWidth     : integer := 34; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 54
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config11_mult_s_w11_RMgi is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1010111101111101111101000101111110", 1 => "1111111100000110000011111101111110", 2 => "0000000100000010000100111111000100", 3 => "1111111010000011000001111111000001", 
    4 => "0100111101000001000001111110000100", 5 => "0001111100000000000001000010000000", 6 => "1011111101000000000000111101111101", 7 => "0000000011000011000001111011000001", 
    8 => "1111000001000000000001000010000010", 9 => "1101111110111101000100000001111101", 10 => "1101000010000011111100111110111111", 11 => "1111000011000010111110111101000001", 
    12 => "1110000001111111000010000001111101", 13 => "0101000100000001000011000010111100", 14 => "0000111111000011000000000010000101", 15 => "0001000000111101000111111110111011", 
    16 => "1110111010000001000010111010111111", 17 => "1111111110111101000010000000111111", 18 => "0000000000111100000000000001111100", 19 => "1111000001000000111110000001000010", 
    20 => "0001111101000011111101000110000010", 21 => "0000111011111110000001000010111100", 22 => "0001000010111101000100000001111111", 23 => "1001111111000001000000000101000000", 
    24 => "0000111110111110000010000010111111", 25 => "1010111100000001111110000010111110", 26 => "0000111100000100111110111100000000", 27 => "0011111001000010000000111110000010", 
    28 => "0000111100000000111110111110111101", 29 => "1111000010000101000011111100000000", 30 => "0011111111000000000000111111000001", 31 => "0100111110000011111011000001000000", 
    32 => "1111000000111111000100111100111111", 33 => "0010000101000001000000000011111111", 34 => "1100000010000000000100111110111111", 35 => "1101000000000001000000000000000011", 
    36 => "1011000001000000111101000100111111", 37 => "1001000100000001000000111101111101", 38 => "0010000000000011111100111100000010", 39 => "0001000100111101000011000000000000", 
    40 => "0011000100111100000000000010000010", 41 => "0010000000111011000111000000000011", 42 => "0000111111000010111100000001000001", 43 => "0011000000111100000010000000000000", 
    44 => "0100111111000000000011000000111110", 45 => "0010000001111101000010111100000000", 46 => "0000111111000011111101000000000101", 47 => "0000111101111101000011000101000110", 
    48 => "1111000100111110000000000010111011", 49 => "1101000011111100000010111111000010", 50 => "0010111010111111111111000001000011", 51 => "1001111101111010000010111101000000", 
    52 => "0010000001000001000101000111000000", 53 => "0001111110000100000011111111111010");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

