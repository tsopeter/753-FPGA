-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_array_ap_fixed_10u_array_ap_fixed_31_17_5_3_0_1u_config14_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer12_out_dout : IN STD_LOGIC_VECTOR (199 downto 0);
    layer12_out_empty_n : IN STD_LOGIC;
    layer12_out_read : OUT STD_LOGIC;
    layer12_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer12_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer14_out_din : OUT STD_LOGIC_VECTOR (30 downto 0);
    layer14_out_full_n : IN STD_LOGIC;
    layer14_out_write : OUT STD_LOGIC;
    layer14_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer14_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of myproject_dense_array_ap_fixed_10u_array_ap_fixed_31_17_5_3_0_1u_config14_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer12_out_blk_n : STD_LOGIC;
    signal layer14_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal data_fu_89_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_reg_198 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal data_9_reg_203 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_1_reg_208 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_2_reg_213 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_3_reg_218 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_4_reg_223 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_5_reg_228 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_6_reg_233 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_7_reg_238 : STD_LOGIC_VECTOR (19 downto 0);
    signal data_8_reg_243 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_start : STD_LOGIC;
    signal grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_done : STD_LOGIC;
    signal grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_idle : STD_LOGIC;
    signal grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_ready : STD_LOGIC;
    signal grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_return : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call13 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_0_val : IN STD_LOGIC_VECTOR (19 downto 0);
        data_1_val : IN STD_LOGIC_VECTOR (19 downto 0);
        data_2_val : IN STD_LOGIC_VECTOR (19 downto 0);
        data_3_val : IN STD_LOGIC_VECTOR (19 downto 0);
        data_4_val : IN STD_LOGIC_VECTOR (19 downto 0);
        data_5_val : IN STD_LOGIC_VECTOR (19 downto 0);
        data_6_val : IN STD_LOGIC_VECTOR (19 downto 0);
        data_7_val : IN STD_LOGIC_VECTOR (19 downto 0);
        data_8_val : IN STD_LOGIC_VECTOR (19 downto 0);
        data_9_val : IN STD_LOGIC_VECTOR (19 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;



begin
    grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73 : component myproject_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_start,
        ap_done => grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_done,
        ap_idle => grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_idle,
        ap_ready => grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_ready,
        data_0_val => data_reg_198,
        data_1_val => data_9_reg_203,
        data_2_val => data_1_reg_208,
        data_3_val => data_2_reg_213,
        data_4_val => data_3_reg_218,
        data_5_val => data_4_reg_223,
        data_6_val => data_5_reg_228,
        data_7_val => data_6_reg_233,
        data_8_val => data_7_reg_238,
        data_9_val => data_8_reg_243,
        ap_return => grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_done = ap_const_logic_0) or (layer14_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1_ignore_call13) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_ready = ap_const_logic_1)) then 
                    grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                data_1_reg_208 <= layer12_out_dout(59 downto 40);
                data_2_reg_213 <= layer12_out_dout(79 downto 60);
                data_3_reg_218 <= layer12_out_dout(99 downto 80);
                data_4_reg_223 <= layer12_out_dout(119 downto 100);
                data_5_reg_228 <= layer12_out_dout(139 downto 120);
                data_6_reg_233 <= layer12_out_dout(159 downto 140);
                data_7_reg_238 <= layer12_out_dout(179 downto 160);
                data_8_reg_243 <= layer12_out_dout(199 downto 180);
                data_9_reg_203 <= layer12_out_dout(39 downto 20);
                data_reg_198 <= data_fu_89_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, layer14_out_full_n, ap_CS_fsm_state2, ap_block_state1, grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_done = ap_const_logic_0) or (layer14_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(layer14_out_full_n, grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_done)
    begin
        if (((grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_done = ap_const_logic_0) or (layer14_out_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer12_out_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer12_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call13_assign_proc : process(real_start, ap_done_reg, layer12_out_empty_n)
    begin
                ap_block_state1_ignore_call13 <= ((real_start = ap_const_logic_0) or (layer12_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer14_out_full_n, ap_CS_fsm_state2, grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_done)
    begin
        if ((not(((grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_done = ap_const_logic_0) or (layer14_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    data_fu_89_p1 <= layer12_out_dout(20 - 1 downto 0);
    grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_start <= grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_start_reg;

    internal_ap_ready_assign_proc : process(layer14_out_full_n, ap_CS_fsm_state2, grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_done)
    begin
        if ((not(((grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_done = ap_const_logic_0) or (layer14_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer12_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer12_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer12_out_blk_n <= layer12_out_empty_n;
        else 
            layer12_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer12_out_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer12_out_read <= ap_const_logic_1;
        else 
            layer12_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer14_out_blk_n_assign_proc : process(layer14_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer14_out_blk_n <= layer14_out_full_n;
        else 
            layer14_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        layer14_out_din <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_return),31));


    layer14_out_write_assign_proc : process(layer14_out_full_n, ap_CS_fsm_state2, grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_done)
    begin
        if ((not(((grp_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_31_17_5_3_0_config14_s_fu_73_ap_done = ap_const_logic_0) or (layer14_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer14_out_write <= ap_const_logic_1;
        else 
            layer14_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
