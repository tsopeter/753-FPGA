-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config11_mult_s_w11_RNgs is 
    generic(
             DataWidth     : integer := 34; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 54
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config11_mult_s_w11_RNgs is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1011000000000010000010000000111111", 1 => "0100000010111101000100111100111001", 2 => "0000111111000000111101000011111111", 3 => "0010000000000011000000000010111101", 
    4 => "0100000110111111111100000000111011", 5 => "1101111101000100111010111110111111", 6 => "0000111111111101000000000011111100", 7 => "1111000000000001111111111110000000", 
    8 => "0101111011000010111011000011111010", 9 => "0100111100111110111101000000000011", 10 => "0000111111000010111111000000111110", 11 => "1111111110000110000111111010111110", 
    12 => "1110000001111011111111000000000100", 13 => "0011000001000110111100111110111101", 14 => "0000000011111111111111111101000101", 15 => "0101000010111100111011000010111111", 
    16 => "0110000101000011000001111101111101", 17 => "1010000000000001111110000010000101", 18 => "0010111111111110111111000100111010", 19 => "0101000001111011000001111110111100", 
    20 => "0011000101000011000101000000000110", 21 => "1111111110000100111111000011000011", 22 => "0001000011000011000110000110111100", 23 => "1110111111111111111111111101000000", 
    24 => "0110000001111110000010111010000010", 25 => "1110000011111010111011000100000011", 26 => "1110111110000010111110000000111110", 27 => "0010000011111011000011000000000100", 
    28 => "1010000011000011000011111110111111", 29 => "1110000011000000000100111101000010", 30 => "1100111101111111111100000000111100", 31 => "0010000101111111000001000110000000", 
    32 => "0010000101000001000001111111000010", 33 => "0011111110000001111011000001000011", 34 => "1111111100000000000100000100111111", 35 => "0011111100111111000000000000000001", 
    36 => "0000111101000000000001000100111110", 37 => "1100111011111111000001000010000011", 38 => "0000000010111011111111111110000001", 39 => "0000111010000111000000111110000001", 
    40 => "0011000001000011111110111010111110", 41 => "1111000001000000111110111110111011", 42 => "0010111101000000111101000010000001", 43 => "1101111101000011111011000101111110", 
    44 => "1101000000000000111100000010000011", 45 => "0000111101000100111010000010111110", 46 => "1100000011111111000101000000111100", 47 => "1101111101111110111111000010000110", 
    48 => "1101000101000010111101000010000010", 49 => "0000000000111111111100111110000110", 50 => "0001111101111101000010000101000010", 51 => "1100000001000001000001000101000001", 
    52 => "1011111111000010000001000011111110", 53 => "1100000010000010111011000000111111");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

