-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_16_6_5_3_0_config12_s_w12_ROM_NPBew is 
    generic(
             DataWidth     : integer := 63; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 66
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_16_6_5_3_0_config12_s_w12_ROM_NPBew is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "111000000000001000001111111000001000000000000111111000001000000", 1 => "010000000000000000000111110000000000000000001000001000000000000", 2 => "111000001111111000000000000000000000000111111000000000001000001", 3 => "111000000111111000001111110000000111111111111000010111111000000", 
    4 => "111000000000001000000000000111110000000000001111111111111000000", 5 => "111000010000001000000000000111110000000111111111111000000111111", 6 => "001000000000001000010000000000000111111000000000000111111000000", 7 => "000111111000000000001000000111110000001000001000001000000000001", 
    8 => "000000001000001111111000001000001111111000000000000111110000000", 9 => "111000001000001000001000000111111000001000010000000000000000000", 10 => "111000000000000000001000001000000000001000001111111000000111111", 11 => "111000000000000000010111111000001000001000000000001000001000010", 
    12 => "001111111000000000001000000000000000000000000111111111111000001", 13 => "000000001000001000010000000111111000001000000000001000000000000", 14 => "111000001000010000000000001000001000010000001000001000000000000", 15 => "110000001000000000001000000000001000001000001000000000000111110", 
    16 => "111000001000000111111000000000000111111000001000001111111111111", 17 => "111000000111111000001111111000000111110000001000000000000111111", 18 => "001111111000010111110000001111111000001000000000000000001000001", 19 => "000000001000000000000000000000001111111000000111110000000111111", 
    20 => "000111111000000000000000010000000111111000000000001111111111111", 21 => "001000010111111111110000001111110000000000000000000000000111111", 22 => "111000001111111000000111111111111111111000000000010000000000000", 23 => "111000000111111000000000001000001000000000001000001111111000001", 
    24 => "111111111000000000001000001000001111111111110000001111111000000", 25 => "000111111000001000001111111000000000001000000111110000000111111", 26 => "110000001000000000000111111000010000001111111111111000000000000", 27 => "001111111000000000000000000111111000001111111000010000001111111", 
    28 => "000000001111111000000000000000001000000111111000001000001000000", 29 => "001111111000000000000000000000000000001000000111111000000111111", 30 => "111000000000010111111000001000010111111000001000000111111000001", 31 => "000000000000001111111000000000000000000000000000001111111000000", 
    32 => "111000001000001000010000000000000000010000000000000000001000000", 33 => "000000001111111111111111111000000000000000001000000000000000001", 34 => "000000000111111000001000000000010000000000001000000000000111110", 35 => "000000000000000111111000001000001111111000000000001111111111111", 
    36 => "000000000000000000001000001000000000001000001111111111111111110", 37 => "000000000000001000000111111000000111110000000000000000001000000", 38 => "000000000000000000001111111000000000001111110000000111111000001", 39 => "000000000111111000000000000000001000000000001000000000001111111", 
    40 => "111000000000001000001111111000000000000000000111111111111111111", 41 => "111111111000000000000000000000000111111111111000000000000111111", 42 => "001000001111111000000000001000000111110000001000000111111000001", 43 => "000111110111111111111000000000001111111111111000001111111000001", 
    44 => "001000001000000000000000000000000000000000001111111000000000000", 45 => "111000001000001000000111111111111000000111111000010000000000000", 46 => "000111111000001000000000000000001111111000001111111000001111111", 47 => "000111111000000111111000000111111000000000000111111000000000001", 
    48 => "000000000000000111111111111000000000001000001000000000000000000", 49 => "111000000000000000000000000000000111111111111000000000010000000", 50 => "111000000000001000000000000000001111111000000000001000000111111", 51 => "000000000000001000000000000000000000000000000000000000000111111", 
    52 => "000000000000000111111000000000001111111111111111111000001000001", 53 => "111000000000000111111000001111111000000000001000000111111000000", 54 => "010000001000000000001000000111111000001000001000000000000000000", 55 => "111000000111111111111000000000000000000000001000000000000000000", 
    56 => "111111111000001000010000000111111000001111111000000000001000000", 57 => "000000001000000000000111111000000000001000000000001000001000001", 58 => "000111111000000111111000000111110000001111111000010000000111111", 59 => "000000000000000111111000000000000000000000000000000000001000000", 
    60 => "111111111111111000001000000000001000000111111000000000000000001", 61 => "010000000000000000000000000000001111111000000000001000001000001", 62 => "111000000000001111111000001111111000000111111000001000001000001", 63 => "000000000000010000000111111000000111111000000000000111111000000", 
    64 => "000111111000001111111000000000000111111000000111111000001000001", 65 => "000111111000001000001000001111111000000000000111111000001111111");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

