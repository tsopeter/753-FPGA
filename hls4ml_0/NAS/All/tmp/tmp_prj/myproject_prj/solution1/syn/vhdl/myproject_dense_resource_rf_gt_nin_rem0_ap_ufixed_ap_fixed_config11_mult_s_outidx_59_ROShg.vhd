-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_gt_nin_rem0_ap_ufixed_ap_fixed_config11_mult_s_outidx_59_ROShg is 
    generic(
             DataWidth     : integer := 2; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 135
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_gt_nin_rem0_ap_ufixed_ap_fixed_config11_mult_s_outidx_59_ROShg is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00", 1 => "00", 2 => "00", 3 => "00", 
    4 => "00", 5 => "00", 6 => "00", 7 => "00", 
    8 => "00", 9 => "00", 10 => "00", 11 => "00", 
    12 => "00", 13 => "00", 14 => "00", 15 => "00", 
    16 => "00", 17 => "00", 18 => "00", 19 => "00", 
    20 => "00", 21 => "00", 22 => "00", 23 => "00", 
    24 => "00", 25 => "00", 26 => "00", 27 => "00", 
    28 => "00", 29 => "00", 30 => "00", 31 => "00", 
    32 => "00", 33 => "00", 34 => "00", 35 => "00", 
    36 => "00", 37 => "00", 38 => "00", 39 => "00", 
    40 => "00", 41 => "00", 42 => "00", 43 => "00", 
    44 => "00", 45 => "01", 46 => "01", 47 => "01", 
    48 => "01", 49 => "01", 50 => "01", 51 => "01", 
    52 => "01", 53 => "01", 54 => "01", 55 => "01", 
    56 => "01", 57 => "01", 58 => "01", 59 => "01", 
    60 => "01", 61 => "01", 62 => "01", 63 => "01", 
    64 => "01", 65 => "01", 66 => "01", 67 => "01", 
    68 => "01", 69 => "01", 70 => "01", 71 => "01", 
    72 => "01", 73 => "01", 74 => "01", 75 => "01", 
    76 => "01", 77 => "01", 78 => "01", 79 => "01", 
    80 => "01", 81 => "01", 82 => "01", 83 => "01", 
    84 => "01", 85 => "01", 86 => "01", 87 => "01", 
    88 => "01", 89 => "01", 90 => "10", 91 => "10", 
    92 => "10", 93 => "10", 94 => "10", 95 => "10", 
    96 => "10", 97 => "10", 98 => "10", 99 => "10", 
    100 => "10", 101 => "10", 102 => "10", 103 => "10", 
    104 => "10", 105 => "10", 106 => "10", 107 => "10", 
    108 => "10", 109 => "10", 110 => "10", 111 => "10", 
    112 => "10", 113 => "10", 114 => "10", 115 => "10", 
    116 => "10", 117 => "10", 118 => "10", 119 => "10", 
    120 => "10", 121 => "10", 122 => "10", 123 => "10", 
    124 => "10", 125 => "10", 126 => "10", 127 => "10", 
    128 => "10", 129 => "10", 130 => "10", 131 => "10", 
    132 => "10", 133 => "10", 134 => "10");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

