-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_6u_array_ap_ufixed_6_0_4_0_0_6u_relu_config10_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer8_out_dout : IN STD_LOGIC_VECTOR (113 downto 0);
    layer8_out_empty_n : IN STD_LOGIC;
    layer8_out_read : OUT STD_LOGIC;
    layer8_out_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    layer8_out_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    layer10_out_din : OUT STD_LOGIC_VECTOR (35 downto 0);
    layer10_out_full_n : IN STD_LOGIC;
    layer10_out_write : OUT STD_LOGIC;
    layer10_out_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    layer10_out_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_6u_array_ap_ufixed_6_0_4_0_0_6u_relu_config10_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln41_fu_1308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer8_out_blk_n : STD_LOGIC;
    signal layer10_out_blk_n : STD_LOGIC;
    signal i1_fu_144 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal i_fu_1302_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i1_load : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln44_fu_169_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln52_fu_255_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_273_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_247_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1_fu_237_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_fu_293_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_303_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln52_fu_297_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_265_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_319_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_4_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_1_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_4_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_229_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_1_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_363_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_2_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_1_fu_371_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln51_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_2_fu_379_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln44_2_fu_173_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_9_fu_427_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_fu_451_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_2_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_3_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_419_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_1_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_2_fu_409_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_1_fu_471_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_481_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln52_1_fu_475_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_443_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_497_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_10_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_3_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_6_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_38_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_401_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_1_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_4_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_3_fu_541_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_5_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_4_fu_549_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln51_1_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_5_fu_557_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln44_3_fu_183_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_14_fu_605_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_16_fu_629_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_4_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_6_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_597_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_2_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_3_fu_587_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_2_fu_649_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_fu_659_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln52_2_fu_653_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_621_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_675_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_17_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_5_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_8_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_579_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_2_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_7_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_6_fu_719_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_8_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_7_fu_727_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln51_2_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_8_fu_735_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln44_4_fu_193_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_21_fu_783_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_23_fu_807_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_6_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_9_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_775_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_3_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_4_fu_765_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_3_fu_827_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_fu_837_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln52_3_fu_831_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_fu_799_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_853_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_24_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_7_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_10_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_40_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_757_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_3_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_10_fu_879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_9_fu_897_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_11_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_10_fu_905_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln51_3_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_11_fu_913_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln44_5_fu_203_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_28_fu_961_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_30_fu_985_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_8_fu_971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_12_fu_993_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_953_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_5_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_5_fu_943_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_4_fu_1005_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_31_fu_1015_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln52_4_fu_1009_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_29_fu_977_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_1031_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_31_fu_1039_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_9_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_12_fu_1045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_935_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_4_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_13_fu_1057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_12_fu_1075_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_14_fu_1069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_13_fu_1083_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln51_4_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_14_fu_1091_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln44_6_fu_213_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_35_fu_1139_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_37_fu_1163_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_10_fu_1149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_15_fu_1171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_1131_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_7_fu_1177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_6_fu_1121_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_5_fu_1183_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_38_fu_1193_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln52_5_fu_1187_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_36_fu_1155_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_1209_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_38_fu_1217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_11_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_13_fu_1223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_42_fu_1229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_1113_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_5_fu_1241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_16_fu_1235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_15_fu_1253_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln52_17_fu_1247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_16_fu_1261_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln51_5_fu_1107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_17_fu_1269_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_5_fu_1277_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_4_fu_1099_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_3_fu_921_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_2_fu_743_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_1_fu_565_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_data_fu_387_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component myproject_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                i1_fu_144 <= i_fu_1302_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln52_1_fu_475_p2 <= std_logic_vector(unsigned(trunc_ln52_2_fu_409_p4) + unsigned(zext_ln52_1_fu_471_p1));
    add_ln52_2_fu_653_p2 <= std_logic_vector(unsigned(trunc_ln52_3_fu_587_p4) + unsigned(zext_ln52_2_fu_649_p1));
    add_ln52_3_fu_831_p2 <= std_logic_vector(unsigned(trunc_ln52_4_fu_765_p4) + unsigned(zext_ln52_3_fu_827_p1));
    add_ln52_4_fu_1009_p2 <= std_logic_vector(unsigned(trunc_ln52_5_fu_943_p4) + unsigned(zext_ln52_4_fu_1005_p1));
    add_ln52_5_fu_1187_p2 <= std_logic_vector(unsigned(trunc_ln52_6_fu_1121_p4) + unsigned(zext_ln52_5_fu_1183_p1));
    add_ln52_fu_297_p2 <= std_logic_vector(unsigned(trunc_ln1_fu_237_p4) + unsigned(zext_ln52_fu_293_p1));
    and_ln52_10_fu_867_p2 <= (tmp_25_fu_853_p3 or not_tmp_24_fu_861_p2);
    and_ln52_12_fu_1045_p2 <= (tmp_32_fu_1031_p3 or not_tmp_31_fu_1039_p2);
    and_ln52_13_fu_1223_p2 <= (tmp_39_fu_1209_p3 or not_tmp_38_fu_1217_p2);
    and_ln52_1_fu_465_p2 <= (tmp_7_fu_419_p3 and or_ln52_3_fu_459_p2);
    and_ln52_2_fu_643_p2 <= (tmp_13_fu_597_p3 and or_ln52_6_fu_637_p2);
    and_ln52_3_fu_821_p2 <= (tmp_20_fu_775_p3 and or_ln52_9_fu_815_p2);
    and_ln52_4_fu_333_p2 <= (tmp_4_fu_319_p3 or not_tmp_4_fu_327_p2);
    and_ln52_5_fu_999_p2 <= (tmp_27_fu_953_p3 and or_ln52_12_fu_993_p2);
    and_ln52_6_fu_511_p2 <= (tmp_11_fu_497_p3 or not_tmp_10_fu_505_p2);
    and_ln52_7_fu_1177_p2 <= (tmp_34_fu_1131_p3 and or_ln52_15_fu_1171_p2);
    and_ln52_8_fu_689_p2 <= (tmp_18_fu_675_p3 or not_tmp_17_fu_683_p2);
    and_ln52_fu_287_p2 <= (tmp_1_fu_247_p3 and or_ln52_fu_281_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(layer8_out_empty_n, layer10_out_full_n, ap_done_reg, ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (layer10_out_full_n = ap_const_logic_0) or (layer8_out_empty_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln41_fu_1308_p2)
    begin
        if (((icmp_ln41_fu_1308_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i1_load_assign_proc : process(ap_CS_fsm_state1, i1_fu_144, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i1_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i1_load <= i1_fu_144;
        end if; 
    end process;

    empty_38_fu_517_p2 <= (icmp_ln52_3_fu_491_p2 and and_ln52_6_fu_511_p2);
    empty_39_fu_695_p2 <= (icmp_ln52_5_fu_669_p2 and and_ln52_8_fu_689_p2);
    empty_40_fu_873_p2 <= (icmp_ln52_7_fu_847_p2 and and_ln52_10_fu_867_p2);
    empty_41_fu_1051_p2 <= (icmp_ln52_9_fu_1025_p2 and and_ln52_12_fu_1045_p2);
    empty_42_fu_1229_p2 <= (icmp_ln52_11_fu_1203_p2 and and_ln52_13_fu_1223_p2);
    empty_fu_339_p2 <= (icmp_ln52_1_fu_313_p2 and and_ln52_4_fu_333_p2);
    i_fu_1302_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i1_load) + unsigned(ap_const_lv7_1));
    icmp_ln41_fu_1308_p2 <= "1" when (ap_sig_allocacmp_i1_load = ap_const_lv7_78) else "0";
    icmp_ln51_1_fu_395_p2 <= "1" when (signed(trunc_ln44_2_fu_173_p4) > signed(ap_const_lv19_0)) else "0";
    icmp_ln51_2_fu_573_p2 <= "1" when (signed(trunc_ln44_3_fu_183_p4) > signed(ap_const_lv19_0)) else "0";
    icmp_ln51_3_fu_751_p2 <= "1" when (signed(trunc_ln44_4_fu_193_p4) > signed(ap_const_lv19_0)) else "0";
    icmp_ln51_4_fu_929_p2 <= "1" when (signed(trunc_ln44_5_fu_203_p4) > signed(ap_const_lv19_0)) else "0";
    icmp_ln51_5_fu_1107_p2 <= "1" when (signed(trunc_ln44_6_fu_213_p4) > signed(ap_const_lv19_0)) else "0";
    icmp_ln51_fu_223_p2 <= "1" when (signed(trunc_ln44_fu_169_p1) > signed(ap_const_lv19_0)) else "0";
    icmp_ln52_10_fu_1149_p2 <= "0" when (tmp_35_fu_1139_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_11_fu_1203_p2 <= "1" when (tmp_38_fu_1193_p4 = ap_const_lv9_0) else "0";
    icmp_ln52_1_fu_313_p2 <= "1" when (tmp_6_fu_303_p4 = ap_const_lv9_0) else "0";
    icmp_ln52_2_fu_437_p2 <= "0" when (tmp_9_fu_427_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_3_fu_491_p2 <= "1" when (tmp_s_fu_481_p4 = ap_const_lv9_0) else "0";
    icmp_ln52_4_fu_615_p2 <= "0" when (tmp_14_fu_605_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_5_fu_669_p2 <= "1" when (tmp_17_fu_659_p4 = ap_const_lv9_0) else "0";
    icmp_ln52_6_fu_793_p2 <= "0" when (tmp_21_fu_783_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_7_fu_847_p2 <= "1" when (tmp_24_fu_837_p4 = ap_const_lv9_0) else "0";
    icmp_ln52_8_fu_971_p2 <= "0" when (tmp_28_fu_961_p4 = ap_const_lv3_0) else "1";
    icmp_ln52_9_fu_1025_p2 <= "1" when (tmp_31_fu_1015_p4 = ap_const_lv9_0) else "0";
    icmp_ln52_fu_259_p2 <= "0" when (trunc_ln52_fu_255_p1 = ap_const_lv3_0) else "1";

    layer10_out_blk_n_assign_proc : process(ap_CS_fsm_state1, layer10_out_full_n, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer10_out_blk_n <= layer10_out_full_n;
        else 
            layer10_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer10_out_din <= (((((out_data_5_fu_1277_p3 & out_data_4_fu_1099_p3) & out_data_3_fu_921_p3) & out_data_2_fu_743_p3) & out_data_1_fu_565_p3) & out_data_fu_387_p3);

    layer10_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer10_out_write <= ap_const_logic_1;
        else 
            layer10_out_write <= ap_const_logic_0;
        end if; 
    end process;


    layer8_out_blk_n_assign_proc : process(ap_CS_fsm_state1, layer8_out_empty_n, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer8_out_blk_n <= layer8_out_empty_n;
        else 
            layer8_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer8_out_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer8_out_read <= ap_const_logic_1;
        else 
            layer8_out_read <= ap_const_logic_0;
        end if; 
    end process;

    not_tmp_10_fu_505_p2 <= (tmp_8_fu_443_p3 xor ap_const_lv1_1);
    not_tmp_17_fu_683_p2 <= (tmp_15_fu_621_p3 xor ap_const_lv1_1);
    not_tmp_24_fu_861_p2 <= (tmp_22_fu_799_p3 xor ap_const_lv1_1);
    not_tmp_31_fu_1039_p2 <= (tmp_29_fu_977_p3 xor ap_const_lv1_1);
    not_tmp_38_fu_1217_p2 <= (tmp_36_fu_1155_p3 xor ap_const_lv1_1);
    not_tmp_4_fu_327_p2 <= (tmp_2_fu_265_p3 xor ap_const_lv1_1);
    or_ln52_10_fu_879_p2 <= (tmp_19_fu_757_p3 or empty_40_fu_873_p2);
    or_ln52_11_fu_891_p2 <= (xor_ln52_3_fu_885_p2 or tmp_19_fu_757_p3);
    or_ln52_12_fu_993_p2 <= (tmp_30_fu_985_p3 or icmp_ln52_8_fu_971_p2);
    or_ln52_13_fu_1057_p2 <= (tmp_26_fu_935_p3 or empty_41_fu_1051_p2);
    or_ln52_14_fu_1069_p2 <= (xor_ln52_4_fu_1063_p2 or tmp_26_fu_935_p3);
    or_ln52_15_fu_1171_p2 <= (tmp_37_fu_1163_p3 or icmp_ln52_10_fu_1149_p2);
    or_ln52_16_fu_1235_p2 <= (tmp_33_fu_1113_p3 or empty_42_fu_1229_p2);
    or_ln52_17_fu_1247_p2 <= (xor_ln52_5_fu_1241_p2 or tmp_33_fu_1113_p3);
    or_ln52_1_fu_345_p2 <= (tmp_fu_229_p3 or empty_fu_339_p2);
    or_ln52_2_fu_357_p2 <= (xor_ln52_fu_351_p2 or tmp_fu_229_p3);
    or_ln52_3_fu_459_p2 <= (tmp_10_fu_451_p3 or icmp_ln52_2_fu_437_p2);
    or_ln52_4_fu_523_p2 <= (tmp_5_fu_401_p3 or empty_38_fu_517_p2);
    or_ln52_5_fu_535_p2 <= (xor_ln52_1_fu_529_p2 or tmp_5_fu_401_p3);
    or_ln52_6_fu_637_p2 <= (tmp_16_fu_629_p3 or icmp_ln52_4_fu_615_p2);
    or_ln52_7_fu_701_p2 <= (tmp_12_fu_579_p3 or empty_39_fu_695_p2);
    or_ln52_8_fu_713_p2 <= (xor_ln52_2_fu_707_p2 or tmp_12_fu_579_p3);
    or_ln52_9_fu_815_p2 <= (tmp_23_fu_807_p3 or icmp_ln52_6_fu_793_p2);
    or_ln52_fu_281_p2 <= (tmp_3_fu_273_p3 or icmp_ln52_fu_259_p2);
    out_data_1_fu_565_p3 <= 
        select_ln52_5_fu_557_p3 when (icmp_ln51_1_fu_395_p2(0) = '1') else 
        ap_const_lv6_0;
    out_data_2_fu_743_p3 <= 
        select_ln52_8_fu_735_p3 when (icmp_ln51_2_fu_573_p2(0) = '1') else 
        ap_const_lv6_0;
    out_data_3_fu_921_p3 <= 
        select_ln52_11_fu_913_p3 when (icmp_ln51_3_fu_751_p2(0) = '1') else 
        ap_const_lv6_0;
    out_data_4_fu_1099_p3 <= 
        select_ln52_14_fu_1091_p3 when (icmp_ln51_4_fu_929_p2(0) = '1') else 
        ap_const_lv6_0;
    out_data_5_fu_1277_p3 <= 
        select_ln52_17_fu_1269_p3 when (icmp_ln51_5_fu_1107_p2(0) = '1') else 
        ap_const_lv6_0;
    out_data_fu_387_p3 <= 
        select_ln52_2_fu_379_p3 when (icmp_ln51_fu_223_p2(0) = '1') else 
        ap_const_lv6_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln52_10_fu_905_p3 <= 
        select_ln52_9_fu_897_p3 when (or_ln52_10_fu_879_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_11_fu_913_p3 <= 
        select_ln52_10_fu_905_p3 when (or_ln52_11_fu_891_p2(0) = '1') else 
        add_ln52_3_fu_831_p2;
    select_ln52_12_fu_1075_p3 <= 
        ap_const_lv6_0 when (tmp_26_fu_935_p3(0) = '1') else 
        add_ln52_4_fu_1009_p2;
    select_ln52_13_fu_1083_p3 <= 
        select_ln52_12_fu_1075_p3 when (or_ln52_13_fu_1057_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_14_fu_1091_p3 <= 
        select_ln52_13_fu_1083_p3 when (or_ln52_14_fu_1069_p2(0) = '1') else 
        add_ln52_4_fu_1009_p2;
    select_ln52_15_fu_1253_p3 <= 
        ap_const_lv6_0 when (tmp_33_fu_1113_p3(0) = '1') else 
        add_ln52_5_fu_1187_p2;
    select_ln52_16_fu_1261_p3 <= 
        select_ln52_15_fu_1253_p3 when (or_ln52_16_fu_1235_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_17_fu_1269_p3 <= 
        select_ln52_16_fu_1261_p3 when (or_ln52_17_fu_1247_p2(0) = '1') else 
        add_ln52_5_fu_1187_p2;
    select_ln52_1_fu_371_p3 <= 
        select_ln52_fu_363_p3 when (or_ln52_1_fu_345_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_2_fu_379_p3 <= 
        select_ln52_1_fu_371_p3 when (or_ln52_2_fu_357_p2(0) = '1') else 
        add_ln52_fu_297_p2;
    select_ln52_3_fu_541_p3 <= 
        ap_const_lv6_0 when (tmp_5_fu_401_p3(0) = '1') else 
        add_ln52_1_fu_475_p2;
    select_ln52_4_fu_549_p3 <= 
        select_ln52_3_fu_541_p3 when (or_ln52_4_fu_523_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_5_fu_557_p3 <= 
        select_ln52_4_fu_549_p3 when (or_ln52_5_fu_535_p2(0) = '1') else 
        add_ln52_1_fu_475_p2;
    select_ln52_6_fu_719_p3 <= 
        ap_const_lv6_0 when (tmp_12_fu_579_p3(0) = '1') else 
        add_ln52_2_fu_653_p2;
    select_ln52_7_fu_727_p3 <= 
        select_ln52_6_fu_719_p3 when (or_ln52_7_fu_701_p2(0) = '1') else 
        ap_const_lv6_3F;
    select_ln52_8_fu_735_p3 <= 
        select_ln52_7_fu_727_p3 when (or_ln52_8_fu_713_p2(0) = '1') else 
        add_ln52_2_fu_653_p2;
    select_ln52_9_fu_897_p3 <= 
        ap_const_lv6_0 when (tmp_19_fu_757_p3(0) = '1') else 
        add_ln52_3_fu_831_p2;
    select_ln52_fu_363_p3 <= 
        ap_const_lv6_0 when (tmp_fu_229_p3(0) = '1') else 
        add_ln52_fu_297_p2;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_451_p3 <= layer8_out_dout(23 downto 23);
    tmp_11_fu_497_p3 <= add_ln52_1_fu_475_p2(5 downto 5);
    tmp_12_fu_579_p3 <= layer8_out_dout(56 downto 56);
    tmp_13_fu_597_p3 <= layer8_out_dout(41 downto 41);
    tmp_14_fu_605_p4 <= layer8_out_dout(40 downto 38);
    tmp_15_fu_621_p3 <= layer8_out_dout(47 downto 47);
    tmp_16_fu_629_p3 <= layer8_out_dout(42 downto 42);
    tmp_17_fu_659_p4 <= layer8_out_dout(56 downto 48);
    tmp_18_fu_675_p3 <= add_ln52_2_fu_653_p2(5 downto 5);
    tmp_19_fu_757_p3 <= layer8_out_dout(75 downto 75);
    tmp_1_fu_247_p3 <= layer8_out_dout(3 downto 3);
    tmp_20_fu_775_p3 <= layer8_out_dout(60 downto 60);
    tmp_21_fu_783_p4 <= layer8_out_dout(59 downto 57);
    tmp_22_fu_799_p3 <= layer8_out_dout(66 downto 66);
    tmp_23_fu_807_p3 <= layer8_out_dout(61 downto 61);
    tmp_24_fu_837_p4 <= layer8_out_dout(75 downto 67);
    tmp_25_fu_853_p3 <= add_ln52_3_fu_831_p2(5 downto 5);
    tmp_26_fu_935_p3 <= layer8_out_dout(94 downto 94);
    tmp_27_fu_953_p3 <= layer8_out_dout(79 downto 79);
    tmp_28_fu_961_p4 <= layer8_out_dout(78 downto 76);
    tmp_29_fu_977_p3 <= layer8_out_dout(85 downto 85);
    tmp_2_fu_265_p3 <= layer8_out_dout(9 downto 9);
    tmp_30_fu_985_p3 <= layer8_out_dout(80 downto 80);
    tmp_31_fu_1015_p4 <= layer8_out_dout(94 downto 86);
    tmp_32_fu_1031_p3 <= add_ln52_4_fu_1009_p2(5 downto 5);
    tmp_33_fu_1113_p3 <= layer8_out_dout(113 downto 113);
    tmp_34_fu_1131_p3 <= layer8_out_dout(98 downto 98);
    tmp_35_fu_1139_p4 <= layer8_out_dout(97 downto 95);
    tmp_36_fu_1155_p3 <= layer8_out_dout(104 downto 104);
    tmp_37_fu_1163_p3 <= layer8_out_dout(99 downto 99);
    tmp_38_fu_1193_p4 <= layer8_out_dout(113 downto 105);
    tmp_39_fu_1209_p3 <= add_ln52_5_fu_1187_p2(5 downto 5);
    tmp_3_fu_273_p3 <= layer8_out_dout(4 downto 4);
    tmp_4_fu_319_p3 <= add_ln52_fu_297_p2(5 downto 5);
    tmp_5_fu_401_p3 <= layer8_out_dout(37 downto 37);
    tmp_6_fu_303_p4 <= layer8_out_dout(18 downto 10);
    tmp_7_fu_419_p3 <= layer8_out_dout(22 downto 22);
    tmp_8_fu_443_p3 <= layer8_out_dout(28 downto 28);
    tmp_9_fu_427_p4 <= layer8_out_dout(21 downto 19);
    tmp_fu_229_p3 <= layer8_out_dout(18 downto 18);
    tmp_s_fu_481_p4 <= layer8_out_dout(37 downto 29);
    trunc_ln1_fu_237_p4 <= layer8_out_dout(9 downto 4);
    trunc_ln44_2_fu_173_p4 <= layer8_out_dout(37 downto 19);
    trunc_ln44_3_fu_183_p4 <= layer8_out_dout(56 downto 38);
    trunc_ln44_4_fu_193_p4 <= layer8_out_dout(75 downto 57);
    trunc_ln44_5_fu_203_p4 <= layer8_out_dout(94 downto 76);
    trunc_ln44_6_fu_213_p4 <= layer8_out_dout(113 downto 95);
    trunc_ln44_fu_169_p1 <= layer8_out_dout(19 - 1 downto 0);
    trunc_ln52_2_fu_409_p4 <= layer8_out_dout(28 downto 23);
    trunc_ln52_3_fu_587_p4 <= layer8_out_dout(47 downto 42);
    trunc_ln52_4_fu_765_p4 <= layer8_out_dout(66 downto 61);
    trunc_ln52_5_fu_943_p4 <= layer8_out_dout(85 downto 80);
    trunc_ln52_6_fu_1121_p4 <= layer8_out_dout(104 downto 99);
    trunc_ln52_fu_255_p1 <= layer8_out_dout(3 - 1 downto 0);
    xor_ln52_1_fu_529_p2 <= (empty_38_fu_517_p2 xor ap_const_lv1_1);
    xor_ln52_2_fu_707_p2 <= (empty_39_fu_695_p2 xor ap_const_lv1_1);
    xor_ln52_3_fu_885_p2 <= (empty_40_fu_873_p2 xor ap_const_lv1_1);
    xor_ln52_4_fu_1063_p2 <= (empty_41_fu_1051_p2 xor ap_const_lv1_1);
    xor_ln52_5_fu_1241_p2 <= (empty_42_fu_1229_p2 xor ap_const_lv1_1);
    xor_ln52_fu_351_p2 <= (empty_fu_339_p2 xor ap_const_lv1_1);
    zext_ln52_1_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_1_fu_465_p2),6));
    zext_ln52_2_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_2_fu_643_p2),6));
    zext_ln52_3_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_3_fu_821_p2),6));
    zext_ln52_4_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_5_fu_999_p2),6));
    zext_ln52_5_fu_1183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_7_fu_1177_p2),6));
    zext_ln52_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln52_fu_287_p2),6));
end behav;
