-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config8_mult_s_w8_ROMAem is 
    generic(
             DataWidth     : integer := 34; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 45
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config8_mult_s_w8_ROMAem is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1101111010111010000010000101111101", 1 => "0100111101000010000010000010111101", 2 => "0111111101000010000011000011000110", 3 => "0001000011000101000110111111000110", 
    4 => "1010000100000011111101111111000100", 5 => "0011000011000010000011111110000000", 6 => "0000000001111111111100111100000010", 7 => "0000000011111100000000000100111101", 
    8 => "0010000010000010111111111101000000", 9 => "0001000100000100000010111111000001", 10 => "1101000110000011000011111100000011", 11 => "0100000011111011111111000010111110", 
    12 => "0111000110000100000101111100111110", 13 => "0100000001000011111100111110000011", 14 => "0100000010111010000011111111111110", 15 => "0001000000000001000000111111111110", 
    16 => "0000111110111111000001000011000001", 17 => "1101000001111100000111000101111010", 18 => "0110111110111110111111000011000000", 19 => "1110111100000011111100111111111101", 
    20 => "1111000000000100000010000010000010", 21 => "0001111010111110000010111111111101", 22 => "1111000010000111111100000011000111", 23 => "1110000011111100000010000010000010", 
    24 => "1110111111111111000010111111000011", 25 => "0100111100111100000001111111111100", 26 => "0000000101000100111110111011000001", 27 => "0100000000000000111011000011111111", 
    28 => "1101111111111110111110111011000010", 29 => "0010111100111111111110000010000101", 30 => "1110111011000100111001111110111011", 31 => "0000000011000001111110000010000100", 
    32 => "1100000011111110111100000001000001", 33 => "1100000010000001111111111100000111", 34 => "1001000011000000000001000110000010", 35 => "1011000101111111000010000000000100", 
    36 => "1101000000000101000010000100000010", 37 => "1011000101000011000000111110000100", 38 => "1101000000000000000010000000111110", 39 => "1111000010111011000000111110111011", 
    40 => "0011111111000010000101000111111110", 41 => "1111111111000010000001000100000001", 42 => "0011111111111110000100111110111010", 43 => "0010111001000001000110000000000000", 
    44 => "0010111110000001000101111111111011");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

