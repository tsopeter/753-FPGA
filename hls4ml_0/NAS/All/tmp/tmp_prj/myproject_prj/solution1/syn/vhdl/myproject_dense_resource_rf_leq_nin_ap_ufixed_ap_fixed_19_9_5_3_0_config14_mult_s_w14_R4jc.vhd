-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config14_mult_s_w14_R4jc is 
    generic(
             DataWidth     : integer := 34; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 54
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config14_mult_s_w14_R4jc is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1011000111111110000000000001000011", 1 => "1100000111000011000001000100000011", 2 => "1101111111000010111101000001111111", 3 => "1100111111111100000010111110000001", 
    4 => "1100000110111010111110111111000000", 5 => "0001000001000010000011111100111100", 6 => "0001000001000100000011111110111101", 7 => "0010000001000101111101000011111101", 
    8 => "0010000001111011000001111111000011", 9 => "0001111111000010000011111110000010", 10 => "0011000010000010000011000001111110", 11 => "1100000101111111111110111101000100", 
    12 => "0000000000000010111100000000000010", 13 => "0001000001111111000010000110000000", 14 => "0001000001000011111110000001000000", 15 => "0010000011111011000000000100000011", 
    16 => "0001111110000011000010111101111101", 17 => "1011111111000010000010111111000001", 18 => "0000000100000001000110111010000100", 19 => "0001000001000000000011000101000101", 
    20 => "0001000101111110111101000110111101", 21 => "0001111110111010000010111111000010", 22 => "0101111011111110111011000000000111", 23 => "1111111101000101000101111101000010", 
    24 => "0001111100111101000101000000000010", 25 => "1011111110111010111110000001111011", 26 => "0011000000000100000100000011111010", 27 => "1101111111000001000110111110111101", 
    28 => "1110111110000100111111111100111110", 29 => "1101000101000001000001000011000010", 30 => "0010111111000001111101111101000001", 31 => "0010000001111100000100000001000000", 
    32 => "1100000011000011000010000001111110", 33 => "0001000101000001000000111111000010", 34 => "1111111010000011000010000001111100", 35 => "0111111101000000111110111111000001", 
    36 => "0000000001111110000100111111000000", 37 => "1110000001000001000111000010000010", 38 => "1110111110111110000101111111111011", 39 => "1110000000111001111110111111111100", 
    40 => "0010111111000001000100000100000100", 41 => "0010000001111011111101000110000011", 42 => "1110000010000000000100000100000101", 43 => "0000000001000000000000111100111111", 
    44 => "1111000101000010000110000011000000", 45 => "0000111100000000111010000010000000", 46 => "0101111001111100000001111100111100", 47 => "0011000001000011000000000001111100", 
    48 => "0110111111000000000000111101000001", 49 => "0011000100111100000100000011000010", 50 => "1101111100000000000010000010000011", 51 => "1100000011000011111111111101111110", 
    52 => "1100000100000000000000111111000000", 53 => "0000000000000000000101111110111110");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

