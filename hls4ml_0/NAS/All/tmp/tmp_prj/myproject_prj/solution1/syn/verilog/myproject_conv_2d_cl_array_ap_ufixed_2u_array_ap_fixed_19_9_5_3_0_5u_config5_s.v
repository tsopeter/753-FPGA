// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_conv_2d_cl_array_ap_ufixed_2u_array_ap_fixed_19_9_5_3_0_5u_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer4_out_dout,
        layer4_out_empty_n,
        layer4_out_read,
        layer4_out_num_data_valid,
        layer4_out_fifo_cap,
        layer5_out_din,
        layer5_out_full_n,
        layer5_out_write,
        layer5_out_num_data_valid,
        layer5_out_fifo_cap
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [11:0] layer4_out_dout;
input   layer4_out_empty_n;
output   layer4_out_read;
input  [10:0] layer4_out_num_data_valid;
input  [10:0] layer4_out_fifo_cap;
output  [94:0] layer5_out_din;
input   layer5_out_full_n;
output   layer5_out_write;
input  [8:0] layer5_out_num_data_valid;
input  [8:0] layer5_out_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer4_out_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer4_out_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln51_fu_318_p2;
wire   [5:0] trunc_ln57_fu_330_p1;
reg   [5:0] trunc_ln57_reg_361;
reg    ap_block_state2;
reg   [5:0] trunc_ln57_5_reg_366;
wire    grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_start;
wire    grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_done;
wire    grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_idle;
wire    grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_ready;
wire   [94:0] grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_layer5_out_din;
wire    grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_layer5_out_write;
reg    grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_start_reg;
reg    ap_block_state2_ignore_call5;
wire    ap_CS_fsm_state3;
reg   [9:0] indvar_flatten_fu_166;
wire   [9:0] add_ln51_fu_324_p2;
reg    ap_block_state1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_start_reg = 1'b0;
#0 indvar_flatten_fu_166 = 10'd0;
end

myproject_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_start),
    .ap_done(grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_done),
    .ap_idle(grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_idle),
    .ap_ready(grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_ready),
    .in_elem_0_0_0_0_0_val(trunc_ln57_reg_361),
    .in_elem_0_1_0_0_0_val(trunc_ln57_5_reg_366),
    .layer5_out_din(grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_layer5_out_din),
    .layer5_out_full_n(layer5_out_full_n),
    .layer5_out_write(grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_layer5_out_write),
    .layer5_out_num_data_valid(9'd0),
    .layer5_out_fifo_cap(9'd0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state2) & (icmp_ln51_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_ignore_call5) & (icmp_ln51_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_start_reg <= 1'b1;
        end else if ((grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_ready == 1'b1)) begin
            grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_fu_166 <= 10'd0;
    end else if (((1'b0 == ap_block_state2) & (icmp_ln51_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_fu_166 <= add_ln51_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln57_5_reg_366 <= {{layer4_out_dout[11:6]}};
        trunc_ln57_reg_361 <= trunc_ln57_fu_330_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln51_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln51_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln51_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        layer4_out_blk_n = layer4_out_empty_n;
    end else begin
        layer4_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln51_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        layer4_out_read = 1'b1;
    end else begin
        layer4_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2) & (icmp_ln51_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state2) & (icmp_ln51_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln51_fu_324_p2 = (indvar_flatten_fu_166 + 10'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln51_fu_318_p2 == 1'd0) & (layer4_out_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_ignore_call5 = ((icmp_ln51_fu_318_p2 == 1'd0) & (layer4_out_empty_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_start = grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_ap_start_reg;

assign icmp_ln51_fu_318_p2 = ((indvar_flatten_fu_166 == 10'd900) ? 1'b1 : 1'b0);

assign layer5_out_din = grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_layer5_out_din;

assign layer5_out_write = grp_compute_output_buffer_2d_array_array_ap_fixed_19_9_5_3_0_5u_config5_s_fu_176_layer5_out_write;

assign start_out = real_start;

assign trunc_ln57_fu_330_p1 = layer4_out_dout[5:0];

endmodule //myproject_conv_2d_cl_array_ap_ufixed_2u_array_ap_fixed_19_9_5_3_0_5u_config5_s
