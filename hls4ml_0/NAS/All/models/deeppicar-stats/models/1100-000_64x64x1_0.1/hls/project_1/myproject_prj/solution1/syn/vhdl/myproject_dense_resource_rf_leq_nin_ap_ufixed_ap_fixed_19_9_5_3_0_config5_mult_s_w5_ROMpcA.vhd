-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config5_mult_s_w5_ROMpcA is 
    generic(
             DataWidth     : integer := 22; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 50
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_19_9_5_3_0_config5_mult_s_w5_ROMpcA is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1101000101000000000010", 1 => "0101000000000001000011", 2 => "1111111111000001000010", 3 => "0000000000000010111101", 
    4 => "1100111101111110000010", 5 => "1010000011000000111100", 6 => "0001000100111111000000", 7 => "1110000001111110111111", 
    8 => "1111111001000001111111", 9 => "0010111100000011000001", 10 => "0000000000111011000010", 11 => "1111000011111101000000", 
    12 => "0010000010000010000100", 13 => "0010111101111010000000", 14 => "0000000011000001111101", 15 => "1111000110111001111100", 
    16 => "0001000001111110000010", 17 => "0000000101111101000010", 18 => "0001111100111110111110", 19 => "0011000010000001000010", 
    20 => "0011000001000101000001", 21 => "0010111111000001000100", 22 => "0000000001000100000001", 23 => "0100000001111111111111", 
    24 => "1100111011000011000010", 25 => "0100000010111110111011", 26 => "0101000001111101111010", 27 => "1100111011000101000101", 
    28 => "1110111011000101111100", 29 => "1100111110111011111111", 30 => "0010000011111111000011", 31 => "1111000010000011000000", 
    32 => "1111000000000100000100", 33 => "0000000100111110000101", 34 => "0101000001111100111001", 35 => "1011000011111110000010", 
    36 => "0110000100111110000010", 37 => "1101111100111101111111", 38 => "1100111110111111000011", 39 => "0010000011000010000001", 
    40 => "0100000011111111000010", 41 => "0001111110111111000001", 42 => "0011000000000010111110", 43 => "0100000101111110111100", 
    44 => "1101000001111011111101", 45 => "0101000000000101000011", 46 => "0101000110000011000010", 47 => "0010000001000001111100", 
    48 => "0001000000000011111101", 49 => "0011111100000001000000");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

