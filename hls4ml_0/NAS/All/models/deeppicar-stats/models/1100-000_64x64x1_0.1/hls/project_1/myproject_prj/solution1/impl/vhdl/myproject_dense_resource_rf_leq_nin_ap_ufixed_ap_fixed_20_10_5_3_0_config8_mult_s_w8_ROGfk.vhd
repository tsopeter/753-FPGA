-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_20_10_5_3_0_config8_mult_s_w8_ROGfk is 
    generic(
             DataWidth     : integer := 58; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 50
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_ufixed_ap_fixed_20_10_5_3_0_config8_mult_s_w8_ROGfk is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0010111101111111111111000001111011000000111101111111111111", 1 => "1110000000111011000000111111000000111111000000111100111011", 2 => "1101000000111110000100000010111100000010111111000011000010", 3 => "0011000001000001000100000001111100000000111110111111000001", 
    4 => "0011000010000100000000111101000001000010000001000100111111", 5 => "0000111111000011111111000010000000000101000101000100111101", 6 => "1100111110000001000010111111000001111111111111000001000001", 7 => "0001000100111111111101111110111111111110000001000101111101", 
    8 => "0000000001000010111110000000000011111011000010111110000001", 9 => "0000111110000011111111111011000001111101000000111111000011", 10 => "0010000010111110111110000001000000000010000001000000111111", 11 => "0001000001111101000001111111111110000001111110111101111110", 
    12 => "0011000011000000000011000000000100111110000100000001000010", 13 => "0010000001000000111101000000111101000100111111000001000000", 14 => "1110000001111101111111000001111101000001000010111111000100", 15 => "0010111110000010111111111100111111000010111111111110000000", 
    16 => "1111000010000010000100111111111111111101111100000001000001", 17 => "1111111111000010000010000011000000111111111011000001000011", 18 => "1111111110111110111111000101000000000011111101111111111111", 19 => "0001111111000011111111000001000001111111000001111111000001", 
    20 => "0010111110111111000011000000000000000101111101000001111110", 21 => "0011000000111110000010000101111111000010000001111110111100", 22 => "0000000010111101000000111110000100111011000010111011000000", 23 => "0100000000111101000001111100000000000010111101111101000001", 
    24 => "1111111101111110111110111110000100111110000010000011000101", 25 => "0000000011000010000010111110000000000001000010000010111100", 26 => "1111111111000000000000111111111111000001000011111100000001", 27 => "0000000010111011000010111110111110000100111110111111000000", 
    28 => "0000111110000100000010111101111111111101111101111111111111", 29 => "0010000000000001000010111111000011000101000001111110000000", 30 => "1110111111111111111110000101000001111101111101111110111111", 31 => "0011000011000001000011111111000000000010000001000011111111", 
    32 => "1111111110111101111110111111111110000011111111111101111100", 33 => "1111000000111110111110111110111011111110000010111110000000", 34 => "0010111100111101111110000101111100111100000011111111111101", 35 => "0010111111111100000001000000111100111110000010000001000011", 
    36 => "0100111100111111111110111110111111111101111110111111000000", 37 => "1110111111000011000011111011111011000000111111000010000000", 38 => "1100000001000100000001000001000001111101000001000011111101", 39 => "0001000000111101000001000001000010111111111101111111000100", 
    40 => "1101111110000000000101000001111101111110000000111101000010", 41 => "0000000001000011000001111110000000000100000001000100000101", 42 => "0011000100000001000000000010111110000000000001000011000001", 43 => "0000000010000000000000000011000001000001000000000010111100", 
    44 => "0011000011000010111111000001000010000000111110000010000011", 45 => "0100000001000010111110000010000010000001111100000011111111", 46 => "0000000010111110000011000011111011111101111101000010111111", 47 => "0010000001000000000001000100000000000000000010111110000000", 
    48 => "1110000000111110111111000001000000111101111100111111000011", 49 => "0010000010000000000011000011000000111111111101111111000000");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

